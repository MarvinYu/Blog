<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/">

    <channel>
        <title>Martin Kleppmann's blog</title>
        <atom:link href="http://martin.kleppmann.com/feed.rss" rel="self" type="application/rss+xml" />
        <link>http://martin.kleppmann.com/</link>
        <description></description>
        <lastBuildDate>Mon, 06 Apr 2020 17:45:02 BST</lastBuildDate>
        <language>en</language>
        <sy:updatePeriod>hourly</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>

        
        
            <item>
                <title>A brief Brexit lament</title>
                <link>http://martin.kleppmann.com/2020/01/31/brief-brexit-lament.html</link>
                <comments>http://martin.kleppmann.com/2020/01/31/brief-brexit-lament.html#disqus_thread</comments>
                <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2020/01/31/brief-brexit-lament.html</guid>
                
                <description><![CDATA[ It’s Brexit day, and I am sad. For me, something precious is lost today, and I would like to attempt to explain why. My father is German and my mother British. I have dual citizenship, grew up bilingually in Germany, and then moved to the UK over 16 years ago.... ]]></description>
                <content:encoded><![CDATA[
                    <p>It’s Brexit day, and I am sad.
For me, something precious is lost today, and I would like to attempt to explain why.</p>

<p>My father is German and my mother British.
I have dual citizenship, grew up bilingually in Germany, and then moved to the UK over 16 years ago.
In my grandparents’ generation, our two countries fought a terrible war against each other, and yet, in my generation, many people like myself are the children of European love.</p>

<p>Comparing Germany and the UK, I have noticed how Europe seems to be perceived very differently in each country.
In the UK, the relationship with Europe is regarded mostly in economic terms, as a free-trade zone.
In Germany, it is regarded in the first instance as a peace project.</p>

<p>While the economic aspects are obviously important, the difference in perspective has profound implications.
The European project is not a marriage of mere economic convenience, to be divorced again as soon as we believe to have found a better “deal” elsewhere (ignoring the question of whether such a deal may or may not actually materialise).
If you regard Europe as a peace project, leaving it seems ridiculous.
Why would you <em>not</em> want to be part of a peace project?</p>

<p>In Europe, we learn each others’ languages, we visit our twinned cities for school exchanges, concerts etc., we study abroad for a year through the Erasmus programme, we set up funding so that the richer regions in Europe support the development in poorer regions, and so on. 
Basically, the thinking goes: if the people of Europe make friends and find their spouses in other European countries, if they understand each other, trade with each other and support each other, then it is less likely that a demagogue will be able to lure them into fighting with each other again.</p>

<p>Although many British fought and fell in the world wars, and even the smallest village has a war memorial, the memory seems to be different.
I get the impression that British remembrance is often framed in a context of “defeating evil”, while German memories are around the horrors of brutal dictatorship, senseless destruction, pointless death, and the terrible trauma of the Holocaust.
There is nothing glorious in war, only suffering.
No winners, only losers.</p>

<p>I’m not claiming the EU is perfect; every human institution has flaws.
However, the way to improve it is not by throwing a screaming tantrum, running out of the door and banging it shut.
The way to improve an institution is to work from the inside to reform it and shape it to be what we want.
And so I mourn that my home country of choice, which I like in so many other ways, has decided to turn up its nose at this project.</p>

                ]]></content:encoded>
            </item>
        
            <item>
                <title>Research update for 2019</title>
                <link>http://martin.kleppmann.com/2019/10/30/research-update.html</link>
                <comments>http://martin.kleppmann.com/2019/10/30/research-update.html#disqus_thread</comments>
                <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2019/10/30/research-update.html</guid>
                
                <description><![CDATA[ It has now been four years since I moved from industry into academic research, and a lot has happened in this time. In 2015 I posted a year in review blog post, and in 2016 I announced the TRVE DATA project (which I am still working on), but I haven’t... ]]></description>
                <content:encoded><![CDATA[
                    <p>It has now been four years since I moved from industry into academic research, and
a lot has happened in this time.
In 2015 I posted a <a href="/2015/12/28/year-2015-review.html">year in review</a> blog post, and
in 2016 I announced the <a href="/2016/04/15/announcing-trve-data.html">TRVE DATA</a> project
(which I am still working on), but I haven’t posted an update on my work since.
So here goes!</p>

<p>In academic terms, things have been going well. Last year I
<a href="https://twitter.com/martinkl/status/1066748982129504256">got my PhD</a>, 
and as of October 2019 I got another few upgrades to my titles:</p>

<ul>
  <li>I am now an Early Career Fellow of the <a href="https://www.leverhulme.ac.uk/early-career-fellowships">Leverhulme Trust</a>,
with a matching fellowship from the <a href="https://www.newtontrust.cam.ac.uk">Isaac Newton Trust</a>.</li>
  <li>In the department I am now a “Senior Research Associate” (SRA, up from “Research Associate” previously).</li>
  <li>At <a href="https://www.corpus.cam.ac.uk">Corpus Christi College</a> I am now a
<a href="https://www.corpus.cam.ac.uk/people/dr-martin-kleppmann">Fellow</a> and Director of Studies
(which means that I look after the computer science students in the college).</li>
</ul>

<p>The fellowships from the Leverhulme Trust and Isaac Newton Trust are paying my salary
for the next three years, along with additional support from the
<a href="https://mobicentre.cst.cam.ac.uk">Cambridge Centre for Mobile, Wearable Systems and Augmented Intelligence</a>.
The college fellowship mainly involves a very generous dining allowance, and being part of
a community of academics across a broad range of subjects (it’s nice sometimes to talk to people who
are not computer scientists).</p>

<p>My job title of “Senior Research Associate” reflects my status as an independent researcher: that is,
I set my own research agenda. However, to be clear, <em>independent</em> does not mean <em>alone</em>! My experience
of research has been a very sociable one, and all of my work has been in collaboration with others.
If you want to go far,
<a href="https://www.npr.org/sections/goatsandsoda/2016/07/30/487925796/it-takes-a-village-to-determine-the-origins-of-an-african-proverb">go together</a>.
On that note, shout-out to my fine collaborators of the last few years (in alphabetic order),
<a href="https://www.cl.cam.ac.uk/~arb33/">Alastair Beresford</a>,
<a href="https://www.cl.cam.ac.uk/~vb358/">Victor Gomes</a>,
<a href="https://www.cl.cam.ac.uk/~sak70/">Stephan Kollmann</a>,
<a href="http://dominic-mulligan.co.uk/">Dominic Mulligan</a>,
<a href="https://personal.cis.strath.ac.uk/d.thomas/">Daniel Thomas</a>,
<a href="https://twitter.com/pvh">Peter van Hardenberg</a>,
<a href="https://www.cl.cam.ac.uk/~dac53/">Diana Vasile</a>,
<a href="http://about.adamwiggins.com/">Adam Wiggins</a>,
and several more people from the <a href="https://www.inkandswitch.com">Ink &amp; Switch</a> research lab!</p>

<p>Huge thanks to <a href="http://www.boeing.com">The Boeing Company</a> for funding my work for the last four years.
Huge thanks also to <a href="https://www.cl.cam.ac.uk/~arb33/">Prof. Alastair Beresford</a>, my excellent
adviser, mentor, collaborator, and PI (that’s academic-speak for “boss”) over the last four years.</p>

<h2 id="research-funding">Research funding</h2>

<p>The Leverhulme Trust and Isaac Newton Trust, which are funding my work, are UK charities that support
research across many subjects and disciplines, including humanities and social sciences. They fund about
<a href="https://www.leverhulme.ac.uk/early-career-fellowships-2019">140 early career fellowships</a> per year
across all subjects; only one or two per year of these are in computer science. So it looks like
I’m the computer scientist for this year!</p>

<p>A great aspect of this charity funding is that I am free to publish all my work as open source and
open access, with no restrictions. All the code I write is in a public repository by default. This
is very important to me, because the goal behind the things I’m working on (see below) is to
maximise the public benefit of these technologies through open source and open standards.</p>

<p>A downside is that all my positions are for a fixed three-year term (they are not tenure-track),
and I don’t know what comes afterwards. But for now I am going to concentrate on making the most I
can out of those three years.</p>

<h2 id="background-to-my-research">Background to my research</h2>

<p>Nowadays, we increasingly depend on Internet services for communication and collaboration: for
example, we use Google Docs to collaborate on documents, spreadsheets and presentations; we copy
files between devices using Dropbox; we communicate with colleagues using Slack; and we use many
other online services for task tracking, note taking, project planning, knowledge management, and
more.</p>

<p>These services are very valuable and convenient, but their use is also risky because they are
provided through a centralised server infrastructure. If the company providing the service goes out
of business, or decides to discontinue a product, the servers are shut down, the software stops
working, and users are locked out of the documents and data created with that software.</p>

<p>Moreover, since those servers typically process user data in unencrypted form, a rogue employee, or
an adversary who gains access to the servers, can read and tamper with vast amounts of sensitive
data. The provider may also use the data in arbitrary ways, e.g. to train their machine learning
systems and target you with ads.</p>

<p>When these risks are unacceptable, we can fall back to what we might call “old-fashioned”
collaboration methods: for example, one person creates a spreadsheet with Excel and emails it to
their collaborator, who makes changes and then sends the modified file back again by email. This
approach has merits: it does not rely on any external services that might go away (besides the email
infrastructure), and the file can easily be encrypted. However, it quickly becomes messy if the
file is modified by more than one person at a time.</p>

<h2 id="research-goals">Research goals</h2>

<p>Together with my collaborators I am developing the foundations of a new kind of collaboration
software, which we are calling <a href="https://www.inkandswitch.com/local-first.html">local-first software</a>.
It aims to achieve the best of both worlds: allowing the user-friendly real-time collaboration of
applications like Google Docs, in which several people can make changes simultaneously without
suffering conflicts, but without relying on trusted, centralised servers.</p>

<p>While most of today’s Internet services keep the primary copy of any shared data on a server, the
local-first approach stores primary copies of the data as files on the collaborators’ devices, like
in “old-fashioned” collaboration. Servers may still be used, but rather than being a linchpin, they
become an optional enabling component. Because all the data is local, the software continues
working, even when the device has no Internet access or the servers are unavailable. When a user
modifies a document, local-first software automatically sends the changes to collaborators whenever
a network connection is available, so there is no need to email files back and forth.</p>

<p>Local-first software allows multiple users to make changes to the same document concurrently, even
while users are offline, and ensures that all of the changes are automatically merged into
a consistent result. We do this using <a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type">CRDTs</a>.
In this regard our approach differs from version control systems such as SVN or Git, which require
conflicts to be resolved manually, and only offer merging of plain text files. By contrast, we can
perform all merges automatically, and support arbitrarily complex file formats such as spreadsheets,
CAD drawings, or databases with various data models.</p>

<p>Collaborators’ devices can either communicate directly, using fast local networks in a
<em>peer-to-peer</em> manner, or indirectly via servers. To protect the confidentiality and integrity of
the communication between collaborators we plan to use <em>end-to-end encryption</em>. In this approach, if
servers are used, they only ever handle encrypted data that they cannot decrypt. Thus, even if
communication networks or servers are compromised by an attacker, user privacy and data
confidentiality are protected.</p>

<p>This approach is particularly suitable for sensitive data such as a university’s student records,
a hospital’s patient records, legally privileged communication, journalistic investigations, law
enforcement, diplomatic correspondence, and many other settings where regulations and
confidentiality obligations prohibit the sharing of unencrypted data with third parties.</p>

<h2 id="research-outputs">Research outputs</h2>

<p>The results of our research will be published in two forms: as traditional research papers in
academic venues, and in the form of open source software.</p>

<p>Research papers are important because they document the thought process and reasoning behind our
designs, and help others build upon our work in the future. We have already written a series of
<a href="/#publications">publications</a> about our research in the last four years, and there is lots more
interesting material still to come.</p>

<p>Software releases are traditionally regarded as less important in academia (and, to be honest, a lot
of code written by researchers is not very good). However, I regard open source software as a
crucial output for this project. <a href="https://github.com/automerge/automerge">Automerge</a> is the main
CRDT implementation I am working on, and it is designed from the start to be production-quality (in
terms of reliability, test coverage, stability, API design, documentation, community, and so on).</p>

<p>Automerge is not yet perfect, especially in terms of its performance: if it was, our research would
already be done! But I have a plan that should lead to big improvements in the coming year, and the
goal is that Automerge will soon be suitable for building ambitious, large-scale, local-first
applications.</p>

<p>In order to maximise the number of projects that can benefit from this work, the code is licensed
under the liberal <a href="https://opensource.org/licenses/MIT">MIT license</a>. Moreover, as the data format
(for representing documents on disk and for network communication) becomes stable, I think it will
make sense to formalise it as an open standard, with interoperable implementations in several
different programming languages and platforms.</p>

<p>And finally, we are starting to see an emerging community of users and contributors around Automerge.
New community members are regularly popping up in the
<a href="https://communityinviter.com/apps/automerge/automerge">Automerge Slack</a>, users are helpfully
reporting bugs, and a steadily growing
<a href="https://github.com/automerge/automerge/graphs/contributors">set of contributors</a> have had their
pull requests merged. It’s exciting to see this growing community engagement.</p>

<h2 id="interviews">Interviews</h2>

<p>If you want to hear more, I’ve done a bunch of interviews with various podcasts and blogs over the
last few years:</p>

<ul>
  <li><a href="https://softwareengineeringdaily.com/2017/05/02/data-intensive-applications-with-martin-kleppmann/">With Software Engineering Daily about my book</a>,
“Designing Data-Intensive Applications” (May 2017)</li>
  <li><a href="https://softwareengineeringdaily.com/2017/12/08/decentralized-objects-with-martin-kleppman/">With Software Engineering Daily again</a>,
this time about my research on CRDTs (December 2017)</li>
  <li><a href="https://advancetechmedia.org/episode-008-martin-kleppmann/">With the Advance Tech Podcast</a>
about a wide range of topics that I find interesting (October 2017)</li>
  <li><a href="https://www.investedinvestor.com/articles/2018/1/23/martin-kleppmann">With the Invested Investor podcast</a>
about my startup career before I switched towards research (January 2018)</li>
  <li><a href="/2019/06/27/hydra-interview.html">With the Hydra conference</a> about distributed systems in general,
and my work specifically (June 2019)</li>
  <li><a href="https://medium.com/csr-tales/csrtale-13-formal-verification-of-strong-eventual-consistency-1cc0af942e64">With Computer Science Research (CSR) Tales</a>
(July 2019) about the background story behind our paper
“<a href="/2017/10/25/verifying-crdt-isabelle.html">Verifying Strong Eventual Consistency in Distributed Systems</a>”,
which won the Distinguished Paper Award and Distinguished Artifact Award at the OOPSLA 2017 conference.</li>
</ul>

                ]]></content:encoded>
            </item>
        
            <item>
                <title>Figuring out the future of distributed data systems (interview)</title>
                <link>http://martin.kleppmann.com/2019/06/27/hydra-interview.html</link>
                <comments>http://martin.kleppmann.com/2019/06/27/hydra-interview.html#disqus_thread</comments>
                <pubDate>Thu, 27 Jun 2019 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2019/06/27/hydra-interview.html</guid>
                
                <description><![CDATA[ I will be speaking at the Hydra distributed computing conference in St. Petersburg in July 2019. In the run-up to the conference, I did a long interview with Vadim Tsesko, a lead software engineer at Odnoklassniki. We covered lots of interesting topics in this interview, and so I requested permission... ]]></description>
                <content:encoded><![CDATA[
                    <p><em>I will be <a href="/2019/07/11/hydra-distributed.html">speaking</a> at the
<a href="https://hydraconf.com">Hydra distributed computing conference</a> in St. Petersburg in July 2019.
In the run-up to the conference, I did a long interview with
<a href="http://twitter.com/incubos">Vadim Tsesko</a>, a lead software engineer at
<a href="https://ok.ru">Odnoklassniki</a>.
We covered lots of interesting topics in this interview, and so I requested permission to
re-publish it on my own blog as well.</em></p>

<p><em>This interview was <a href="https://medium.com/@hydraconference/the-big-interview-with-martin-kleppmann-figuring-out-the-future-of-distributed-data-systems-28a680d99ae6">originally published by Hydra</a>.
It has also been <a href="https://habr.com/ru/company/jugru/blog/457736/">translated into Russian</a>.</em></p>

<h2 id="contents">Contents:</h2>

<ul>
  <li><a href="#moving-from-business-to-academic-research">Moving from business to academic research</a></li>
  <li><a href="#designing-data-intensive-applications">Designing Data-Intensive Applications</a></li>
  <li><a href="#common-sense-against-artificial-hype-and-aggressive-marketing">Common sense against artificial hype and aggressive marketing</a></li>
  <li><a href="#pitfalls-of-cap-theorem-and-other-industry-mistakes">Pitfalls of CAP theorem and other industry mistakes</a></li>
  <li><a href="#benefits-of-decentralization">Benefits of decentralization</a></li>
  <li><a href="#blockchains-dat-ipfs-filecoin-webrtc">Blockchains, Dat, IPFS, Filecoin, WebRTC</a></li>
  <li><a href="#new-crdts-formal-verification-with-isabelle">New CRDTs. Formal verification with Isabelle</a></li>
  <li><a href="#event-sourcing-and-apache-kafka">Event sourcing and Apache Kafka</a></li>
  <li><a href="#integrating-storage-systems-postgresql-memcached-redis-elasticsearch">Integrating storage systems: PostgreSQL, Memcached, Redis, Elasticsearch</a></li>
  <li><a href="#distributed-transactions-and-recovering-from-bugs">Distributed transactions and recovering from bugs</a></li>
  <li><a href="#professional-growth-and-development">Professional growth and development</a></li>
</ul>

<h2 id="moving-from-business-to-academic-research">Moving from business to academic research</h2>

<p><strong>Vadim</strong>: The first question I would like to ask you is really important for me. You founded Go
Test It and Rapportive, and you had been designing and engineering large-scale systems at LinkedIn
for a while. Then you decided to switch from industrial engineering to academia. Could you please
explain the motivation for that decision? What have you gained and what have you had to sacrifice?</p>

<p><strong>Martin</strong>: It’s been a very interesting process. As you seem to be hinting at, not many people make
the switch in that direction. A lot of people go from academia to industry, but not so many back.
Which is understandable, because I had to take quite a large pay cut in order to go back to
academia. But what I really love about research is the freedom to work on topics that I find
interesting and that I think are important, even if those topics don’t immediately lead to
a commercially viable product within the next 6 months or so. Of course, at a company the stuff you
build needs to turn into a product that can be sold in some form or another.</p>

<p>On the other hand, the things I’m now working on are topics that are really important for the future
of how we build software and how the internet works. But we don’t really understand these topics
well enough yet to go and start building commercial products: we are still at the level of trying to
figure out, fundamentally, what these technologies need to look like. And since this is fundamental
research I realized it’s better to do this at a university than to try to do it at a company,
because at a university I’m free to work on things that might not become commercially viable for
another ten years, and that is OK. It’s OK to work with a much longer time horizon when you’re in
research.</p>

<h2 id="designing-data-intensive-applications">Designing Data-Intensive Applications</h2>

<p><strong>Vadim</strong>: We’ll definitely get back to your current research interests. Meanwhile let’s talk about
your latest book <a href="https://dataintensive.net">Designing Data-Intensive Applications</a>. I’m a big fan
of your book and I believe it’s one of the best guides for building modern distributed systems.
You’ve covered almost all the notable achievements up to date.</p>

<p><strong>Martin</strong>: Thank you, I’m glad you find it useful.</p>

<p><strong>Vadim</strong>: Just for those unlucky readers who haven’t read your book yet, could you please name
several major achievements in the field of distributed systems nowadays?</p>

<p><strong>Martin</strong>: Well, the goal of the book is not so much to explain one particular technology; the goal
is rather to give you a guide to the entire landscape of different systems that are used for storing
and processing data. There are so many different databases, stream processors, batch processing
tools, all sorts of replication tools and so on, and it’s really hard to get an overview. If you’re
trying to build a particular application it’s really hard to know which database you should use, and
which tools are the most appropriate ones for the problem you’re trying to solve.</p>

<p>A lot of existing computing books simply didn’t answer that problem in a satisfactory way. I found
that if you’re reading a book on Cassandra for example, it would tell you why Cassandra is
wonderful, but it generally wouldn’t tell you about things for which it’s not a good fit. So what
I really wanted to do in this book was to identify the main questions that you need to ask yourself
if you’re trying to build some kind of large-scale system. And through answering those questions you
can then help figure out which technologies are appropriate and which are less appropriate for the
particular problem you’re trying to solve — because, in general, there’s no one technology that is
perfect for everything. And so, the book is trying to help you figure out the pros and cons of
different technologies in different settings.</p>

<h2 id="common-sense-against-artificial-hype-and-aggressive-marketing">Common sense against artificial hype and aggressive marketing</h2>

<p><strong>Vadim</strong>: Indeed, often — if not always — there are many technologies with overlapping functions,
features and data models. And you can’t believe all those marketing buzzwords. You need to read the
white papers to learn the internals, and even try to read the source code to understand how it works
exactly.</p>

<p><strong>Martin</strong>: And I found that you often have to read between the lines because often the
documentation doesn’t really tell you for which things a particular database sucks. The truth is
that every database sucks at some kind of workload, the question is just to know which ones they
are. So yes, sometimes you have to read the deployment guidelines for ops people and try to
reverse-engineer from that what is actually going on in the system.</p>

<p><strong>Vadim</strong>: Don’t you feel that the industry lacks the common vocabulary or a set of criteria to
compare different solutions for the same problem? Similar things are called by different names, some
things are omitted which should always be clear and stated explicitly, like transaction guarantees.
What do you think?</p>

<p><strong>Martin</strong>: Yeah, I think a problem that our industry has is that often, when people talk about a
particular tool, there’s a lot of hype about everything. Which is understandable, because the tools
are made by various companies, and obviously those companies want to promote their products, and so
those companies will send people to conferences to speak about how wonderful their product is,
essentially. It will be disguised as a tech talk, but essentially it’s still a sales activity. As an
industry, we really could do with more honesty about the advantages and disadvantages of some
product. And part of that requires a common terminology, because otherwise you simply can’t compare
things on an equal footing. But beyond a shared terminology we need ways of reasoning about things
that certain technologies are good or bad at.</p>

<h2 id="pitfalls-of-cap-theorem-and-other-industry-mistakes">Pitfalls of CAP theorem and other industry mistakes</h2>

<p><strong>Vadim</strong>: My next question is quite a controversial one. Could you please name any major mistakes
in the industry you have stumbled upon during your career? Maybe overvalued technologies or
widely-practiced solutions we should have got rid of a long time ago? It might be a bad example, but
compare JSON over HTTP/1.1 vs the much more efficient gRPC over HTTP/2. Or is there an alternative
point of view?</p>

<p><strong>Martin</strong>: I think in many cases there are very good reasons for why a technology does one thing
and not another. So I’m very hesitant to call things mistakes, because in most cases it’s a question
of trade-offs. In your example of JSON over HTTP/1.1 versus Protocol Buffers over HTTP/2, I think
there are actually quite reasonable arguments for both sides there. For example, if you want to use
Protocol Buffers, you have to define your schema, and a schema can be a wonderful thing because it
helps document exactly what communication is going on. But some people find schemas annoying,
especially if they’re at early stages of development and they’re changing data formats very
frequently. So there you have it, there’s a question of trade-offs; in some situations one is
better, in others the other is better.</p>

<p>In terms of actual mistakes that I feel are simply bad, there’s only a fairly small number of
things. One opinion that I have is that the CAP Theorem is fundamentally bad and just not useful.
Whenever people use the CAP Theorem to justify design decisions, I think often they are either
misinterpreting what CAP is actually saying, or stating the obvious in a way. CAP as a theorem has a
problem that it is really just stating the obvious. Moreover, it talks about just one very narrowly
defined consistency model, namely linearizability, and one very narrowly defined availability model,
which is: you want every replica to be fully available for reads and writes, even if it cannot
communicate with any other replicas. These are reasonable definitions, but they are very narrow, and
many applications simply do not fall into the case of needing precisely that definition of
consistency or precisely that definition of availability. And for all the applications that use a
different definition of those words, the CAP Theorem doesn’t tell you anything at all. It’s simply
an empty statement. So that, I feel, is a mistake.</p>

<p>And while we’re ranting, if you’re asking me to name mistakes, another big mistake that I see in the
tech industry is the mining of cryptocurrencies, which I think is such an egregious waste of
electricity. I just cannot fathom why people think that is a good idea.</p>

<p><strong>Vadim</strong>: Talking about the CAP Theorem, many storage technologies are actually tunable, in terms
of things like AP or CP. You can choose the mode they operate in.</p>

<p><strong>Martin</strong>: Yes. Moreover, there are many technologies which are neither consistent nor available
under the strict definition of the CAP Theorem. They are literally just P! Not CP, not CA, not AP,
just P. Nobody says that, because that would look bad, but honestly, this could be a perfectly
reasonable design decision to make. There are many systems for which that is actually totally fine.
This is actually one of the reasons why I think that CAP is such an unhelpful way of talking about
things: because there is a huge part of the design space that it simply does not capture, where
there are perfectly reasonable good designs for software that it simply doesn’t allow you to talk
about.</p>

<h2 id="benefits-of-decentralization">Benefits of decentralization</h2>

<p><strong>Vadim</strong>: Talking about data-intensive applications today, what other major challenges, unsolved
problems or hot research topics can you name? As far as I know, you’re a major proponent of
decentralized computation and storage.</p>

<p><strong>Martin</strong>: Yes. One of the theses behind my research is that at the moment we rely too much on
servers and centralization. If you think about how the Internet was originally designed back in the
day when it evolved from ARPANET, it was intended as a very resilient network where packets could be
sent via several different routes, and they would still get to the destination. And if a nuclear
bomb hit a particular American city, the rest of the network would still work because it would just
route around the failed parts of the system. This was a Cold War design.</p>

<p>And then we decided to put everything in the cloud, and now basically everything has to go via one
of AWS’s datacenters, such as us-east-1 somewhere in Virginia. We’ve taken away this ideal of being
able to decentrally use various different parts of the network, and we’ve put in these servers that
everything relies on, and now it’s extremely centralized. So I’m interested in decentralization, in
the sense of moving some of the power and control over data away from those servers and back to the
end users.</p>

<p>One thing I want to add in this context is that a lot of people talking about decentralization are
talking about things like cryptocurrencies, because they are also attempting a form of
decentralization whereby control is moved away from a central authority like a bank and into a
network of cooperating nodes. But that’s not really the sort of decentralization that I’m interested
in: I find that these cryptocurrencies are actually still extremely centralized, in the sense that
if you want to make a Bitcoin transaction, you have to make it on the Bitcoin network — you have to
use the network of Bitcoin, so everything is centralized on that particular network. The way it’s
built is decentralized in the sense that it doesn’t have a single controlling node, but the network
as a whole is extremely centralized in that any transaction you have to make you have to do through
this network. You can’t do it in some other way. I feel that it’s still a form of centralization.</p>

<p>In the case of a cryptocurrency this centralization might be inevitable, because you need to do
stuff like avoid double spending, and doing that is difficult without a network that achieves
consensus about exactly which transactions have happened and which have not. And this is exactly
what the Bitcoin network does. But there are many applications that do not require something like a
blockchain, which can actually cope with a much more flexible model of data flowing around the
system. And that’s the type of decentralized system that I’m most interested in.</p>

<h2 id="blockchains-dat-ipfs-filecoin-webrtc">Blockchains, Dat, IPFS, Filecoin, WebRTC</h2>

<p><strong>Vadim</strong>: Could you please name any promising or undervalued technologies in the field of
decentralized systems apart from blockchain? I have been using IPFS for a while.</p>

<p><strong>Martin</strong>: For IPFS, I have looked into it a bit though I haven’t actually used it myself. We’ve
done some work with the <a href="https://dat.foundation/">Dat</a> project, which is somewhat similar to
<a href="https://ipfs.io/">IPFS</a> in the sense that it is also a decentralized storage technology. The
difference is that IPFS has <a href="https://filecoin.io/">Filecoin</a>, a cryptocurrency, attached to it as a
way of paying for storage resources, whereas Dat does not have any blockchain attached to it — it is
purely a way of replicating data across multiple machines in a P2P manner.</p>

<p>For the project that I’ve been working on, Dat has been quite a good fit, because we wanted to build
collaboration software in which several different users could each edit some document or database,
and any changes to that data would get sent to anyone else who needs to have a copy of this data. We
can use Dat to do this replication in a P2P manner, and Dat takes care of all the networking-level
stuff, such as NAT traversal and getting through firewalls — it’s quite a tricky problem just to get
the packets from one end to the other. And then we built a layer on top of that, using CRDTs, which
is a way of allowing several people to edit some document or dataset and to exchange those edits in
an efficient way. I think you can probably build this sort of thing on IPFS as well: you can
probably ignore the Filecoin aspect and just use the P2P replication aspect, and it will probably do
the job just as well.</p>

<p><strong>Vadim</strong>: Sure, though using IPFS might lead to lower responsiveness, because WebRTC underlying Dat
connects P2P nodes directly, and IPFS works like a distributed hash table thing.</p>

<p><strong>Martin</strong>: Well, WebRTC is at a different level of the stack, since it’s intended mostly for
connecting two people together who might be having a video call; in fact, the software we’re using
for this interview right now may well be using WebRTC. And WebRTC does give you a data channel that
you can use for sending arbitrary binary data over it, but building a full replication system on top
of that is still quite a bit of work. And that’s something that Dat or IPFS do already.</p>

<p>You mentioned responsiveness — that is certainly one thing to think about. Say you wanted to build
the next Google Docs in a decentralized way. With Google Docs, the unit of changes that you make is
a single keystroke. Every single letter that you type on your keyboard may get sent in real time to
your collaborators, which is great from the point of view of fast real-time collaboration. But it
also means that over the course of writing a large document you might have hundreds of thousands of
these single-character edits that accumulate, and a lot of these technologies right now are not very
good at compressing this kind of editing data. You can keep all of the edits that you’ve ever made
to your document, but even if you send just a hundred bytes for every single keystroke that you make
and you write a slightly larger document with, say, 100,000 keystrokes, you suddenly now have 10 MB
of data for a document that would only be a few tens of kilobytes normally. So we have this huge
overhead for the amount of data that needs to be sent around, unless we get more clever at
compressing and packaging up changes.</p>

<p>Rather than sending somebody the full list of every character that has ever been typed, we might
just send the current state of the document, and after that we send any updates that have happened
since. But a lot of these peer-to-peer systems don’t yet have a way of doing those state snapshots
in a way that would be efficient enough to use them for something like Google Docs. This is actually
an area I’m actively working on, trying to find better algorithms for synchronizing up different
users for something like a text document, where we don’t want to keep every single keystroke because
that would be too expensive, and we want to make more efficient use of the network bandwidth.</p>

<h2 id="new-crdts-formal-verification-with-isabelle">New CRDTs. Formal verification with Isabelle</h2>

<p><strong>Vadim</strong>: Have you managed to compress that keystroke data substantially? Have you invented new
CRDTs or anything similar?</p>

<p><strong>Martin</strong>: Yes. So far we only have prototypes for this, it’s not yet fully implemented, and we
still need to do some more experiments to measure how efficient it actually is in practice. But we
have developed some compression schemes that look very promising. In my prototype I reduced it from
about 100 bytes per edit to something like 1.7 bytes of overhead per edit. And that’s a lot more
reasonable of course. But as I say, these experiments are still ongoing, and the number might still
change slightly. But I think the bottom line is that there’s a lot of room there for optimization
still, so we can still make it a lot better.</p>

<p><strong>Vadim</strong>: So this is what <a href="https://hydraconf.com/2019/talks/6i4lkw8pwjnadgff5ylr11/">your talk</a>
will be about at the Hydra conference, am I right?</p>

<p><strong>Martin</strong>: Yes, exactly. I’ll give a quick introduction to the area of CRDTs, collaborative
software and some of the problems that arise in that context. Then I’ll describe some of the
research that we’ve been doing in this area. It’s been quite fun because the research we’ve been
doing has been across a whole range of different concerns. On the very applied side, we’ve got a
JavaScript implementation of these algorithms, and we’re using that to build real pieces of
software, trying to use that software ourselves to see how it behaves. On the other end of the
spectrum, we’ve been working with formal methods to prove these algorithms correct, because some of
these algorithms are quite subtle and we want to be very sure that the systems we’re making are
actually correct, i.e. that they always reach a consistent state. There have been a lot of
algorithms in the past that have actually failed to do that, which were simply wrong, that is, in
certain edge cases, they would remain permanently inconsistent. And so, in order to avoid these
problems that algorithms have had in the past, we’ve been using formal methods to prove our
algorithms correct.</p>

<p><strong>Vadim:</strong> Wow. Do you really use theorem provers, like Coq or Isabelle or anything else?</p>

<p><strong>Martin</strong>: Exactly, we’ve been using Isabelle for that.</p>

<blockquote>
  <p>You can attend
<a href="https://thestrangeloop.com/2019/correctness-proofs-of-distributed-systems-with-isabelle.html">Martin’s talk</a>
“Correctness proofs of distributed systems with Isabelle” at The Strange Loop conference in September.</p>
</blockquote>

<p><strong>Vadim</strong>: Sounds great! Are those proofs going to be published?</p>

<p><strong>Martin</strong>: Yes, our first set of proofs is already public. We
<a href="https://martin.kleppmann.com/papers/crdt-isabelle-oopsla17.pdf">published</a> that a year and a half
ago: it was a framework for verifying CRDTs, and we verified three particular CRDTs within that
framework, the main one of which was RGA (<a href="http://csl.skku.edu/papers/jpdc11.pdf">Replicated Growable
Array</a>), which is a CRDT for collaborative text editing.
While it is not very complicated, it is quite a subtle algorithm, and so it’s a good case where
proof is needed, because it’s not obvious just from looking at it that it really is correct. And so
the proof gives us the additional certainty that it really is correct. Our previous work there was
on verifying a couple of existing CRDTs, and our most recent work in this area is about our own
CRDTs for new data models we’ve been developing, and proving our own CRDTs correct as well.</p>

<p><strong>Vadim</strong>: How much larger is the proof compared to the description of the algorithm? Because it can
be a problem sometimes.</p>

<p><strong>Martin</strong>: Yes, that is a problem — the proofs are often a lot of work. I think in our latest
example… Actually, let me have a quick look at the code. The description of the algorithm and the
data structures is about 60 lines of code. So it’s quite a small algorithm. The proof is over 800
lines. So we’ve got roughly 12:1 ratio between the proof and the code. And that is unfortunately
quite typical. The proof is a large amount of additional work. On the other hand, once we have the
proof, we have gained very strong certainty in the correctness of the algorithm. Moreover, we have
ourselves, as humans, understood the algorithm much better. Often I find that through trying to
formalize it, we end up understanding the thing we’re trying to formalize much better than we did
before. And that in itself is actually a useful outcome from this work: besides the proof itself we
gain a deeper understanding, and that is often very helpful for creating better implementations.</p>

<p><strong>Vadim</strong>: Could you please describe the target audience of your talk, how hardcore is it going to
be? What is the preliminary knowledge you expect the audience to have?</p>

<p><strong>Martin</strong>: I like to make my talks accessible with as little previous knowledge requirement as
possible, and I try to lift everybody up to the same level. I cover a lot of material, but I start
at a low base. I would expect people to have some general distributed systems experience: how do you
send some data over a network using TCP, or maybe a rough idea of how Git works, which is quite a
good model for these things. But that’s about all you need, really. Then, understanding the work
we’ve been doing on top of that is actually not too difficult. I explain everything by example,
using pictures to illustrate everything. Hopefully, everybody will be able to follow along.</p>

<h2 id="event-sourcing-and-apache-kafka">Event sourcing and Apache Kafka</h2>

<p><strong>Vadim</strong>: Sounds really great. Actually, we have some time and I would like to discuss one of your
<a href="https://queue.acm.org/detail.cfm?id=3321612">recent articles</a> about online event processing. You’re
a great supporter of the idea of event sourcing, is that correct?</p>

<p><strong>Martin</strong>: Yes, sure.</p>

<p><strong>Vadim</strong>: Nowadays this approach is getting momentum, and in the pursuit of all the advantages of
globally ordered log of operations, many engineers try to deploy it everywhere. Could you please
describe some cases where event sourcing is not the best option? Just to prevent its misuse and
possible disappointment with the approach itself.</p>

<p><strong>Martin</strong>: There are two different layers of the stack that we need to talk about first. Event
sourcing, as proposed by Greg Young and some others, is intended as a mechanism for data modeling,
that is: if you have a database schema and you’re starting to lose control of it because there are
so many different tables and they’re all getting modified by different transactions — then event
sourcing is a way of bringing better clarity to this data model, because the events can express very
directly what is happening at a business level. What is the action that the user took? And then, the
consequences of that action might be updating various tables and so on. Effectively, what you’re
doing with event sourcing is you’re separating out the action (the event) from its effects, which
happen somewhere downstream.</p>

<p>I’ve come to this area from a slightly different angle, which is a lower-level point of view of
using systems like Kafka for building highly scalable systems. This view is similar in the sense
that if you’re using something like Kafka you are using events, but it doesn’t mean you’re
necessarily using event sourcing. And conversely, you don’t need to be using Kafka in order to do
event sourcing; you could do event sourcing in a regular database, or you could use a special
database that was designed specifically for event sourcing. So these two ideas are similar, but
neither requires the other, they just have some overlap.</p>

<p>The case for wanting to use a system like Kafka is mostly the scalability argument: in that case
you’ve simply got so much data coming in that you cannot realistically process it on a single-node
database, so you have to partition it in some way, and using an event log like Kafka gives you a
good way of spreading that work over multiple machines. It provides a good, principled way for
scaling systems. It’s especially useful if you want to integrate several different storage systems.
So if, for example, you want to update not just your relational database but also, say, a full-text
search index like Elasticsearch, or a caching system like Memcached or Redis or something like that,
and you want one event to have an updating effect on all of these different systems, then something
like Kafka is very useful.</p>

<p>In terms of the question you asked (what are the situations in which I would not use this event
sourcing or event log approach) — I think it’s difficult to say precisely, but as a rule of thumb I
would say: use whatever is the simplest. That is, whatever is closest to the domain that you’re
trying to implement. And so, if the thing you’re trying to implement maps very nicely to a
relational database, in which you just insert and update and delete some rows, then just use a
relational database and insert and update and delete some rows. There’s nothing wrong with
relational databases and using them as they are. They have worked fine for us for quite a long time
and they continue to do so. But if you’re finding yourself in a situation where you’re really
struggling to use that kind of database, for example because the complexity of the data model is
getting out of hand, then it makes sense to switch to something like an event sourcing approach.</p>

<p>And similarly, on the lower level (scalability), if the size of your data is such that you can just
put it in PostgreSQL on a single machine — that’s probably fine, just use PostgreSQL on a single
machine. But if you’re at the point where there is no way that a single machine can handle your
load, you have to scale across a large system, then it starts making sense to look into more
distributed systems like Kafka. I think the general principle here is: use whatever is simplest for
the particular task you’re trying to solve.</p>

<h2 id="integrating-storage-systems-postgresql-memcached-redis-elasticsearch">Integrating storage systems: PostgreSQL, Memcached, Redis, Elasticsearch</h2>

<p><strong>Vadim</strong>: It’s really good advice. As your system evolves you can’t precisely predict the direction
of development, all the queries, patterns and data flows.</p>

<p><strong>Martin</strong>: Exactly, and for those kinds of situations relational databases are amazing, because
they are very flexible, especially if you include the JSON support that they now have. PostgreSQL
now has pretty good support for JSON. You can just add a new index if you want to query in a
different way. You can just change the schema and keep running with the data in a different
structure. And so if the size of the data set is not too big and the complexity is not too great,
relational databases work well and provide a great deal of flexibility.</p>

<p><strong>Vadim</strong>: Let’s talk a little bit more about event sourcing. You mentioned an interesting example
with several consumers consuming events from one queue based on Kafka or something similar. Imagine
that new documents get published, and several systems are consuming events: a search system based on
Elasticsearch, which makes the documents searchable, a caching system which puts them into key-value
cache based on Memcached, and a relational database system which updates some tables accordingly. A
document might be a car selling offer or a realty advert. All these consuming systems work
simultaneously and concurrently.</p>

<p><strong>Martin</strong>: So your question is how do you deal with the fact that if you have these several
consumers, some of them might have been updated, but the others have not yet seen an update and are
still lagging behind slightly?</p>

<p><strong>Vadim</strong>: Yes, exactly. A user comes to your website, enters a search query, gets some search
results and clicks a link. But she gets 404 HTTP status code because there is no such entity in the
database, which hasn’t been able to consume and persist the document yet.</p>

<p><strong>Martin</strong>: Yes, this is a bit of a challenge actually. Ideally, what you want is what we would call
“causal consistency” across these different storage systems. If one system contains some data that
you depend on, then the other systems that you look at will also contain those dependencies.
Unfortunately, putting together that kind of causal consistency across different storage
technologies is actually very hard, and this is not really the fault of event sourcing, because no
matter what approach or what system you use to send the updates to the various different systems,
you can always end up with some kind of concurrency issues.</p>

<p>In your example of writing data to both Memcached and Elasticsearch, even if you try to do the
writes to the two systems simultaneously you might have a little bit of network delay, which means
that they arrive at slightly different times on those different systems, and get processed with
slightly different timing. And so somebody who’s reading across those two systems may see an
inconsistent state. Now, there are some research projects that are at least working towards
achieving that kind of causal consistency, but it’s still difficult if you just want to use
something like Elasticsearch or Memcached or so off the shelf.</p>

<p>A good solution here would be that you get presented, conceptually, with a consistent point-in-time
snapshot across both the search index and the cache and the database. If you’re working just within
a relational database, you get something called snapshot isolation, and the point of snapshot
isolation is that if you’re reading from the database, it looks as though you’ve got your own
private copy of the entire database. Anything you look at in the database, any data you query will
be the state as of that point in time, according to the snapshot. So even if the data has afterwards
been changed by another transaction, you will actually see the older data, because that older data
forms part of a consistent snapshot.</p>

<p>And so now, in the case where you’ve got Elasticsearch and Memcached, really what you would ideally
want is a consistent snapshot across these two systems. But unfortunately, neither Memcached nor
Redis nor Elasticsearch have an efficient mechanism for making those kinds of snapshots that can be
coordinated with different storage systems. Each storage system just thinks for itself and typically
presents you the latest value of every key, and it doesn’t have this facility for looking back and
presenting a slightly older version of the data, because the most recent version of the data is not
yet consistent.</p>

<p>I don’t really have a good answer for what the solution would look like. I fear that the solution
would require code changes to any of the storage systems that participate in this kind of thing. So
it will require changes to Elasticsearch and to Redis and to Memcached and any other systems. And
they would have to add some kind of mechanism for point-in-time snapshots that is cheap enough that
you can be using it all the time, because you might be wanting the snapshot several times per second
— it’s not just a once-a-day snapshot, it’s very fine-grained. And at the moment the underlying
systems are not there in terms of being able to do these kinds of snapshots across different storage
systems. It’s a really interesting research topic. I’m hoping that somebody will work on it, but I
haven’t seen any really convincing answers to that problem yet so far.</p>

<h2 id="distributed-transactions-and-recovering-from-bugs">Distributed transactions and recovering from bugs</h2>

<p><strong>Vadim</strong>: Yeah, we need some kind of shared <a href="https://en.wikipedia.org/wiki/Multiversion_concurrency_control">Multiversion Concurrency
Control</a>.</p>

<p><strong>Martin</strong>: Exactly, like the distributed transaction systems. XA distributed transactions will get
you some of the way there, but unfortunately XA, as it stands, is not really very well suited
because it only works if you’re using locking-based concurrency control. This means that if you read
some data, you have to take a lock on it so that nobody can modify that data while you have that
lock. And that kind of locking-based concurrency control has terrible performance, so no system
actually uses that in practice nowadays. But if you don’t have that locking then you don’t get the
necessary isolation behavior in a system like XA distributed transactions. So maybe what we need is
a new protocol for distributed transactions that allows snapshot isolation as the isolation
mechanism across different systems. But I don’t think I’ve seen anything that implements that yet.</p>

<p><strong>Vadim</strong>: Yes, I hope somebody is working on it.</p>

<p><strong>Martin</strong>: Yes, it would be really important. Also in the context of microservices, for example:
the way that people promote that you should build microservices is that each microservice has its
own storage, its own database, and you don’t have one service directly accessing the database of
another service, because that would break the encapsulation of the service. Therefore, each service
just manages its own data.</p>

<p>For example, you have a service for managing users, and it has a database for the users, and
everyone else who wants to find out something about users has to go through the user service. From
the point of view of encapsulation that is nice: you’re hiding details of the database schema from
the other services for example.</p>

<p>But from the point of view of consistency across different services — well, you’ve got a huge
problem now, because of exactly the thing we were discussing: we might have data in two different
services that depends upon each other in some way, and you could easily end up with one service
being slightly ahead of or slightly behind the other in terms of timing, and then you could end up
with someone who reads across different services, getting inconsistent results. And I don’t think
anybody building microservices currently has an answer to that problem.</p>

<p><strong>Vadim</strong>: It is somewhat similar to workflows in our society and government, which are inherently
asynchronous and there are no guarantees of delivery. You can get your passport number, then you can
change it, and you need to prove that you changed it, and that you are the same person.</p>

<p><strong>Martin</strong>: Yes, absolutely. As humans we have ways of dealing with this, for example, we might know
that oh, sometimes that database is a bit outdated, I’ll just check back tomorrow. And then tomorrow
it’s fine. But if it’s software that we’re building, we have to program all that kind of handling
into the software. The software can’t think for itself.</p>

<p><strong>Vadim</strong>: Definitely, at least not yet. I have another question about the advantages of event
sourcing. Event sourcing gives you the ability to stop processing events in case of a bug, and
resume consuming events having deployed the fix, so that the system is always consistent. It’s a
really strong and useful property, but it might not be acceptable in some cases like banking where
you can imagine a system that continues to accept financial transactions, but the balances are stale
due to suspended consumers waiting for a bugfix from developers. What might be a workaround in such
cases?</p>

<p><strong>Martin</strong>: I think it’s a bit unlikely to stop the consumer, deploying the fix and then restart it,
because, as you say, the system has got to continue running, you can’t just stop it. I think what is
more likely to happen is: if you discover a bug, you let the system continue running, but while it
continues running with the buggy code, you produce another version of the code that is fixed, you
deploy that fixed version separately and run the two in parallel for a while. In the fixed version
of the code you might go back in history and reprocess all of the input events that have happened
since the buggy code was deployed, and maybe write the results to a different database. Once you’ve
caught up again you’ve got two versions of the database, which are both based on the same event
inputs, but one of the two processed events with the buggy code and the other processed the events
with the correct code. At that point you can do the switchover, and now everyone who reads the data
is going to read the correct version instead of the buggy version, and you can shut down the buggy
version. That way you never need to stop the system from running, everything keeps working all the
time. And you can take the time to fix the bug, and you can recover from the bug because you can
reprocess those input events again.</p>

<p><strong>Vadim</strong>: Indeed, it’s a really good option if the storage systems are under your control, and we
are not talking about side effects applied to external systems.</p>

<p><strong>Martin</strong>: Yes, you’re right, once we send the data to external systems it gets more difficult
because you might not be able to easily correct it. But this is again something you find in
financial accounting, for example. In a company, you might have quarterly accounts. At the end of
the quarter, everything gets frozen, and all of the revenue and profit calculations are based on the
numbers for that quarter. But then it can happen that actually, some delayed transaction came in,
because somebody forgot to file a receipt in time. The transaction comes in after the calculations
for the quarter have been finalized, but it still belongs in that earlier quarter.</p>

<p>What accountants do in this case is that in the next quarter, they produce corrections to the
previous quarter’s accounts. And typically those corrections will be a small number, and that’s no
problem because it doesn’t change the big picture. But at the same time, everything is still
accounted for correctly. At the human level of these accounting systems that has been the case ever
since accounting systems were invented, centuries ago. It’s always been the case that some late
transactions would come in and change the result for some number that you thought was final, but
actually, it wasn’t because the correction could still come in. And so we just build the system with
the mechanism to perform such corrections. I think we can learn from accounting systems and apply
similar ideas to many other types of data storage systems, and just accept the fact that sometimes
they are mostly correct but not 100% correct and the correction might come in later.</p>

<p><strong>Vadim</strong>: It’s a different point of view to building systems.</p>

<p><strong>Martin</strong>: It is a bit of a new way of thinking, yes. It can be disorienting when you come across
it at first. But I don’t think there’s really a way round it, because this impreciseness is inherent
in the fact that we do not know the entire state of the world — it is fundamental to the way
distributed systems work. We can’t just hide it, we can’t pretend that it doesn’t happen, because
that imprecision is necessarily exposed in the way we process the data.</p>

<h2 id="professional-growth-and-development">Professional growth and development</h2>

<p><strong>Vadim</strong>: Do you think that conferences like Hydra are anticipated? Most distributed systems are
quite different, and it is hard to imagine that many attendees will get to work and will start
applying what they have learned in day-to-day activities.</p>

<p><strong>Martin</strong>: It is broad, but I think that a lot of the interesting ideas in distributed systems are
conceptual. So the insights are not necessarily like “use this database” or “use this particular
technology”. They are more like ways of thinking about systems and about software. And those kinds
of ideas can be applied quite widely. My hope is that when attendees go away from this conference,
the lessons they take away are not so much what piece of software they should be using or which
programming language they should be using — really, I don’t mind about that — but more like how to
<em>think</em> about the systems they are building.</p>

<p><strong>Vadim</strong>: Why do you think it’s important to give conference talks on such complex topics as your
talk, compared to publishing papers, covering all their details and intricacies? Or should anyone do
both?</p>

<p><strong>Martin</strong>: I think they serve different purposes. When we write papers, the purpose is to have a
very definitive, very precise analysis of a particular problem, and to go really deep in that. On
the other hand, the purpose of a talk is more to get people interested in a topic and to start a
conversation around it. I love going to conferences partly because of the discussions I then have
around the talk, where people come to me and say: “oh, we tried something like this, but we ran into
this problem and that problem, what do you think about that?” Then I get to think about other
people’s problems, and that’s really interesting because I get to learn a lot from that.</p>

<p>So, from my point of view, the selfish reason for going to conferences is really to learn from other
people, what their experiences have been, and to help share the experiences that we’ve made in the
hope that other people will find them useful as well. But fundamentally, a conference talk is often
an introduction to a subject, whereas a paper is a deep analysis of a very narrow question. I think
those are different genres and I think we need both of them.</p>

<p><strong>Vadim</strong>: And the last question. How do you personally grow as a professional engineer and a
researcher? Could you please recommend any conferences, blogs, books, communities for those who wish
to develop themselves in the field of distributed systems?</p>

<p><strong>Martin</strong>: That’s a good question. Certainly, there are things to listen to and to read. There’s no
shortage of conference talks that have been recorded and put online. There are books like my own
book for example, which provides a bit of an introduction to the topic, but also lots of references
to further reading. So if there are any particular detailed questions that you’re interested in, you
can follow those references and find the original papers where these ideas were discussed. They can
be a very valuable way of learning about something in greater depth.</p>

<p>A really important part is also trying to implement things and seeing how they work out in practice,
and talking to other people and sharing your experiences. Part of the value of a conference is that
you get to talk to other people as well, live. But you can have that through other mechanisms as
well; for example, there’s a Slack channel that people have set up for people <a href="https://dist-sys-slack.herokuapp.com/">interested in
distributed systems</a>. If that’s your thing you can join that.
You can, of course, talk to your colleagues in your company and try to learn from them. I don’t
think there’s one right way of doing this — there are many different ways through which you can
learn and get a deeper experience, and different paths will work for different people.</p>

<p><strong>Vadim</strong>: Thank you very much for your advice and interesting discussion! It has been a pleasure
talking to you.</p>

<p><strong>Martin</strong>: No problem, yeah, it’s been nice talking to you.</p>

<p><strong>Vadim</strong>: Let’s meet on July 11 <a href="https://hydraconf.com/?utm_source=medium&amp;utm_medium=kleppman">at the conference</a>.</p>

                ]]></content:encoded>
            </item>
        
            <item>
                <title>Should you put several event types in the same Kafka topic?</title>
                <link>http://martin.kleppmann.com/2018/01/18/event-types-in-kafka-topic.html</link>
                <comments>http://martin.kleppmann.com/2018/01/18/event-types-in-kafka-topic.html#disqus_thread</comments>
                <pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2018/01/18/event-types-in-kafka-topic.html</guid>
                
                <description><![CDATA[ This article was originally published on the Confluent blog. It has also been translated into Chinese. If you adopt a streaming data platform such as Apache Kafka, one of the most important questions to answer is: what topics are you going to use? In particular, if you have a bunch... ]]></description>
                <content:encoded><![CDATA[
                    <p><em>This article was originally published
<a href="https://www.confluent.io/blog/put-several-event-types-kafka-topic/">on the Confluent blog</a>.
It has also been <a href="http://www.infoq.com/cn/articles/event-types-in-kafka-topic">translated into Chinese</a>.</em></p>

<p>If you adopt a streaming data platform such as <a href="http://kafka.apache.org/">Apache Kafka</a>, one of the most important questions to answer is: <em>what topics are you going to use?</em>
In particular, if you have a bunch of different events that you want to publish to Kafka as messages, do you put them in the same topic, or do you split them across different topics?</p>

<p>The most important function of a topic is to allow a consumer to specify which subset of messages it wants to consume.
At the one extreme, putting absolutely all your data in a single topic is probably a bad idea, since it would mean consumers have no way of selecting the events of interest – they would just get everything.
At the other extreme, having millions of different topics is also a bad idea, since each topic in Kafka has a cost, and thus having a large number of topics will harm performance.</p>

<p>Actually, from a performance point of view, it’s the number of <em>partitions</em> that matters.
But since each topic in Kafka has at least one partition, if you have <em>n</em> topics, you inevitably have at least <em>n</em> partitions.
A while ago, <a href="https://www.confluent.io/blog/how-to-choose-the-number-of-topicspartitions-in-a-kafka-cluster/">Jun Rao wrote a blog post</a> explaining the cost of having many partitions (end-to-end latency, file descriptors, memory overhead, recovery time after a failure).
As a rule of thumb, if you care about latency, you should probably aim for (order of magnitude) hundreds of topic-partitions per broker node.
If you have thousands, or even tens of thousands of partitions per node, your latency will suffer.</p>

<p>That performance argument provides some guidance for designing your topic structure: if you’re finding yourself with many thousands of topics, it would be advisable to merge some of the fine-grained, low-throughput topics into coarser-grained topics, and thus reduce the proliferation of partitions.</p>

<p>However, performance is not the end of the story.
Even more important, in my opinion, are the data integrity and data modelling aspects of your topic structure.
We will discuss those in the rest of this article.</p>

<h2 id="topic--collection-of-events-of-the-same-type">Topic = collection of events of the same type?</h2>

<p>The common wisdom (according to several conversations I’ve had, and according to a <a href="https://groups.google.com/forum/#!topic/confluent-platform/XQTjNJd-TrU">mailing list thread</a>) seems to be: put all events of the same type in the same topic, and use different topics for different event types.
That line of thinking is reminiscent of relational databases, where a table is a collection of records with the same type (i.e. the same set of columns), so we have an analogy between a relational table and a Kafka topic.</p>

<p>The <a href="https://docs.confluent.io/current/schema-registry/docs/index.html">Confluent Avro Schema Registry</a> has traditionally reinforced this pattern, because it encourages you to use the same Avro schema for all messages in a topic.
That schema can be evolved while maintaining compatibility (e.g. by adding optional fields), but ultimately all messages have been expected to conform to a certain record type.
We’ll revisit this later in the post, after we’ve covered some more background.</p>

<p>For some types of streaming data, such as logged activity events, it makes sense to require that all messages in the same topic conform to the same schema.
However, some people are using Kafka for more database-like purposes, such as <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/event-sourcing">event sourcing</a>, or <a href="https://www.confluent.io/blog/build-services-backbone-events/">exchanging data between microservices</a>.
In this context, I believe it’s less important to define a topic a grouping of messages with the same schema.
Much more important is the fact that Kafka maintains <strong>ordering</strong> of messages within a topic-partition.</p>

<p>Imagine a scenario in which you have some entity (say, a customer), and many different things can happen to that entity: a customer is created, a customer changes their address, a customer adds a new credit card to their account, a customer makes a customer support enquiry, a customer pays an invoice, a customer closes their account.</p>

<p>The order of those events matters.
For example, we might expect that a customer is created before anything else can happen to a customer, and we might expect that after a customer closes their account nothing more will happen to them.
When using Kafka, you can preserve the order of those events by putting them all in the same partition.
In this example, you would use the customer ID as the partitioning key, and then put all these different events in the <strong>same</strong> topic.
They must be in the same topic because different topics mean different partitions, and ordering is not preserved across partitions.</p>

<h2 id="ordering-problems">Ordering problems</h2>

<p>If you did use different topics for (say) the customerCreated, customerAddressChanged, and customerInvoicePaid events, then a consumer of those topics may see the events in a nonsensical order.
For example, the consumer may see an address change for a customer that does not exist (because it has not yet been created, since the corresponding customerCreated event has been delayed).</p>

<p>The risk of reordering is particularly high if a consumer is shut down for a while, perhaps for maintenance or to deploy a new version.
While the consumer is stopped, events continue to be published, and those events are stored in the selected topic-partition on the Kafka brokers.
When the consumer starts up again, it consumes the backlog of events from all of its input partitions.
If the consumer has only one input, that’s no problem: the pending events are simply processed sequentially in the order they are stored.
But if the consumer has several input topics, it will pick input topics to read in some arbitrary order.
It may read all of the pending events from one input topic before it reads the backlog on another input topic, or it may interleave the inputs in some way.</p>

<p>Thus, if you put the customerCreated, customerAddressChanged, and customerInvoicePaid events in three separate topics, the consumer may well see all of the customerAddressChanged events before it sees any of the customerCreated events.
And so it is likely that the consumer will see a customerAddressChanged event for a customer that, according to its view of the world, has not yet been created.</p>

<p>You might be tempted to attach a timestamp to each message and use that for event ordering.
That might just about work if you are importing events into a data warehouse, where you can order the events after the fact.
But in a stream process, timestamps are not enough: if you get an event with a certain timestamp, you don’t know whether you still need to wait for some previous event with a lower timestamp, or if all previous events have arrived and you’re ready to process the event.
And relying on clock synchronisation generally leads to nightmares; for more detail on the problems with clocks, I refer you to Chapter 8 of <a href="http://dataintensive.net/">my book</a>.</p>

<h2 id="when-to-split-topics-when-to-combine">When to split topics, when to combine?</h2>

<p>Given that background, I will propose some rules of thumb to help you figure out which things to put in the same topic, and which things to split into separate topics:</p>

<ol>
  <li>
    <p>The most important rule is that <strong>any events that need to stay in a fixed order must go in the same topic</strong> (and they must also use the same partitioning key).
Most commonly, the order of events matters if they are about the same entity.
So, as a rule of thumb, we could say that all events <strong>about the same entity</strong> need to go in the same topic.</p>

    <p>The ordering of events is particularly relevant if you are using an <a href="https://msdn.microsoft.com/en-us/library/jj591559.aspx">event sourcing</a> approach to data modelling.
Here, the state of an <a href="https://www.martinfowler.com/bliki/DDD_Aggregate.html">aggregate object</a> is derived from a log of events by replaying them in a particular order.
Thus, even though there may be many different event types, all of the events that define an aggregate must go in the same topic.</p>
  </li>
  <li>
    <p>When you have events about different entities, should they go in the same topic or different topics?
I would say that if one entity depends on another (e.g. an address belongs to a customer), or if they are often needed together, they might as well go in the same topic.
On the other hand, if they are unrelated and managed by different teams, they are better put in separate topics.</p>

    <p>It also depends on the throughput of events: if one entity type has a much higher rate of events than another entity type, they are better split into separate topics, to avoid overwhelming consumers who only want the entity with low write throughput (see point four).
But several entities that all have a low rate of events can easily be merged.</p>
  </li>
  <li>
    <p>What if an event involves several entities?
For example, a purchase relates a product and a customer, and a transfer from one account to another involves at least those two accounts.</p>

    <p>I would recommend initially recording the event as a single atomic message, and not splitting it up into several messages in several topics.
It’s best to record events exactly as you receive them, in a form that is <a href="https://vimeo.com/123985284">as raw as possible</a>.
You can always split up the compound event later, using a stream processor – but it’s much harder to reconstruct the original event if you split it up prematurely.
Even better, you can give the initial event a unique ID (e.g. a UUID); that way later on when you split the original event into one event for each entity involved, you can carry that ID forward, making the provenance of each event traceable.</p>
  </li>
  <li>
    <p>Look at the number of topics that a consumer needs to subscribe to.
If several consumers all read a particular group of topics, this suggests that maybe those topics <a href="http://grokbase.com/t/kafka/users/15a7k5f1rr/mapping-events-to-topics">should be combined</a>.</p>

    <p>If you combine the fine-grained topics into coarser-grained ones, some consumers may receive unwanted events that they need to ignore.
That is not a big deal: consuming messages from Kafka is very cheap, so even if a consumer ends up ignoring half of the events, the cost of this overconsumption is probably not significant.
Only if the consumer needs to ignore the vast majority of messages (e.g. 99.9% are unwanted) would I recommend splitting the low-volume event stream from the high-volume stream.</p>
  </li>
  <li>
    <p>A changelog topic for a <a href="http://kafka.apache.org/10/documentation/streams/developer-guide#streams_duality">Kafka Streams state store</a> (KTable) should be a separate from all other topics.
In this case, the topic is managed by Kafka Streams process, and it should not be shared with anything else.</p>
  </li>
  <li>
    <p>Finally, what if none of the rules above tell you whether to put some events in the same topic or in different topics?
Then by all means group them by event type, by putting events of the same type in the same topic.
However, I think this rule is the least important of all.</p>
  </li>
</ol>

<h2 id="schema-management">Schema management</h2>

<p>If you are using a data encoding such as JSON, without a statically defined schema, you can easily put many different event types in the same topic.
However, if you are using a schema-based encoding such as Avro, a bit more thought is needed to handle multiple event types in a single topic.</p>

<p>As mentioned above, the Avro-based <a href="https://docs.confluent.io/current/schema-registry/docs/index.html">Confluent Schema Registry for Kafka</a> currently relies on the assumption that there is one schema for each topic (or rather, one schema for the key and one for the value of a message).
You can register new versions of a schema, and the registry checks that the schema changes are forward and backward compatible.
A nice thing about this design is that you can have different producers and consumers using different schema versions at the same time, and they still remain compatible with each other.</p>

<p>More precisely, when Confluent’s Avro serializer registers a schema in the registry, it does so under a <em>subject name</em>.
By default, that subject is <code>&lt;topic&gt;-key</code> for message keys and <code>&lt;topic&gt;-value</code> for message values.
The schema registry then checks the mutual compatibility of all schemas that are registered under a particular subject.</p>

<p>I have recently <a href="https://github.com/confluentinc/schema-registry/pull/680">made a patch to the Avro serializer</a> that makes the compatibility check more flexible.
The patch adds two new configuration options: <code>key.subject.name.strategy</code> (which defines how to construct the subject name for message keys), and <code>value.subject.name.strategy</code> (how to construct the subject name for message values).
The options can take one of the following values:</p>

<ul>
  <li><code>io.confluent.kafka.serializers.subject.TopicNameStrategy</code> (default): The subject name for message keys is <code>&lt;topic&gt;-key</code>, and <code>&lt;topic&gt;-value</code> for message values.
This means that the schemas of all messages in the topic must be compatible with each other.</li>
  <li><code>io.confluent.kafka.serializers.subject.RecordNameStrategy</code>: The subject name is the fully-qualified name of the Avro record type of the message.
Thus, the schema registry checks the compatibility for a particular record type, regardless of topic. This setting allows any number of different event types in the same topic.</li>
  <li><code>io.confluent.kafka.serializers.subject.TopicRecordNameStrategy</code>: The subject name is <code>&lt;topic&gt;-&lt;type&gt;</code>, where <code>&lt;topic&gt;</code> is the Kafka topic name, and <code>&lt;type&gt;</code> is the fully-qualified name of the Avro record type of the message.
This setting also allows any number of event types in the same topic, and further constrains the compatibility check to the current topic only.</li>
</ul>

<p>With this new feature, you can easily and cleanly put all the different events for a particular entity in the same topic.
Now you can freely choose the granularity of topics based on the criteria above, and not be limited to a single event type per topic.</p>

                ]]></content:encoded>
            </item>
        
            <item>
                <title>Drawing a map of distributed data systems</title>
                <link>http://martin.kleppmann.com/2017/03/15/map-distributed-data-systems.html</link>
                <comments>http://martin.kleppmann.com/2017/03/15/map-distributed-data-systems.html#disqus_thread</comments>
                <pubDate>Wed, 15 Mar 2017 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2017/03/15/map-distributed-data-systems.html</guid>
                
                <description><![CDATA[ How we created an illustrated guide to help you find your way through the data landscape. Designing Data-Intensive Applications, the book I’ve been working on for four years, is finally finished, and should be available in your favorite bookstore in the next week or two. An incomplete beta (Early Release)... ]]></description>
                <content:encoded><![CDATA[
                    <p><strong>How we created an illustrated guide to help you find your way through the data landscape.</strong></p>

<p><a href="http://dataintensive.net/"><em>Designing Data-Intensive Applications</em></a>, the book I’ve been working on
for four years, is finally finished, and should be available in your favorite bookstore in the next
week or two. An incomplete beta (Early Release) edition has been available for the last 2½ years as
I continued working on the final chapters.</p>

<p>Throughout that process, we have been quietly working on a surprise. Something that has not been
part of any of the Early Releases of the book. In fact, something that I have never seen in any tech
book. And today we are excited to share it with you.</p>

<p>In <em>Designing Data-Intensive Applications</em>, each of the 12 chapters is accompanied by a map. The map
is a kind of graphical table of contents of the chapter, showing how some of the main ideas in the
chapter relate to each other.</p>

<p>Here is an example, from Chapter 3 (on storage engines):</p>

<p><a href="https://d3ansictanv2wj.cloudfront.net/ch03-map_lg-12f05f19df9e49098d509847518f1c03.jpg"><img src="/2017/03/ch3-map.jpg" width="550" height="419" alt="Chapter 3 map illustration from Designing Data-Intensive Applications" /></a><br />
<small>Figure 1. Map illustration from <em>Designing Data-Intensive Applications</em>, O’Reilly Media, 2017.</small></p>

<p>Don’t take it too seriously—some of it is a little tongue-in-cheek, we have taken some artistic
license, and the things included on the map are not exhaustive.</p>

<p>But it does reflect the structure of the chapter: political or geographic regions represent ways of
doing something, and cities represent particular implementations of those approaches. Similar things
are more likely to be close together, and roads or rivers represent concepts that connect different
implementations or regions.</p>

<p>Most computing books describe one particular piece of software and discuss all the aspects of how it
works. This book is structured differently: it starts with the concepts—discussing the high-level
approaches of how you might solve some problem, and comparing the pros and cons of each—and then
points out which pieces of software use which approach. The maps use the same structure: the region
in which a city is located tells you what approach it uses.</p>

<p>For example, in the map above, you can see a high-level subdivision into two countries: transaction
processing and analytics. Within transaction processing, there are two regions: log-structured
storage and B-trees, which are two ways of implementing OLTP storage engines. Within the B-tree
region, you see databases like MySQL and PostgreSQL<sup><a href="#_ftn1">[1]</a></sup>, while within
the log-structured region you see databases like Cassandra and HBase. On the analytics side, you can
see that the mountain range representing column storage reaches into both the data warehousing and
the Hadoop regions, since the approach applies to both.</p>

<p>The maps are in black and white, both because of practicalities of printing and also because I was
looking for a
<a href="http://www.tolkien.co.uk/file/IfbTdA8/5d04a105-e66b-4d9b-b218-928c691eb83d.jpg">Tolkien-esque style</a>.
You are, of course, welcome to color them in yourself. In fact, by coloring them in, you would be
following a fine tradition: for over three centuries, maps were printed in black and white from an
<a href="http://www.maphistory.info/understanding.html">engraved copper plate</a>, and then colored in by hand.</p>

<p>Each of the chapters has a map like that, focusing on the particular aspects discussed in that
chapter. This means that some cities appear on multiple islands—the data landscape is
multidimensional, so a city may lie in more than one (conceptual) realm. For example, the map below
is for Chapter 5 (on the topic of replication):</p>

<p><a href="https://d3ansictanv2wj.cloudfront.net/ch05-map_lg-32ac8f29402e391034f664a63461eef5.jpg"><img src="/2017/03/ch5-map.jpg" width="550" height="550" alt="Chapter 5 map illustration from Designing Data-Intensive Applications" /></a><br />
<small>Figure 2. Map illustration from <em>Designing Data-Intensive Applications</em>, O’Reilly Media, 2017.</small></p>

<p>Cities representing Cassandra, MongoDB, MySQL, and others appear on both this map, the Chapter 3 map
above, and some other maps, too.</p>

<p>Shipping routes connect some of the ports shown in the maps, in cases where there is a noteworthy
link between chapters. Most of the maps are of islands, but there are some exceptions. (I won’t give
away too much, but I just want to say…beware of the
<a href="https://en.wikipedia.org/wiki/Kraken">Kraken</a>.)</p>

<p>I am incredibly delighted that O’Reilly was willing to take on this crazy idea of creating maps. It
took a whole team to make them happen: from my
<a href="https://www.dropbox.com/s/yvuj7rqg66i93os/chapter3-map.jpg?dl=0">rough pencil sketches</a> (which
showed the structure but had absolutely zero artistic value),
<a href="http://shabbirdiwan.com/category/technique/scratch-board/">Shabbir Diwan</a>,
<a href="http://www.ediefreedman.com/">Edie Freedman</a>, and <a href="http://www.oreilly.com/pub/au/3771">Ron Bilodeau</a>
created the beautifully illustrated versions you see above, and
<a href="https://twitter.com/cmariebeau">Marie Beaugureau</a> patiently managed several rounds of revisions, in
which we painstakingly polished all the details.</p>

<p>Perhaps you’re curious to know how we got onto the idea of creating maps. Early on in the Early
Release of the book, some readers told me they would love some kind of flowchart to help them decide
quickly which database they should use for their application. Such flowcharts
<a href="https://medium.baqend.com/nosql-databases-a-survey-and-decision-guidance-ea7823a822d">have been attempted</a>,
but I never liked them much—it is tempting to read them out of context and jump to conclusions too
quickly, and they have to simplify the issues to the point of almost being intellectually dishonest.</p>

<p>My goal for <em>Designing Data-Intensive Applications</em> was different. I can’t in good faith give you
a recommendation for one particular tool because I don’t know enough about your particular
requirements. However, I can teach you what questions to ask and how to evaluate vendors’ claims
critically. That requires more subtlety and detail than can be expressed in a one-page flowchart,
which is why the book is 600 pages long, not one page.</p>

<p>However, I did think that some kind of graphical representation of the main ideas and structure
would be useful. I thought about <a href="https://en.wikipedia.org/wiki/Venn_diagram">Venn diagrams</a>, but
they’re excruciatingly boring. I thought about <a href="https://en.wikipedia.org/wiki/Mind_map">mind maps</a>,
and then started taking the “maps” bit more literally. I thought about the
<a href="https://www.goodreads.com/book/show/1175738.The_Atlas_of_Experience">Atlas of Experience</a> by Louise
van Swaaij and Jean Klare, a sublime book that represents aspects of human life as fictitious
<a href="http://www.imaginaryatlas.com/wp-content/uploads/2013/04/worldof-experience.jpg">places on a geographic map</a>.
(It is <a href="http://www.deharmonie.nl/titel/grote-atlas-van-de-belevingswereld/">originally in Dutch</a>;
the English translation is, sadly, out of print.)
<a href="https://www.goodreads.com/book/show/378.The_Phantom_Tollbooth">The Phantom Tollbooth</a> by Norton
Juster and Jules Feiffer does
<a href="http://bowenpeters.weebly.com/uploads/8/1/1/9/8119969/phantom_tollbooth_map.jpg">a similar thing</a>.</p>

<p>Closer to technology, similar map-style visualizations have been used to
<a href="https://xkcd.com/802/">represent online communities</a>, to visualize the
<a href="https://hpi.de/naumann/projects/rdbms-genealogy.html">history of relational databases</a> and
<a href="http://www.oreilly.com/go/languageposter">programming languages</a>, and to
<a href="https://twitter.com/linclark/status/708071521286266881">explain libraries related to Facebook’s React</a>.
I simply love the style.</p>

<p>Other inspirations for me are the ornate maps produced in the medieval and renaissance periods,
especially when it comes to whimsical
<a href="https://www.bl.uk/shop/sea-monsters-on-medieval-and-renaissance-maps/p-284">sea monsters</a>.
For example, around 1590, Abraham Ortelius published a
<a href="https://commons.wikimedia.org/wiki/File:Abraham_Ortelius-Islandia-ca_1590.jpg">wonderful map of Iceland</a>,
with <a href="https://en.wikipedia.org/wiki/Hekla">Mount Hekla</a> spewing fire, and surrounded by fantastical
sea monsters:</p>

<p><a href="/2017/03/ortelius-iceland.jpg"><img src="/2017/03/ortelius-iceland.jpg" width="550" height="410" alt="“Islandia” map by Abraham Ortelius, ca. 1590." /></a><br />
<small>Figure 3. “Islandia” map by Abraham Ortelius, ca. 1590. Source:
<a href="https://commons.wikimedia.org/wiki/File:Abraham_Ortelius-Islandia-ca_1590.jpg">Wikimedia Commons</a></small></p>

<p>I feel those maps and sea monsters reflect the 16th-century sense of excitement to explore the earth
and discover new places, as well as the dangers of sailing across unknown seas. And perhaps a bit of
that excitement exists today in our exploration of technologies for storing, processing, and using
data. There seems to be a lot of potential, but we also don’t really know what we’re doing, and it’s
sometimes a bit dangerous (raise your hand if you’ve lost data at some point because something went
wrong).</p>

<p>We hope the maps in <em>Designing Data-Intensive Applications</em> will help convey some of that
excitement, and also make you smile. In both the print and ebook editions, the map for each chapter
appears at the start of each chapter.</p>

<p>What’s more, we have taken all the individual chapter maps and assembled them into a poster—an
archipelago of islands representing technologies in the sea of distributed data. The poster also
includes some bonus sea monsters (of course).</p>

<p>If you are at
<a href="https://conferences.oreilly.com/strata/strata-ca">Strata + Hadoop World, San Jose</a>
this week, you can drop by the O’Reilly booth to pick up a free print of the poster so you have
something geeky and cool to hang on the wall in your office. Alternatively,
<a href="https://d3ansictanv2wj.cloudfront.net/ddia-poster-web-89b1c62f6eb4b57336c6cbe2148cc9a9.jpg">you can download a JPG version for free from the O’Reilly website</a>
for your personal, noncommercial use.</p>

<p>We hope you enjoy <em>Designing Data-Intensive Applications</em> and the maps as much as we enjoyed making them!</p>

<p><a href="/2017/03/ddia-poster.jpg"><img src="/2017/03/ddia-poster.jpg" width="550" height="733" alt="Me holding the poster with the maps" /></a><br />
<small>Figure 4. Me holding the poster with the maps.</small></p>

<p id="_ftn1">
[1] Footnote for the <a href="http://tirania.org/blog/archive/2011/Feb-17.html">well-actually</a>
crowd: yes, I know about hash indexes and GiST in PostgreSQL, various other index types in other
databases, and the fact that in MySQL the index type is actually a matter of the storage engine
(such as InnoDB), but those details are beside the point here. I am highlighting a dichotomy between
a page-oriented update-in-place approach and a log-structured, compaction-based approach. This
distinction is best explained with concrete examples, and the graphical representation cannot
capture all the subtleties that are discussed in the text of the book.
</p>

                ]]></content:encoded>
            </item>
        
            <item>
                <title>The probability of data loss in large clusters</title>
                <link>http://martin.kleppmann.com/2017/01/26/data-loss-in-large-clusters.html</link>
                <comments>http://martin.kleppmann.com/2017/01/26/data-loss-in-large-clusters.html#disqus_thread</comments>
                <pubDate>Thu, 26 Jan 2017 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2017/01/26/data-loss-in-large-clusters.html</guid>
                
                <description><![CDATA[ This blog post uses MathJax to render mathematics. You need JavaScript enabled for MathJax to work. Many distributed storage systems (e.g. Cassandra, Riak, HDFS, MongoDB, Kafka, …) use replication to make data durable. They are typically deployed in a “Just a Bunch of Disks” (JBOD) configuration – that is, without... ]]></description>
                <content:encoded><![CDATA[
                    <p><em>This blog post uses <a href="https://www.mathjax.org/">MathJax</a> to render mathematics. You need JavaScript
enabled for MathJax to work.</em></p>

<p>Many distributed storage systems (e.g. Cassandra, Riak, HDFS, MongoDB, Kafka, …) use replication
to make data durable. They are typically deployed in a <a href="https://en.wikipedia.org/wiki/Non-RAID_drive_architectures">“Just a Bunch of Disks”</a> (JBOD)
configuration – that is, without RAID to handle disk failure. If one of the disks on a node dies,
that disk’s data is simply lost. To avoid losing data permanently, the database system keeps a copy
(replica) of the data on some other disks on other nodes.</p>

<p>The most common replication factor is 3 – that is, the database keeps copies of every piece of data
on three separate disks attached to three different computers. The reasoning goes something like
this: disks only die once in a while, so if a disk dies, you have a bit of time to replace it, and
then you still have two copies from which you can restore the data onto the new disk. The risk that
a second disk dies before you restore the data is quite low, and the risk that all three disks die
at the same time is so tiny that you’re more likely to get hit by an asteroid.</p>

<p>As a back-of-the-envelope calculation, if the probability of a single disk failing within some time
period is 0.1% (to pick an arbitrary number), then the probability of two disks failing is
(0.001)<sup>2</sup> = 10<sup>-6</sup>, and the probability of all three disks failing is
(0.001)<sup>3</sup> = 10<sup>-9</sup>, or one in a billion. This calculation assumes that
one disk’s failure is independent from another disk’s failure – which is not actually true, since
for example disks from the same manufacturing batch may show correlated failures – but it’s a good
enough approximation for our purposes.</p>

<p>So far the common wisdom. It sounds reasonable, but unfortunately it turns out to be untrue for many
data storage systems. In this post I will show why.</p>

<h2 id="its-so-easy-to-lose-data-la-la-laaa">It’s so easy to lose data, la la laaa</h2>

<p>If your database cluster really only consists of three machines, then the probability of all three
of them dying simultaneously is indeed very low (ignoring correlated faults, such as the datacenter
burning down). However, as you move to larger clusters, the probabilities change. The more nodes and
disks you have in your cluster, the more likely it is that you lose data.</p>

<p>This is a counter-intuitive idea. “Surely,” you think, “every piece of data is still replicated on
three disks. The probability of a disk dying doesn’t depend on the size of the cluster. So why
should the size of the cluster matter?” But I calculated the probabilities and drew a graph, and it
looked like this:</p>

<p><a href="/2017/01/dataloss.png"><img src="/2017/01/dataloss.png" width="550" alt="Graph of data loss probability depending on the number of nodes in the cluster" /></a></p>

<p>To be clear, this isn’t the probability of a single node failing – this is the probability of
<strong>permanently losing all three replicas</strong> of some piece of data, so restoring from backup (if you
have one) is the only remaining way to recover that data. The bigger your cluster, the more likely
you are haemorrhaging data. This is probably not what you intended when you decided to pay for
a replication factor of 3.</p>

<p>The y axis on that graph is a bit arbitrary, and depends on a lot of assumptions, but the direction
of the line is scary. Under the assumption that a node has a 0.1% chance of dying within some time
period, the graph shows that in a 8,000-node cluster, the chance of permanently losing all three
replicas of some piece of data (within the same time period) is about 0.2%. Yes, you read that
correctly: the risk of losing <strong>all three</strong> copies of some data is <strong>twice as great</strong> as the risk of
losing a single node! What is the point of all this replication again?</p>

<p>The intuition behind this graph is as follows: in an 8,000-node cluster it’s almost certain that
a <em>few</em> nodes are always dead at any given moment. That is normally not a problem: a certain rate of
churn and node replacement is expected and a part of routine maintenance. However, if you get
unlucky, there is <em>some piece of data</em> whose three replicas just happen to be three of those nodes
that have died – and if this is the case, that piece of data is gone forever. The data that is lost
is only a small fraction of the total dataset in the cluster, but still that’s not great: when you
use a replication factor of 3, you generally mean “I really don’t want to lose this data”, not “I
don’t mind occasionally losing a bit of this data, as long as it’s not too much”. Maybe that piece
of lost data was a particularly important one.</p>

<p>The probability that all three replicas are dead nodes depends crucially on the algorithm that the
system uses to assign data to replicas. The graph above is calculated under the assumption that the
data is split into a number of partitions (shards), and that each partition is stored on three
<em>randomly chosen</em> nodes (or pseudo-randomly with a hash function). This is the case with
<a href="https://www.akamai.com/kr/ko/multimedia/documents/technical-publication/consistent-hashing-and-random-trees-distributed-caching-protocols-for-relieving-hot-spots-on-the-world-wide-web-technical-publication.pdf">consistent hashing</a>, used in Cassandra and Riak, among others (as far as I know). With
other systems I’m not sure how the replica assignment works, so I’d appreciate any insights from
people who know about the internals of various storage systems.</p>

<h2 id="calculating-the-probability-of-data-loss">Calculating the probability of data loss</h2>

<p>Let me show you how I calculated that graph above, using a probabilistic model of a replicated
database.</p>

<p>Let’s assume that the probability of losing an individual node is \(p=P(\text{node loss})\). I am
going to ignore time in this model, and simply look at the probability of failure in some arbitrary
time period. For example, we could assume that \(p=0.001\) is the probability of a node failing
within a given day, which would make sense if it takes about a day to replace the node and restore
the lost data onto new disks. For simplicity I won’t distinguish between node failure and
<a href="https://www.backblaze.com/blog/hard-drive-reliability-update-september-2014/">disk failure</a>, and I will consider only permanent failures (ignoring crashes where
the node comes back again after a reboot).</p>

<p>Let \(n\) be the number of nodes in the cluster. Then the probability that \(f\) out of \(n\)
nodes have failed (assuming that failures are independent) is given by the
<a href="https://en.wikipedia.org/wiki/Binomial_distribution">binomial distribution</a>:</p>

<p>\[ P(f \text{ nodes failed}) = \binom{n}{f} \, p^f \, (1-p)^{n-f} \]</p>

<p>The term \(p^f\) is the probability that \(f\) nodes have failed, the term \((1-p)^{n-f}\) is
the probability that the remaining \(n-f\) have not failed, and \(\binom{n}{f}\) is the number
of different ways of picking \(f\) out of \(n\) nodes. \(\binom{n}{f}\) is pronounced
“n choose f”, and it is defined as:</p>

<p>\[ \binom{n}{f} = \frac{n!}{f! \; (n-f)!} \]</p>

<p>Let \(r\) be the replication factor (typically \(r=3\)). If we assume that \(f\) out of
\(n\) nodes have failed, what is the probability that a particular partition has all \(r\)
replicas on failed nodes?</p>

<p>Well, in a system that uses consistent hashing, each partition is assigned to nodes independently
and randomly (or pseudo-randomly). For a given partition, there are \(\binom{n}{r}\) different
ways of assigning the \(r\) replicas to nodes, and these assignments are all equally likely to
occur. Moreover, there are \(\binom{f}{r}\) different ways of choosing \(r\) replicas out of
\(f\) failed nodes – these are the ways in which all \(r\) replicas can be assigned to failed
nodes. We then work out the fraction of the assignments that result in all replicas having failed:</p>

<p>\[ P(\text{partition lost} \mid f \text{ nodes failed}) = \frac{\binom{f}{r}}{\binom{n}{r}} =
    \frac{f! \; (n-r)!}{(f-r)! \; n!} \]</p>

<p>(The vertical bar after “partition lost” is pronounced “given that”, and it indicates a
<a href="https://en.wikipedia.org/wiki/Conditional_probability">conditional probability</a>: the probability is given <em>under the assumption</em> that \(f\)
nodes have failed.)</p>

<p>So that’s the probability that all replicas of one particular partition has been lost. What about
a cluster with \(k\) partitions? If one or more partitions have been lost, we have lost data.
Thus, in order to not lose data, we require that all \(k\) partitions are not lost:</p>

<p>\begin{align}
P(\text{data loss} \mid f \text{ nodes failed})
    &amp;= 1 - P(\text{partition not lost} \mid f \text{ nodes failed})^k \\
    &amp;= 1 - \left( 1 - \frac{f! \; (n-r)!}{(f-r)! \; n!} \right)^k
\end{align}</p>

<p>Cassandra and Riak call partitions “vnodes” instead, but they are the same thing. In general, the
number of partitions \(k\) is independent from the number of nodes \(n\). In the case of
Cassandra, there is usually a <a href="http://www.datastax.com/dev/blog/virtual-nodes-in-cassandra-1-2">fixed number of partitions per node</a>; the default
is \(k=256\,n\) (configured by the <code>num_tokens</code> parameter), and this is also what I assumed for the
graph above. In Riak, the number of partitions is <a href="https://docs.basho.com/riak/kv/2.1.4/setup/planning/cluster-capacity/#ring-size-number-of-partitions">fixed when you create the cluster</a>, but
generally more nodes also mean more partitions.</p>

<p>With all of this in place, we can now work out the probability of losing one or more partitions in
a cluster of size \(n\) with a replication factor of \(r\). If the number of failures \(f\) is
less than the replication factor, we can be sure that no data is lost. Thus, we need to add up the
probabilities for all possible numbers of failures \(f\) with \(r \le f \le n\):</p>

<p>\begin{align}
P(\text{data loss})
    &amp;= \sum_{f=r}^{n} \; P(\text{data loss} \;\cap\; f \text{ nodes failed}) \\
    &amp;= \sum_{f=r}^{n} \; P(f \text{ nodes failed}) \; P(\text{data loss} \mid f \text{ nodes failed}) \\
    &amp;= \sum_{f=r}^{n} \binom{n}{f} \, p^f \, (1-p)^{n-f}
       \left[ 1 - \left( 1 - \frac{f! \; (n-r)!}{(f-r)! \; n!} \right)^k \right]
\end{align}</p>

<p>That is a bit of a mouthful, but I think it’s accurate. And if you plug in \(r=3\),
\(p=0.001\) and \(k=256\,n\), and vary \(n\) between 3 and 10,000, then you
get the graph above. I wrote <a href="https://gist.github.com/ept/1e094caaab5fa6471f529f589c4aaaf0">a little Ruby program</a> to do the calculation.</p>

<p>We can get a simpler approximation using the <a href="https://en.wikipedia.org/wiki/Boole%27s_inequality">union bound</a>:</p>

<p>\begin{align}
P(\text{data loss})
    &amp;= P(\ge\text{ 1 partition lost}) \\
    &amp;= P\left( \bigcup_{i=1}^k \text{partition } i \text{ lost} \right) \\
    &amp;\le k\, P(\text{partition lost}) = k\, p^r
\end{align}</p>

<p>Even though one partition failing is not independent from another partition failing, this
approximation still applies. And it seems to match the exact result quite closely: in the graph, the
data loss probability looks like a straight line, proportional to the number of nodes. The
approximation says that the probability is proportional to the number of partitions, which is
equivalent since we assumed a fixed 256 partitions per node.</p>

<p>Moreover, if we plug in the numbers for 10,000 nodes into the approximation, we get 
\(P(\text{data loss}) \le 256 \cdot 10^4 \cdot (10^{-3})^3 = 0.00256\), which matches the result
from the Ruby program very closely.</p>

<h2 id="and-in-practice">And in practice…?</h2>

<p>Is this a problem in practice? I don’t know. Mostly I think it’s an interesting and
counter-intuitive phenomenon. I’ve heard rumours that it is causing real data loss at companies with
large database clusters, but I’ve not seen the issue documented anywhere. If you’re aware of any
discussions on this topic, please point me at them.</p>

<p>The calculation indicates that in order to reduce the probability of data loss, you can reduce the
number of partitions or increase the replication factor. Using more replicas costs more, so it’s not
ideal for large clusters that are already expensive. However, the number of partitions presents an
interesting trade-off. Cassandra originally used one partition per node, but then
<a href="http://www.datastax.com/dev/blog/virtual-nodes-in-cassandra-1-2">switched to 256 partitions per node</a> a few years ago in order to achieve better
load distribution and more efficient rebalancing. The downside, as we can see from this calculation,
is a much higher probability of losing at least one of the partitions.</p>

<p>I think it’s probably possible to devise replica assignment algorithms in which the probability of
data loss does not grow with the cluster size, or at least does not grow as fast, but which
nevertheless have good load distribution and rebalancing properties. That would be an interesting
area to explore further. In that context, my colleague <a href="http://www.cl.cam.ac.uk/~sak70/">Stephan</a> pointed out that the expected
rate of data loss is constant in a cluster of a particular size, independent of the replica
assignment algorithm – in other words, you can choose between a high probability of losing a small
amount of data, and a low probability of losing a large amount of data! Is the latter better?</p>

<p>You need fairly large clusters before this effect really shows up, but clusters of thousands of
nodes are used by various large companies, so I’d be interested to hear from people with operational
experience at such scale. If the probability of permanently losing data in a 10,000 node cluster is
really 0.25% per day, that would mean a 60% chance of losing data in a year. That’s way higher than
the “one in a billion” getting-hit-by-an-asteroid probability that I talked about at the start.</p>

<p>Are the designers of distributed data systems aware of this issue? If I got this right, it’s
something that should be taken into account when designing replication schemes. Hopefully this blog
post will raise some awareness of the fact that just because you have three replicas you’re not
automatically guaranteed to be safe.</p>

<p><em>Thank you to <a href="https://twitter.com/matclayton">Mat Clayton</a> for bringing this issue to my attention, and to
<a href="http://www.cl.cam.ac.uk/~arb33/">Alastair Beresford</a>, <a href="http://www.cl.cam.ac.uk/~sak70/">Stephan Kollmann</a>, <a href="https://twitter.com/cmeik">Christopher Meiklejohn</a>,
and <a href="http://www.cl.cam.ac.uk/~drt24/">Daniel Thomas</a> for comments on a draft of this post.</em></p>


                ]]></content:encoded>
            </item>
        
            <item>
                <title>Announcing TRVE DATA: Placing a bit less trust in the cloud</title>
                <link>http://martin.kleppmann.com/2016/04/15/announcing-trve-data.html</link>
                <comments>http://martin.kleppmann.com/2016/04/15/announcing-trve-data.html#disqus_thread</comments>
                <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2016/04/15/announcing-trve-data.html</guid>
                
                <description><![CDATA[ In 2014, after 7 years in startups and internet companies, I left LinkedIn to take a sabbatical. (“Sabbatical” sounds better than “unemployment”, don’t you think?) For a year I worked full-time on my book, and explored what I wanted to do next. Then last year an opportunity came up that... ]]></description>
                <content:encoded><![CDATA[
                    <p>In 2014, after 7 years in startups and internet companies, I left LinkedIn to take a sabbatical.
(“Sabbatical” sounds better than “unemployment”, don’t you think?) For a year I worked full-time on
<a href="http://dataintensive.net/">my book</a>, and explored what I wanted to do next. Then last year an opportunity came up that
was just perfect. I started the new job part-time in October 2015, while finishing off the book
during my remaining time (it should be done in the next few months).</p>

<p>Today I would like to introduce the project that we are working on: <a href="https://www.cl.cam.ac.uk/research/dtg/trve/">TRVE DATA</a>, pronounced
“true data”. We’ve put up a little <a href="https://www.cl.cam.ac.uk/research/dtg/trve/">website</a> explaining the high-level idea, and in this blog
post I would like to briefly explain what it is, why we are doing it, and what makes me so excited
about it. If you want to keep in touch about the project, please <a href="https://lists.cam.ac.uk/mailman/listinfo/cl-trvedata">join our mailing
list</a>.</p>

<p>The project is based at <a href="https://www.cl.cam.ac.uk/">University of Cambridge Computer Laboratory</a>, where I am working with
some excellent people: <a href="http://www.cl.cam.ac.uk/~arb33/">Alastair Beresford</a>, <a href="http://www.cl.cam.ac.uk/~dac53/">Diana Vasile</a>, and
<a href="http://www.cl.cam.ac.uk/~sak70/">Stephan Kollmann</a>.</p>

<h2 id="placing-a-bit-less-trust-in-the-cloud">Placing a bit less trust in the cloud</h2>

<p>As you have perhaps heard, <a href="https://www.chriswatterston.com/blog/my-there-no-cloud-sticker">there is no cloud</a> – it’s just someone else’s computer. And
people are storing all sorts of sensitive data on it, blindly trusting that this computer will only
allow authorised users access. What if it is compromised?</p>

<p>It’s not just individuals’ personal data, but we’re talking about medical records, <a href="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-mcgregor.pdf">journalistic
materials</a>, and data about critical infrastructure like power stations and chemical
plants. Here are a few anecdotes from conversations I have had recently:</p>

<ul>
  <li>A BBC journalist told me that they are officially banned from using Google Docs, but they use it
anyway, because it’s just so convenient.</li>
  <li>I have even heard rumours that the NHS (the English national health service) stores a worrying
amount of patient medical data in Google spreadsheets.</li>
  <li>Lawyers on high-profile court cases will happily communicate with their clients by unencrypted
email. Even though their communication enjoys <a href="https://en.wikipedia.org/wiki/Legal_professional_privilege">special protections under the law</a>, the
technology doesn’t reflect that importance.</li>
  <li>The same thing goes for <a href="https://twitter.com/csoghoian/status/700802867322441728">diplomats</a>.</li>
  <li>Some Internet-of-Things companies… oh my god, don’t ask about their security if you want to
sleep at night.</li>
</ul>

<p>I don’t object to cloud services <em>per se</em> – it’s incredibly convenient not to have to run your own
infrastructure, and Google, Amazon or Microsoft almost certainly do a better job than you would if
you were running your own server. However, I am concerned that there is too much blind trust
involved.</p>

<p>When data is stored in AWS, Google Cloud Platform, Google Docs, Evernote, iCloud, Dropbox, etc. you
have no idea what the cloud provider is doing with it. Are they using it to train neural networks?
Are they letting governments around the world access it? Are they mining it and selling the results
for advertising purposes? Do they have an untrustworthy employee who is secretly looking at the
data? Do they have a security vulnerability through which criminals can steal it? At best you have
a vaguely-worded and unenforceable privacy policy to read, but most likely you simply don’t know
what is happening to your data.</p>

<h2 id="end-to-end-encryption">End-to-end encryption</h2>

<p>Today, it is common to use SSL/TLS for encryption of data as it moves across the internet, and disk
encryption for data at rest. But that encryption ends at the server software, and almost all cloud
services today process data in the clear on the servers. Therefore, anyone who can get access to the
server can also get access to the data.</p>

<p>On the other hand, <a href="http://martin.kleppmann.com/2015/11/10/investigatory-powers-bill.html">end-to-end encryption</a> techniques mostly remove the need to trust the
server, by encrypting data on one end-user device such that only another end-user device can decrypt
it. There may still be servers and cloud services involved, but they cannot read or tamper with the
data. Someone who wants to steal the data would then have to break into one of the end-user devices
– which is <a href="https://www.theguardian.com/technology/2016/mar/21/fbi-apple-court-hearing-postpone-unlock-terrorist-iphone">still possible in most cases</a>, depending on security practices, but at
least it is a much reduced attack surface, with fewer things that can go wrong.</p>

<p>End-to-end encryption is becoming popular for messaging apps, most recently rolled out in
<a href="https://blog.whatsapp.com/10000618/end-to-end-encryption">WhatsApp</a>, along with <a href="https://whispersystems.org/">Signal</a>, iMessage (with
<a href="http://blog.cryptographyengineering.com/2016/03/attack-of-week-apple-imessage.html">reservations</a>), and others. But we have <a href="https://dymaxion.org/essays/pleasestop.html">so much other important data besides text
messages</a>! What about that?</p>

<p>The problem is that it’s fairly easy to knock together a SaaS web app with Rails, or to build
a mobile app with a backend-as-a-service, but it is really hard to do the same in a way that uses
end-to-end encryption. The crypto itself is terribly difficult to get right, and even if you use an
established secure messaging protocol, you then have the problem that many services, databases,
libraries and tools can no longer be used, since they assume they can work with unencrypted data –
so you have to start almost from scratch. At the moment it is simply not feasible for most
application developers to use end-to-end encryption.</p>

<p>And that is what we are trying to change.</p>

<h2 id="making-end-to-end-security-the-new-default">Making end-to-end security the new default</h2>

<p>The long-term goal of TRVE DATA is quite ambitious: namely, to make it just as easy to build
applications with end-to-end security, and to make those applications equally usable, as the apps
without end-to-end security today.</p>

<p>Today, using http instead of https is increasingly frowned upon; I hope that in some years time, not
using end-to-end security will be equally frowned upon. Today, we trust cloud services but not the
network; in future, I hope that we will trust neither cloud services nor the network. We will still
be using the internet and cloud services, but we will use cryptographic tools to ensure they can’t
mess with our data.</p>

<p>I want the tools for building secure applications to be so good that it will be a no-brainer to use
them. I want strong security to become the new default, and to raise the bar for all apps.</p>

<p>Of course, we have a very long way to go before this is reality. For now, we are concentrating on
a particular type of application: collaborative document editing. This is still a quite broad
category, including text documents, spreadsheets, graphics, to-do lists, notes, address books,
calendars, and so on.</p>

<p>For this kind of data, the TRVE project is building general-purpose libraries and tools that will
automatically sync data across several devices, allow sharing with other users, allow several people
to edit the same document in real time, and allow users to continue working offline. And all of the
communication between devices will, of course, be encrypted and authenticated end-to-end, with TRVE
handling key management as well as data sync.</p>

<p>The software we build will be open source and freely available. Our work-in-progress prototype is
already on GitHub, but I won’t link to it — remember, this project only started six months ago, and
I’m working on in part-time. The code is not yet in a fit state to be used. But this is where we’re
heading.</p>

<h2 id="motivation-and-concerns">Motivation and concerns</h2>

<blockquote>
  <p>“Let us speak no more of faith in man, but bind him down from mischief by the chains of cryptography.”</p>

  <p>— <a href="http://www.theatlantic.com/politics/archive/2014/05/edward-snowdens-other-motive-for-leaking/370068/">Edward Snowden</a>, invoking <a href="http://www.constitution.org/cons/kent1798.htm">Thomas Jefferson</a></p>
</blockquote>

<p>Jefferson’s original quote was about the US constitution: a document designed to deliberately
restrict the powers of government, and to keep it accountable to its citizens. History has
repeatedly shown that putting too much unchecked power in the hands of a small number of people
leads to abuses of power and various problems, even if they start with benevolent intentions.</p>

<p>Snowden’s quote is so apt because the rise of cloud services and “Big Data” have caused
a concentration of power in the hands of a small number of large companies. Cryptography is to data
what the constitution is to political power: a means of <a href="http://web.cs.ucdavis.edu/~rogaway/papers/moral.html">giving some power and control back to
individuals</a>, and keeping powerful people honest. It makes mass surveillance harder and
helps preserve civil liberties.</p>

<p>I will preempt the inevitable question: <em>“What if terrorists use this software to plan an
attack?”</em> This issue merits a longer discussion, but the short answer is: terrorists use cars, guns
and explosives as well, all of which are far more dangerous than crypto. And I don’t see any sign of
Ford stopping production of their cars because they might be used by terrorists.</p>

<p>It’s actually pretty hard to kill someone with cryptography. You can try boring someone to death, or
hitting them over the head with a crypto textbook, but that’s about it. As technologies go, crypto
is pretty non-lethal — in fact, it is a purely defensive technology.</p>

<p>On the other hand, encryption is absolutely essential for protecting data that is legitimately
sensitive, and to give some freedom to people <a href="https://twitter.com/matthew_d_green/status/720538970640269313">living under repressive regimes</a>. Weakening it
for the convenience of law enforcement, as proposed in the <a href="http://martin.kleppmann.com/2015/11/10/investigatory-powers-bill.html">Investigatory Powers Bill</a> in
the UK and <a href="http://www.burr.senate.gov/imo/media/doc/BAG16460.pdf">Feinstein-Burr</a> in the US, would be a <a href="http://data.parliament.uk/writtenevidence/committeeevidence.svc/evidencedocument/draft-investigatory-powers-bill-committee/draft-investigatory-powers-bill/written/26275.html">big mistake</a>.</p>

<h2 id="the-way-forward">The way forward</h2>

<p>I believe that end-to-end security will soon be regarded as a necessity for any sort of important
data. For example, the Bar Council of the UK (the association of lawyers who represent their clients
in court) already <a href="http://www.barcouncil.org.uk/media/407878/cloud_computing.pdf">recommends using end-to-end encryption</a> for data stored in the
cloud.</p>

<p>This trend starts with the most sensitive professions like doctors, lawyers, and <a href="http://www.cima.ned.org/wp-content/uploads/2016/03/CIMA-Journalist-Digital-Tools-03-01-15.pdf">journalists</a>,
but I expect it to grow – in order to maintain regulatory compliance, to prevent industrial
espionage, and to meet data protection requirements. The demand for better security comes not from
criminals trying to evade the law, but from professionals whose job involves dealing with important
data.</p>

<p>I am working on the TRVE DATA project because I feel this is one of the most important issues in
computing and society today, and I am hoping we will be able to make a positive difference. It’s
a long-term project, and we’re only just getting started.</p>

<p>We have set up a <a href="https://lists.cam.ac.uk/mailman/listinfo/cl-trvedata">public mailing list</a> for anyone who is interested in the project,
where we are planning to post monthly updates on our progress, and invite ideas and discussion from
anyone who would like to contribute. You can also find <a href="https://twitter.com/trvedata">@trvedata</a> on Twitter. Please join
us, and spread the word.</p>


                ]]></content:encoded>
            </item>
        
            <item>
                <title>Device security and the FBI</title>
                <link>http://martin.kleppmann.com/2016/03/30/device-security-fbi.html</link>
                <comments>http://martin.kleppmann.com/2016/03/30/device-security-fbi.html#disqus_thread</comments>
                <pubDate>Wed, 30 Mar 2016 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2016/03/30/device-security-fbi.html</guid>
                
                <description><![CDATA[ This article was originally published on The Conversation under the title “FBI backs off from its day in court with Apple this time – but there will be others”. After a very public stand-off over an encrypted terrorist’s smartphone, the FBI has backed down in its court case against Apple,... ]]></description>
                <content:encoded><![CDATA[
                    <p><em>This article was originally <a href="https://theconversation.com/fbi-backs-off-from-its-day-in-court-with-apple-this-time-but-there-will-be-others-56932">published on The Conversation</a> under the title
“FBI backs off from its day in court with Apple this time – but there will be others”.</em></p>

<p>After a <a href="https://theconversation.com/why-apple-is-making-a-stand-against-the-fbi-54925">very public stand-off</a> over an encrypted terrorist’s smartphone, the FBI has
<a href="http://www.theguardian.com/technology/2016/mar/21/fbi-apple-court-hearing-postpone-unlock-terrorist-iphone">backed down</a> in its court case against Apple, stating that an “outside party”
– rumoured to be <a href="https://www.rt.com/usa/336948-fbi-israel-crack-iphone/">an Israeli mobile forensics company</a> – has found a way of accessing
the data on the phone.</p>

<p>The exact method is not known. Forensics experts <a href="http://www.zdziarski.com/blog/?p=5966">have speculated</a> that it involves tricking
the hardware into not recording how many passcode combinations have been tried, which would allow
all 10,000 possible four-digit passcodes to be tried within a fairly short time. This technique
would apply to the iPhone 5C in question, but not newer models, which have stronger hardware
protection through the so-called <a href="https://www.apple.com/business/docs/iOS_Security_Guide.pdf">secure enclave</a>, a chip that performs
security-critical operations in hardware. The FBI has denied that the technique involves
<a href="https://www.washingtonpost.com/world/national-security/the-fbi-is-testing-a-code-based-way-to-get-into-the-san-bernardino-iphone/2016/03/24/bc79cd14-f1dc-11e5-a61f-e9c95c06edca_story.html">copying storage chips</a>.</p>

<p>So while the details of the technique <a href="http://www.theguardian.com/technology/2016/mar/22/apple-fbi-san-bernardino-iphone-method-for-cracking">remain classified</a>, it’s reasonable to assume
that <a href="https://theintercept.com/2016/03/08/snowden-fbi-claim-that-only-apple-can-unlock-phone-is-bullshit/">any security technology can be broken</a> given sufficient resources. In fact, the
technology industry’s dirty secret is that most products are frighteningly insecure.</p>

<p>Even when security technologies are carefully designed and reviewed by experts, mistakes happen. For
example, researchers recently found a way of <a href="http://blog.cryptographyengineering.com/2016/03/attack-of-week-apple-imessage.html">breaking the encryption of Apple’s iMessage
service</a>, one of the most prominent examples of end-to-end encryption (which ensures that
even the service provider cannot read the messages travelling via its network).</p>

<p>Most products have a much worse security record, as they are not designed by security experts, and
often contain flaws that are easily found by attackers. For example, <a href="http://boingboing.net/2016/01/19/griefer-hacks-baby-monitor-te.html">internet-connected baby
monitors</a> that could be hacked and allow strangers to <a href="http://sfglobe.com/2016/01/06/stranger-hacks-familys-baby-monitor-and-talks-to-child-at-night/">talk to their child</a> at
night. Insecure cars that <a href="https://theconversation.com/auto-industry-must-tackle-its-software-problems-to-stop-hacks-as-cars-go-online-45325">could be controlled via an internet connection</a> while being driven.
Drug infusion pumps at US hospitals that could be hacked by an attacker to <a href="https://www.boxer.senate.gov/?p=release&amp;id=3254">manipulate drug dosage
levels</a>.</p>

<p>Even national infrastructure is vulnerable, with software weaknesses exploited to cause serious
damage at a <a href="http://www.bbc.co.uk/news/technology-30575104">German steel mill</a>, bring down parts of the <a href="https://theconversation.com/the-cyberattack-on-ukraines-power-grid-is-a-warning-of-whats-to-come-52832">Ukrainian power
grid</a>, and <a href="http://news.softpedia.com/news/hackers-modify-water-treatment-parameters-by-accident-502043.shtml">alter the mix of chemicals added to drinking water</a>.
While our lives depend more and more on “smart” devices, they are frequently designed in incredibly
stupid ways.</p>

<h2 id="insecure-by-design">Insecure by design</h2>

<p>The conflict between Apple and the FBI was particularly jarring to security experts, seen as an
attempt to deliberately make technology less secure and win legal precedent to gain access to other
devices in the future. Smartphones are becoming increasingly ubiquitous, and we know from the
Snowden files that the NSA can <a href="http://www.theguardian.com/world/2014/feb/01/edward-snowden-intelligence-leak-nsa-contractor-extract">turn on a phone’s microphone</a> remotely without
the owner’s knowledge. We are heading towards a state in which every inhabited space contains
a microphone (and a camera) that is connected to the internet and which might be recording anything
you say. This is not even a paranoid exaggeration.</p>

<p>So, in a world in which we are constantly struggling to make things more secure, the FBI’s desire to
create a backdoor to provide it access is like pouring gasoline on the fire.</p>

<p>The problem with security weaknesses is that it is impossible to control who can use them.
Responsible researchers report them to the vendor so that they can be fixed, and sometimes receive
a <a href="http://www.tripwire.com/state-of-security/vulnerability-management/11-essential-bug-bounty-programs-of-2015/">bug bounty</a> in return. But those who want to make more money may <a href="http://www.wired.com/2015/11/heres-a-spy-firms-price-list-for-secret-hacker-techniques/">secretly sell the
knowledge to the highest bidder</a>. Customers of this <a href="https://theconversation.com/trusting-hackers-with-your-security-youd-better-be-able-to-sort-the-whitehats-from-the-blackhats-44477">dark trade in
vulnerabilities</a> often include <a href="https://citizenlab.org/2015/08/hacking-team-leak-highlights-citizen-lab-research/">governments with repressive human rights
records</a>.</p>

<p>If the FBI has found a means of getting data off a locked phone, that means the intelligence
services of other countries have probably independently developed the same technique – or been sold
it by someone who has. So if an American citizen has data on their phone that is of intelligence
interest to another country that data is at risk if the phone is lost or stolen.</p>

<p>Most people will never be of intelligence interest of course, so perhaps such fears are overblown.
But the push from governments, for example through the pending <a href="https://theconversation.com/us/topics/investigatory-powers-bill">Investigatory Powers Bill</a>
in the UK, to allow the security services to hack devices in bulk – even if the devices belong to
people who are not suspected of any crime – cannot be ignored.</p>

<p>Bulk hacking powers, taken together with insecure, internet-connected microphones and cameras in
every room, are a worrying combination. It is a cliche to conjure up Nineteen Eighty-Four, but the
picture it paints is something very much like Orwell’s telescreens.</p>

<iframe width="440" height="260" src="https://www.youtube.com/embed/CCfW6HFP5cI?wmode=transparent&amp;start=0" frameborder="0" allowfullscreen=""></iframe>

<h2 id="used-by-one-used-by-all">Used by one, used by all</h2>

<p>To some extent law enforcement has historically benefited from poor computer security, as hacking
a poorly secured digital device is easier and cheaper than planting a microphone in someone’s house
or rifling their physical belongings. No wonder that the former CIA director <a href="http://www.wired.com/2012/03/petraeus-tv-remote/">loves the Internet of
Things</a>.</p>

<p>This convenience often tempts governments to deliberately weaken device security – the FBI’s case
against Apple is just one example. In the UK, the proposed Investigatory Powers Bill allows the
secretary of state to issue “<a href="http://www.theguardian.com/technology/2015/nov/09/tech-firms-snoopers-charter-end-strong-encryption-britain-ip-bill">technical capability notices</a>”, which are secret
government orders to demand manufacturers make a device or service deliberately less secure than it
could be. GCHQ’s new MIKEY-SAKKE standard for encrypted phone calls is also <a href="https://www.benthamsgaze.org/2016/01/19/insecure-by-design-protocols-for-encrypted-phone-calls/">deliberately
weakened</a> to allow easier surveillance.</p>

<p>But a security flaw that can be used by one can be used by all, whether legitimate police
investigations or hostile foreign intelligence services or organised crime. The fears of <a href="https://cyber.law.harvard.edu/pubrelease/dont-panic/Dont_Panic_Making_Progress_on_Going_Dark_Debate.pdf">criminals
and terrorists “going dark” are overblown</a>, but the risk to life from insecure
infrastructure is real: fixing these weaknesses should be our priority, not striving to make devices
less secure for the sake of law enforcement.</p>


                ]]></content:encoded>
            </item>
        
            <item>
                <title>Should law enforcement services have a backdoor into smartphones?</title>
                <link>http://martin.kleppmann.com/2016/02/18/law-enforcement-smartphone-backdoors.html</link>
                <comments>http://martin.kleppmann.com/2016/02/18/law-enforcement-smartphone-backdoors.html#disqus_thread</comments>
                <pubDate>Thu, 18 Feb 2016 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2016/02/18/law-enforcement-smartphone-backdoors.html</guid>
                
                <description><![CDATA[ This article was originally supposed to be published on The Conversation, but was dropped because they already had another, very similar article. Apple has found itself challenging a judge’s ruling after it refused to help the FBI break into the secured iPhone of Syed Rizwan Farook, one of the shooters... ]]></description>
                <content:encoded><![CDATA[
                    <p><em>This article was originally supposed to be published on <a href="https://theconversation.com/">The Conversation</a>,
but was dropped because they already had another, very similar article.</em></p>

<p>Apple has found itself challenging a judge’s ruling after it <a href="http://www.theguardian.com/us-news/2016/feb/17/apple-ordered-to-hack-iphone-of-san-bernardino-shooter-for-fbi">refused to help the FBI</a>
break into the secured iPhone of Syed Rizwan Farook, one of the shooters at last year’s attack in
San Bernardino, California. As the data on the phone is encrypted and investigators need the
passcode in order to decrypt it they have <a href="https://www.documentcloud.org/documents/2714001-SB-Shooter-Order-Compelling-Apple-Asst-iPhone.html">demanded that Apple</a>, as the phone’s
manufacturer, help them.</p>

<p>On the face of it, assisting with the investigation of a terrorist act seems like a very reasonable
demand. Why would Apple refuse it? To understand we have to take a closer look at how smartphone
security works.</p>

<p>Apple’s <a href="https://www.apple.com/business/docs/iOS_Security_Guide.pdf">iOS operating system security guide</a> explains that the iPhone deliberately
introduces a delay when checking a passcode: it allows at most 12 passcode guesses per second, and
sometimes waits several seconds after an incorrect guess, depending on your settings. This is to
prevent “brute force attacks”, where software tries every possible combination in order to find the
correct passcode.</p>

<p>On recent iPhones, this delay is enforced by the so-called <a href="http://blog.cryptographyengineering.com/2014/10/why-cant-apple-decrypt-your-iphone.html">Secure Enclave</a>,
a special chip that handles security-critical aspects of the phone – such as encryption and the
fingerprint sensor – in hardware. In the case of Farook’s phone, it’s an iPhone 5C which <a href="http://blog.trailofbits.com/2016/02/17/apple-can-comply-with-the-fbi-court-order/">does not
have a Secure Enclave</a>.</p>

<p>The reason Apple develops these security features is not anti-government activism – it is simply
commercial demand. The job of big corporate IT departments is to protect sensitive company data
against industrial espionage by competitors, and against attacks from criminal gangs. In many
industries a compromise of sensitive data would breach compliance with government regulations, and
<a href="http://www.theguardian.com/society/2014/aug/26/ministry-justice-fined-180000-losing-hard-drive-sensitive-data-prisoners">risk a heavy fine</a> or even criminal charges. This is not to mention the
reputational damage, as <a href="https://theconversation.com/talktalk-hack-perhaps-well-finally-take-cybersecurity-seriously-50144">many firms have found</a>. And the same applies to individuals for
much the same reasons.</p>

<p>So if companies are willing to pay a premium for products that will keep their data safe, they will
happily buy iPhones for their employees, and require them to set a strong passcode. That way, even
if an employee accidentally forgets their phone at a bar, or it is <a href="http://www.bbc.co.uk/news/uk-england-manchester-19960966">stolen from the employee’s
home</a>, the IT department can feel confident that whoever picks up the phone won’t be able
to access the sensitive emails and business records that may be stored on it.</p>

<p>For example, even if the phone is picked up by an agent of a hostile foreign intelligence service,
and they take it to their lab and open it up, remove the storage chips and attach them to computer
forensics apparatus – even then, they probably <a href="http://www.darthnull.org/2014/10/06/ios-encryption">won’t be able to salvage the data</a>.
An unlikely scenario for most people, but if you work for a defence contractor or the diplomatic
corps, you have to worry about such things. If companies are willing to pay for security features to
protect against such scenarios, it makes sense for companies such as Apple <a href="http://www.apple.com/customer-letter/">to take note of their
wishes</a>.</p>

<p>But what about situations when it might be legitimate for law enforcement to try to access this
data? If the FBI turn up with a warrant signed by a judge, should they not be able to get their
hands on the information?</p>

<p>The problem is that if there is a special method or technique, besides knowing the right passcode,
that grants access to protected data – known as a <a href="https://theconversation.com/could-encryption-backdoors-safeguard-privacy-and-fight-terror-online-53419">backdoor</a> – then that method or technique could
be used for both legitimate and illegitimate uses. How do you control who can use that backdoor? If
a phone manufacturer creates a backdoor for police, it <a href="https://www.cl.cam.ac.uk/~rja14/Papers/doormats.pdf">will inevitably be used by criminals as
well</a>.</p>

<p>For example, imagine the FBI had a special piece of software that would allow them to unlock an
iPhone if authorised by a warrant. It would only take one rogue employee, or one hack of the FBI’s
computer systems, to leak that software onto the internet for any criminal – or foreign spies – to
use. Imagine they had a hardware device that would magically open an iPhone and reveal it’s data:
a few of those devices would end up on the black market very quickly. <a href="http://www.theguardian.com/technology/2015/jul/09/opm-hack-21-million-personal-information-stolen">Government departments can be
hacked</a>, just like anyone else, and there are always employees looking to make a quick
buck.</p>

<p>Encryption backdoors <a href="https://www.eff.org/deeplinks/2016/02/eff-support-apple-encryption-battle">deliberately weaken security</a>. This is fundamentally a bad idea, and can
have many <a href="http://blog.cryptographyengineering.com/2015/12/on-juniper-backdoor.html">unforeseen consequences</a>. Trying to restrict access to strong encryption, as the
<a href="https://en.wikipedia.org/wiki/Export_of_cryptography_from_the_United_States">US government tried and failed to do in the 1990s</a>, is counterproductive and
pointless: <a href="http://blog.cryptographyengineering.com/2015/03/attack-of-week-freak-or-factoring-nsa.html">counterproductive</a> because it only harms innocent people, whereas those its aimed
at will find a way to work around it, and pointless because strong encryption products are <a href="https://www.schneier.com/cryptography/paperfiles/worldwide-survey-of-encryption-products.pdf">found
throughout the world</a>: people will just go somewhere else for their encryption if they
can’t get it at home.</p>

<p>It is understandable that in the wake of a crime or terrorist attack, politicians and law
enforcement need to be seen as “doing something”. However, that does not mean law enforcement should
be able to do everything. It is worth remembering why security mechanisms like encryption exist in
the first place: to protect sensitive medical, legal, journalistic, financial, diplomatic,
commercial or military data from falling into the wrong hands. Trying to weaken those protections
would cause far more harm than good.</p>


                ]]></content:encoded>
            </item>
        
            <item>
                <title>How to do distributed locking</title>
                <link>http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html</link>
                <comments>http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html#disqus_thread</comments>
                <pubDate>Mon, 08 Feb 2016 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html</guid>
                
                <description><![CDATA[ As part of the research for my book, I came across an algorithm called Redlock on the Redis website. The algorithm claims to implement fault-tolerant distributed locks (or rather, leases [1]) on top of Redis, and the page asks for feedback from people who are into distributed systems. The algorithm instinctively... ]]></description>
                <content:encoded><![CDATA[
                    <p>As part of the research for <a href="http://dataintensive.net/">my book</a>, I came across an algorithm called <a href="http://redis.io/topics/distlock">Redlock</a> on the
<a href="http://redis.io/">Redis</a> website. The algorithm claims to implement fault-tolerant distributed locks (or rather,
<a href="https://pdfs.semanticscholar.org/a25e/ee836dbd2a5ae680f835309a484c9f39ae4e.pdf" title="Cary G Gray and David R Cheriton. Leases: An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency. SOSP 1989">leases</a> [1]) on top of Redis, and the page asks for feedback from people who are into
distributed systems. The algorithm instinctively set off some alarm bells in the back of my mind, so
I spent a bit of time thinking about it and writing up these notes.</p>

<p>Since there are already <a href="http://redis.io/topics/distlock">over 10 independent implementations of Redlock</a> and we don’t know
who is already relying on this algorithm, I thought it would be worth sharing my notes publicly.
I won’t go into other aspects of Redis, some of which have already been critiqued
<a href="https://aphyr.com/tags/Redis">elsewhere</a>.</p>

<p>Before I go into the details of Redlock, let me say that I quite like Redis, and I have successfully
used it in production in the past. I think it’s a good fit in situations where you want to share
some transient, approximate, fast-changing data between servers, and where it’s not a big deal if
you occasionally lose that data for whatever reason. For example, a good use case is maintaining
request counters per IP address (for rate limiting purposes) and sets of distinct IP addresses per
user ID (for abuse detection).</p>

<p>However, Redis has been gradually making inroads into areas of data management where there are
stronger consistency and durability expectations – which worries me, because this is not what Redis
is designed for. Arguably, distributed locking is one of those areas. Let’s examine it in some more
detail.</p>

<h2 id="what-are-you-using-that-lock-for">What are you using that lock for?</h2>

<p>The purpose of a lock is to ensure that among several nodes that might try to do the same piece of
work, only one actually does it (at least only one at a time). That work might be to write some data
to a shared storage system, to perform some computation, to call some external API, or suchlike. At
a high level, there are two reasons why you might want a lock in a distributed application:
<a href="http://research.google.com/archive/chubby.html" title="Mike Burrows. The Chubby lock service for loosely-coupled distributed systems. OSDI 2006">for efficiency or for correctness</a> [2]. To distinguish these cases, you can ask what
would happen if the lock failed:</p>

<ul>
  <li><strong>Efficiency:</strong> Taking a lock saves you from unnecessarily doing the same work twice (e.g. some
expensive computation). If the lock fails and two nodes end up doing the same piece of work, the
result is a minor increase in cost (you end up paying 5 cents more to AWS than you otherwise would
have) or a minor inconvenience (e.g. a user ends up getting the same email notification twice).</li>
  <li><strong>Correctness:</strong> Taking a lock prevents concurrent processes from stepping on each others’ toes
and messing up the state of your system. If the lock fails and two nodes concurrently work on the
same piece of data, the result is a corrupted file, data loss, permanent inconsistency, the wrong
dose of a drug administered to a patient, or some other serious problem.</li>
</ul>

<p>Both are valid cases for wanting a lock, but you need to be very clear about which one of the two
you are dealing with.</p>

<p>I will argue that if you are using locks merely for efficiency purposes, it is unnecessary to incur
the cost and complexity of Redlock, running 5 Redis servers and checking for a majority to acquire
your lock. You are better off just using a single Redis instance, perhaps with asynchronous
replication to a secondary instance in case the primary crashes.</p>

<p>If you use a single Redis instance, of course you will drop some locks if the power suddenly goes
out on your Redis node, or something else goes wrong. But if you’re only using the locks as an
efficiency optimization, and the crashes don’t happen too often, that’s no big deal. This “no big
deal” scenario is where Redis shines. At least if you’re relying on a single Redis instance, it is
clear to everyone who looks at the system that the locks are approximate, and only to be used for
non-critical purposes.</p>

<p>On the other hand, the Redlock algorithm, with its 5 replicas and majority voting, looks at first
glance as though it is suitable for situations in which your locking is important for <em>correctness</em>.
I will argue in the following sections that it is <em>not</em> suitable for that purpose. For the rest of
this article we will assume that your locks are important for correctness, and that it is a serious
bug if two different nodes concurrently believe that they are holding the same lock.</p>

<h2 id="protecting-a-resource-with-a-lock">Protecting a resource with a lock</h2>

<p>Let’s leave the particulars of Redlock aside for a moment, and discuss how a distributed lock is
used in general (independent of the particular locking algorithm used). It’s important to remember
that a lock in a distributed system is not like a mutex in a multi-threaded application. It’s a more
complicated beast, due to the problem that different nodes and the network can all fail
independently in various ways.</p>

<p>For example, say you have an application in which a client needs to update a file in shared storage
(e.g. HDFS or S3). A client first acquires the lock, then reads the file, makes some changes, writes
the modified file back, and finally releases the lock. The lock prevents two clients from performing
this read-modify-write cycle concurrently, which would result in lost updates. The code might look
something like this:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span></span><span class="c1">// THIS CODE IS BROKEN</span>
<span class="kd">function</span> <span class="nx">writeData</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">lock</span> <span class="o">=</span> <span class="nx">lockService</span><span class="p">.</span><span class="nx">acquireLock</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">lock</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">throw</span> <span class="s1">&#39;Failed to acquire lock&#39;</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">try</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">storage</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">);</span>
        <span class="kd">var</span> <span class="nx">updated</span> <span class="o">=</span> <span class="nx">updateContents</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="nx">data</span><span class="p">);</span>
        <span class="nx">storage</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">filename</span><span class="p">,</span> <span class="nx">updated</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">finally</span> <span class="p">{</span>
        <span class="nx">lock</span><span class="p">.</span><span class="nx">release</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Unfortunately, even if you have a perfect lock service, the code above is broken. The following
diagram shows how you can end up with corrupted data:</p>

<p><img src="/2016/02/unsafe-lock.png" width="550" height="200" alt="Unsafe access to a resource protected by a distributed lock" /></p>

<p>In this example, the client that acquired the lock is paused for an extended period of time while
holding the lock – for example because the garbage collector (GC) kicked in. The lock has a timeout
(i.e. it is a lease), which is always a good idea (otherwise a crashed client could end up holding
a lock forever and never releasing it). However, if the GC pause lasts longer than the lease expiry
period, and the client doesn’t realise that it has expired, it may go ahead and make some unsafe
change.</p>

<p>This bug is not theoretical: HBase used to <a href="http://www.slideshare.net/enissoz/hbase-and-hdfs-understanding-filesystem-usage" title="Enis Söztutar. HBase and HDFS: Understanding filesystem usage in HBase. HBaseCon 2013">have this problem</a> [3,4]. Normally,
GC pauses are quite short, but “stop-the-world” GC pauses have sometimes been known to last for
<a href="http://blog.cloudera.com/blog/2011/02/avoiding-full-gcs-in-hbase-with-memstore-local-allocation-buffers-part-1/" title="Todd Lipcon. Avoiding Full GCs in Apache HBase with MemStore-Local Allocation Buffers: Part 1. 2011">several minutes</a> [5] – certainly long enough for a lease to expire. Even so-called
“concurrent” garbage collectors like the HotSpot JVM’s CMS cannot fully run in parallel with the
application code – even they <a href="http://mechanical-sympathy.blogspot.co.uk/2013/07/java-garbage-collection-distilled.html" title="Martin Thompson. Java Garbage Collection Distilled. 2013">need to stop the world</a> from time to time [6].</p>

<p>You cannot fix this problem by inserting a check on the lock expiry just before writing back to
storage. Remember that GC can pause a running thread at <em>any point</em>, including the point that is
maximally inconvenient for you (between the last check and the write operation).</p>

<p>And if you’re feeling smug because your programming language runtime doesn’t have long GC pauses,
there are many other reasons why your process might get paused. Maybe your process tried to read an
address that is not yet loaded into memory, so it gets a page fault and is paused until the page is
loaded from disk. Maybe your disk is actually EBS, and so reading a variable unwittingly turned into
a synchronous network request over Amazon’s congested network. Maybe there are many other processes
contending for CPU, and you hit a <a href="https://twitter.com/aphyr/status/682077908953792512">black node in your scheduler tree</a>. Maybe someone
accidentally sent SIGSTOP to the process. Whatever. Your processes will get paused.</p>

<p>If you still don’t believe me about process pauses, then consider instead that the file-writing
request may get delayed in the network before reaching the storage service. Packet networks such as
Ethernet and IP may delay packets <em>arbitrarily</em>, and <a href="https://queue.acm.org/detail.cfm?id=2655736" title="P Bailis and K Kingsbury. The Network is Reliable. ACM Queue 12(7), 2014.">they do</a> [7]: in a famous
<a href="https://github.com/blog/1364-downtime-last-saturday" title="Mark Imbriaco. Downtime last Saturday. 2012">incident at GitHub</a>, packets were delayed in the network for approximately 90
seconds [8]. This means that an application process may send a write request, and it may reach
the storage server a minute later when the lease has already expired.</p>

<p>Even in well-managed networks, this kind of thing can happen. You simply cannot make any assumptions
about timing, which is why the code above is fundamentally unsafe, no matter what lock service you
use.</p>

<h2 id="making-the-lock-safe-with-fencing">Making the lock safe with fencing</h2>

<p>The fix for this problem is actually pretty simple: you need to include a <em>fencing token</em> with every
write request to the storage service. In this context, a fencing token is simply a number that
increases (e.g. incremented by the lock service) every time a client acquires the lock. This is
illustrated in the following diagram:</p>

<p><img src="/2016/02/fencing-tokens.png" width="550" height="200" alt="Using fencing tokens to make resource access safe" /></p>

<p>Client 1 acquires the lease and gets a token of 33, but then it goes into a long pause and the lease
expires. Client 2 acquires the lease, gets a token of 34 (the number always increases), and then
sends its write to the storage service, including the token of 34. Later, client 1 comes back to
life and sends its write to the storage service, including its token value 33. However, the storage
server remembers that it has already processed a write with a higher token number (34), and so it
rejects the request with token 33.</p>

<p>Note this requires the storage server to take an active role in checking tokens, and rejecting any
writes on which the token has gone backwards. But this is not particularly hard, once you know the
trick. And provided that the lock service generates strictly monotonically increasing tokens, this
makes the lock safe. For example, if you are using ZooKeeper as lock service, you can use the <code>zxid</code>
or the znode version number as fencing token, and you’re in good shape [3].</p>

<p>However, this leads us to the first big problem with Redlock: <em>it does not have any facility for
generating fencing tokens</em>. The algorithm does not produce any number that is guaranteed to increase
every time a client acquires a lock. This means that even if the algorithm were otherwise perfect,
it would not be safe to use, because you cannot prevent the race condition between clients in the
case where one client is paused or its packets are delayed.</p>

<p>And it’s not obvious to me how one would change the Redlock algorithm to start generating fencing
tokens. The unique random value it uses does not provide the required monotonicity. Simply keeping
a counter on one Redis node would not be sufficient, because that node may fail. Keeping counters on
several nodes would mean they would go out of sync. It’s likely that you would need a consensus
algorithm just to generate the fencing tokens. (If only <a href="https://twitter.com/lindsey/status/575006945213485056">incrementing a counter</a> was
simple.)</p>

<h2 id="using-time-to-solve-consensus">Using time to solve consensus</h2>

<p>The fact that Redlock fails to generate fencing tokens should already be sufficient reason not to
use it in situations where correctness depends on the lock. But there are some further problems that
are worth discussing.</p>

<p>In the academic literature, the most practical system model for this kind of algorithm is the
<a href="http://courses.csail.mit.edu/6.852/08/papers/CT96-JACM.pdf" title="TD Chandra and S Toueg. Unreliable Failure Detectors for Reliable Distributed Systems. JACM 43(2):225–267, 1996">asynchronous model with unreliable failure detectors</a> [9]. In plain English,
this means that the algorithms make no assumptions about timing: processes may pause for arbitrary
lengths of time, packets may be arbitrarily delayed in the network, and clocks may be arbitrarily
wrong – and the algorithm is nevertheless expected to do the right thing. Given what we discussed
above, these are very reasonable assumptions.</p>

<p>The only purpose for which algorithms may use clocks is to generate timeouts, to avoid waiting
forever if a node is down. But timeouts do not have to be accurate: just because a request times
out, that doesn’t mean that the other node is definitely down – it could just as well be that there
is a large delay in the network, or that your local clock is wrong. When used as a failure detector,
timeouts are just a guess that something is wrong. (If they could, distributed algorithms would do
without clocks entirely, but then <a href="http://www.cs.princeton.edu/courses/archive/fall07/cos518/papers/flp.pdf" title="MJ Fischer, N Lynch, and MS Paterson. Impossibility of Distributed Consensus with One Faulty Process. JACM 32(2):374–382, 1985">consensus becomes impossible</a> [10]. Acquiring a lock is
like a compare-and-set operation, which <a href="https://cs.brown.edu/~mph/Herlihy91/p124-herlihy.pdf" title="Maurice Herlihy. Wait-Free Synchronization. TOPLAS 13(1):124–149, 1991">requires consensus</a> [11].)</p>

<p>Note that Redis <a href="https://github.com/antirez/redis/blob/edd4d555df57dc84265fdfb4ef59a4678832f6da/src/server.c#L390-L404">uses <code>gettimeofday</code></a>, not a <a href="http://linux.die.net/man/2/clock_gettime">monotonic clock</a>, to
determine the <a href="https://github.com/antirez/redis/blob/f0b168e8944af41c4161249040f01ece227cfc0c/src/db.c#L933-L959">expiry of keys</a>. The man page for <code>gettimeofday</code> <a href="http://linux.die.net/man/2/gettimeofday">explicitly
says</a> that the time it returns is subject to discontinuous jumps in system time –
that is, it might suddenly jump forwards by a few minutes, or even jump back in time (e.g. if the
clock is <a href="https://www.eecis.udel.edu/~mills/ntp/html/clock.html">stepped by NTP</a> because it differs from a NTP server by too much, or if the
clock is manually adjusted by an administrator). Thus, if the system clock is doing weird things, it
could easily happen that the expiry of a key in Redis is much faster or much slower than expected.</p>

<p>For algorithms in the asynchronous model this is not a big problem: these algorithms generally
ensure that their <em>safety</em> properties always hold, <a href="http://www.net.t-labs.tu-berlin.de/~petr/ADC-07/papers/DLS88.pdf" title="C Dwork, N Lynch, and L Stockmeyer. Consensus in the Presence of Partial Synchrony. JACM 35(2):288–323, 1988">without making any timing
assumptions</a> [12]. Only <em>liveness</em> properties depend on timeouts or some other failure
detector. In plain English, this means that even if the timings in the system are all over the place
(processes pausing, networks delaying, clocks jumping forwards and backwards), the performance of an
algorithm might go to hell, but the algorithm will never make an incorrect decision.</p>

<p>However, Redlock is not like this. Its safety depends on a lot of timing assumptions: it assumes
that all Redis nodes hold keys for approximately the right length of time before expiring; that the
network delay is small compared to the expiry duration; and that process pauses are much shorter
than the expiry duration.</p>

<h2 id="breaking-redlock-with-bad-timings">Breaking Redlock with bad timings</h2>

<p>Let’s look at some examples to demonstrate Redlock’s reliance on timing assumptions. Say the system
has five Redis nodes (A, B, C, D and E), and two clients (1 and 2). What happens if a clock on one
of the Redis nodes jumps forward?</p>

<ol>
  <li>Client 1 acquires lock on nodes A, B, C. Due to a network issue, D and E cannot be reached.</li>
  <li>The clock on node C jumps forward, causing the lock to expire.</li>
  <li>Client 2 acquires lock on nodes C, D, E. Due to a network issue, A and B cannot be reached.</li>
  <li>Clients 1 and 2 now both believe they hold the lock.</li>
</ol>

<p>A similar issue could happen if C crashes before persisting the lock to disk, and immediately
restarts. For this reason, the Redlock documentation <a href="http://redis.io/topics/distlock#performance-crash-recovery-and-fsync">recommends delaying restarts</a> of
crashed nodes for at least the time-to-live of the longest-lived lock. But this restart delay again
relies on a reasonably accurate measurement of time, and would fail if the clock jumps.</p>

<p>Okay, so maybe you think that a clock jump is unrealistic, because you’re very confident in having
correctly configured NTP to only ever slew the clock. In that case, let’s look at an example of how
a process pause may cause the algorithm to fail:</p>

<ol>
  <li>Client 1 requests lock on nodes A, B, C, D, E.</li>
  <li>While the responses to client 1 are in flight, client 1 goes into stop-the-world GC.</li>
  <li>Locks expire on all Redis nodes.</li>
  <li>Client 2 acquires lock on nodes A, B, C, D, E.</li>
  <li>Client 1 finishes GC, and receives the responses from Redis nodes indicating that it successfully
acquired the lock (they were held in client 1’s kernel network buffers while the process was
paused).</li>
  <li>Clients 1 and 2 now both believe they hold the lock.</li>
</ol>

<p>Note that even though Redis is written in C, and thus doesn’t have GC, that doesn’t help us here:
any system in which the <em>clients</em> may experience a GC pause has this problem. You can only make this
safe by preventing client 1 from performing any operations under the lock after client 2 has
acquired the lock, for example using the fencing approach above.</p>

<p>A long network delay can produce the same effect as the process pause. It perhaps depends on your
TCP user timeout – if you make the timeout significantly shorter than the Redis TTL, perhaps the
delayed network packets would be ignored, but we’d have to look in detail at the TCP implementation
to be sure. Also, with the timeout we’re back down to accuracy of time measurement again!</p>

<h2 id="the-synchrony-assumptions-of-redlock">The synchrony assumptions of Redlock</h2>

<p>These examples show that Redlock works correctly only if you assume a <em>synchronous</em> system model –
that is, a system with the following properties:</p>

<ul>
  <li>bounded network delay (you can guarantee that packets always arrive within some guaranteed maximum
delay),</li>
  <li>bounded process pauses (in other words, hard real-time constraints, which you typically only
find in car airbag systems and suchlike), and</li>
  <li>bounded clock error (cross your fingers that you don’t get your time from a <a href="http://xenia.media.mit.edu/~nelson/research/ntp-survey99/">bad NTP
server</a>).</li>
</ul>

<p>Note that a synchronous model does not mean exactly synchronised clocks: it means you are assuming
a <a href="http://www.net.t-labs.tu-berlin.de/~petr/ADC-07/papers/DLS88.pdf" title="C Dwork, N Lynch, and L Stockmeyer. Consensus in the Presence of Partial Synchrony. JACM 35(2):288–323, 1988"><em>known, fixed upper bound</em></a> on network delay, pauses and clock drift [12]. Redlock
assumes that delays, pauses and drift are all small relative to the time-to-live of a lock; if the
timing issues become as large as the time-to-live, the algorithm fails.</p>

<p>In a reasonably well-behaved datacenter environment, the timing assumptions will be satisfied <em>most</em>
of the time – this is known as a <a href="http://www.net.t-labs.tu-berlin.de/~petr/ADC-07/papers/DLS88.pdf" title="C Dwork, N Lynch, and L Stockmeyer. Consensus in the Presence of Partial Synchrony. JACM 35(2):288–323, 1988">partially synchronous system</a> [12]. But is that good
enough? As soon as those timing assumptions are broken, Redlock may violate its safety properties,
e.g. granting a lease to one client before another has expired. If you’re depending on your lock for
correctness, “most of the time” is not enough – you need it to <em>always</em> be correct.</p>

<p>There is plenty of evidence that it is not safe to assume a synchronous system model for most
practical system environments [7,8]. Keep reminding yourself of the GitHub incident with the
<a href="https://github.com/blog/1364-downtime-last-saturday" title="Mark Imbriaco. Downtime last Saturday. 2012">90-second packet delay</a>. It is unlikely that Redlock would survive a <a href="https://aphyr.com/tags/jepsen">Jepsen</a> test.</p>

<p>On the other hand, a consensus algorithm designed for a partially synchronous system model (or
asynchronous model with failure detector) actually has a chance of working. Raft, Viewstamped
Replication, Zab and Paxos all fall in this category. Such an algorithm must let go of all timing
assumptions. That’s hard: it’s so tempting to assume networks, processes and clocks are more
reliable than they really are. But in the messy reality of distributed systems, you have to be very
careful with your assumptions.</p>

<h2 id="conclusion">Conclusion</h2>

<p>I think the Redlock algorithm is a poor choice because it is “neither fish nor fowl”: it is
unnecessarily heavyweight and expensive for efficiency-optimization locks, but it is not
sufficiently safe for situations in which correctness depends on the lock.</p>

<p>In particular, the algorithm makes dangerous assumptions about timing and system clocks (essentially
assuming a synchronous system with bounded network delay and bounded execution time for operations),
and it violates safety properties if those assumptions are not met. Moreover, it lacks a facility
for generating fencing tokens (which protect a system against long delays in the network or in
paused processes).</p>

<p>If you need locks only on a best-effort basis (as an efficiency optimization, not for correctness),
I would recommend sticking with the <a href="http://redis.io/commands/set">straightforward single-node locking algorithm</a> for
Redis (conditional set-if-not-exists to obtain a lock, atomic delete-if-value-matches to release
a lock), and documenting very clearly in your code that the locks are only approximate and may
occasionally fail. Don’t bother with setting up a cluster of five Redis nodes.</p>

<p>On the other hand, if you need locks for correctness, please don’t use Redlock. Instead, please use
a proper consensus system such as <a href="https://zookeeper.apache.org/">ZooKeeper</a>, probably via one of the <a href="http://curator.apache.org/curator-recipes/index.html">Curator recipes</a>
that implements a lock. (At the very least, use a <a href="http://www.postgresql.org/">database with reasonable transactional
guarantees</a>.) And please enforce use of fencing tokens on all resource accesses under the
lock.</p>

<p>As I said at the beginning, Redis is an excellent tool if you use it correctly. None of the above
diminishes the usefulness of Redis for its intended purposes. <a href="http://antirez.com/">Salvatore</a> has been very
dedicated to the project for years, and its success is well deserved. But every tool has
limitations, and it is important to know them and to plan accordingly.</p>

<p>If you want to learn more, I explain this topic in greater detail in <a href="http://dataintensive.net/">chapters 8 and 9 of my
book</a>, now available in Early Release from O’Reilly. (The diagrams above are taken from my
book.) For learning how to use ZooKeeper, I recommend <a href="http://shop.oreilly.com/product/0636920028901.do" title="FP Junqueira and B Reed. ZooKeeper: Distributed Process Coordination. O'Reilly, 2013">Junqueira and Reed’s book</a> [3].
For a good introduction to the theory of distributed systems, I recommend <a href="http://www.distributedprogramming.net/" title="C Cachin, R Guerraoui, and L Rodrigues. Introduction to Reliable and Secure Distributed Programming, 2nd ed. Springer, 2011">Cachin, Guerraoui and
Rodrigues’ textbook</a> [13].</p>

<p><em>Thank you to <a href="https://aphyr.com">Kyle Kingsbury</a>, <a href="https://twitter.com/skamille">Camille Fournier</a>, <a href="https://twitter.com/fpjunqueira">Flavio Junqueira</a>, and
<a href="http://antirez.com/">Salvatore Sanfilippo</a> for reviewing a draft of this article. Any errors are mine, of
course.</em></p>

<p><strong>Update 9 Feb 2016:</strong> <a href="http://antirez.com/">Salvatore</a>, the original author of Redlock, has
<a href="http://antirez.com/news/101">posted a rebuttal</a> to this article (see also
<a href="https://news.ycombinator.com/item?id=11065933">HN discussion</a>). He makes some good points, but
I stand by my conclusions. I may elaborate in a follow-up post if I have time, but please form your
own opinions – and please consult the references below, many of which have received rigorous
academic peer review (unlike either of our blog posts).</p>

<h2 id="references">References</h2>

<p>[1] Cary G Gray and David R Cheriton:
“<a href="https://pdfs.semanticscholar.org/a25e/ee836dbd2a5ae680f835309a484c9f39ae4e.pdf" title="Cary G Gray and David R Cheriton. Leases: An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency. SOSP 1989">Leases: An Efficient Fault-Tolerant Mechanism for Distributed File Cache Consistency</a>,”
at <em>12th ACM Symposium on Operating Systems Principles</em> (SOSP), December 1989.
<a href="http://dx.doi.org/10.1145/74850.74870">doi:10.1145/74850.74870</a></p>

<p>[2] Mike Burrows:
“<a href="http://research.google.com/archive/chubby.html" title="Mike Burrows. The Chubby lock service for loosely-coupled distributed systems. OSDI 2006">The Chubby lock service for loosely-coupled distributed systems</a>,”
at <em>7th USENIX Symposium on Operating System Design and Implementation</em> (OSDI), November 2006.</p>

<p>[3] Flavio P Junqueira and Benjamin Reed:
<a href="http://shop.oreilly.com/product/0636920028901.do" title="FP Junqueira and B Reed. ZooKeeper: Distributed Process Coordination. O'Reilly, 2013"><em>ZooKeeper: Distributed Process Coordination</em></a>. O’Reilly Media, November 2013.
ISBN: 978-1-4493-6130-3</p>

<p>[4] Enis Söztutar:
“<a href="http://www.slideshare.net/enissoz/hbase-and-hdfs-understanding-filesystem-usage" title="Enis Söztutar. HBase and HDFS: Understanding filesystem usage in HBase. HBaseCon 2013">HBase and HDFS: Understanding filesystem usage in HBase</a>,” at <em>HBaseCon</em>, June 2013.</p>

<p>[5] Todd Lipcon:
“<a href="http://blog.cloudera.com/blog/2011/02/avoiding-full-gcs-in-hbase-with-memstore-local-allocation-buffers-part-1/" title="Todd Lipcon. Avoiding Full GCs in Apache HBase with MemStore-Local Allocation Buffers: Part 1. 2011">Avoiding Full GCs in Apache HBase with MemStore-Local Allocation Buffers: Part 1</a>,”
blog.cloudera.com, 24 February 2011.</p>

<p>[6] Martin Thompson: “<a href="http://mechanical-sympathy.blogspot.co.uk/2013/07/java-garbage-collection-distilled.html" title="Martin Thompson. Java Garbage Collection Distilled. 2013">Java Garbage Collection Distilled</a>,”
mechanical-sympathy.blogspot.co.uk, 16 July 2013.</p>

<p>[7] Peter Bailis and Kyle Kingsbury: “<a href="https://queue.acm.org/detail.cfm?id=2655736" title="P Bailis and K Kingsbury. The Network is Reliable. ACM Queue 12(7), 2014.">The Network is Reliable</a>,”
<em>ACM Queue</em>, volume 12, number 7, July 2014.
<a href="http://dx.doi.org/10.1145/2639988.2639988">doi:10.1145/2639988.2639988</a></p>

<p>[8] Mark Imbriaco: “<a href="https://github.com/blog/1364-downtime-last-saturday" title="Mark Imbriaco. Downtime last Saturday. 2012">Downtime last Saturday</a>,” github.com, 26 December 2012.</p>

<p>[9] Tushar Deepak Chandra and Sam Toueg:
“<a href="http://courses.csail.mit.edu/6.852/08/papers/CT96-JACM.pdf" title="TD Chandra and S Toueg. Unreliable Failure Detectors for Reliable Distributed Systems. JACM 43(2):225–267, 1996">Unreliable Failure Detectors for Reliable Distributed Systems</a>,”
<em>Journal of the ACM</em>, volume 43, number 2, pages 225–267, March 1996.
<a href="http://dx.doi.org/10.1145/226643.226647">doi:10.1145/226643.226647</a></p>

<p>[10] Michael J Fischer, Nancy Lynch, and Michael S Paterson:
“<a href="http://www.cs.princeton.edu/courses/archive/fall07/cos518/papers/flp.pdf" title="MJ Fischer, N Lynch, and MS Paterson. Impossibility of Distributed Consensus with One Faulty Process. JACM 32(2):374–382, 1985">Impossibility of Distributed Consensus with One Faulty Process</a>,”
<em>Journal of the ACM</em>, volume 32, number 2, pages 374–382, April 1985.
<a href="http://dx.doi.org/10.1145/3149.214121">doi:10.1145/3149.214121</a></p>

<p>[11] Maurice P Herlihy: “<a href="https://cs.brown.edu/~mph/Herlihy91/p124-herlihy.pdf" title="Maurice Herlihy. Wait-Free Synchronization. TOPLAS 13(1):124–149, 1991">Wait-Free Synchronization</a>,”
<em>ACM Transactions on Programming Languages and Systems</em>, volume 13, number 1, pages 124–149, January 1991.
<a href="http://dx.doi.org/10.1145/114005.102808">doi:10.1145/114005.102808</a></p>

<p>[12] Cynthia Dwork, Nancy Lynch, and Larry Stockmeyer:
“<a href="http://www.net.t-labs.tu-berlin.de/~petr/ADC-07/papers/DLS88.pdf" title="C Dwork, N Lynch, and L Stockmeyer. Consensus in the Presence of Partial Synchrony. JACM 35(2):288–323, 1988">Consensus in the Presence of Partial Synchrony</a>,”
<em>Journal of the ACM</em>, volume 35, number 2, pages 288–323, April 1988.
<a href="http://dx.doi.org/10.1145/42282.42283">doi:10.1145/42282.42283</a></p>

<p>[13] Christian Cachin, Rachid Guerraoui, and Luís Rodrigues:
<a href="http://www.distributedprogramming.net/" title="C Cachin, R Guerraoui, and L Rodrigues. Introduction to Reliable and Secure Distributed Programming, 2nd ed. Springer, 2011"><em>Introduction to Reliable and Secure Distributed Programming</em></a>,
Second Edition. Springer, February 2011. ISBN: 978-3-642-15259-7,
<a href="http://dx.doi.org/10.1007/978-3-642-15260-3">doi:10.1007/978-3-642-15260-3</a></p>


                ]]></content:encoded>
            </item>
        
    </channel>
</rss>
