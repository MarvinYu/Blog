<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
    xmlns:content="http://purl.org/rss/1.0/modules/content/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:atom="http://www.w3.org/2005/Atom"
    xmlns:sy="http://purl.org/rss/1.0/modules/syndication/">

    <channel>
        <title>Martin Kleppmann's blog</title>
        <atom:link href="http://martin.kleppmann.com/feed.rss" rel="self" type="application/rss+xml" />
        <link>http://martin.kleppmann.com/</link>
        <description>Entrepreneurship, web technology and the user experience</description>
        <lastBuildDate>Mon, 01 Oct 2012 15:27:48 PDT</lastBuildDate>
        <language>en</language>
        <sy:updatePeriod>hourly</sy:updatePeriod>
        <sy:updateFrequency>1</sy:updateFrequency>

        
            <item>
                <title>Rethinking caching in web apps</title>
                <link>http://martin.kleppmann.com/2012/10/01/rethinking-caching-in-web-apps.html</link>
                <comments>http://martin.kleppmann.com/2012/10/01/rethinking-caching-in-web-apps.html#disqus_thread</comments>
                <pubDate>Mon, 01 Oct 2012 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2012/10/01/rethinking-caching-in-web-apps.html</guid>
                
                <description><![CDATA[ Having spent a lot of the last few years worrying about the scalability of data-heavy applications like Rapportive, I have started to get the feeling that maybe we have all been &#8220;doing it wrong&#8221;. Maybe what we consider to be &#8220;state of the art&#8221; application architecture is actually holding us... ]]></description>
                <content:encoded><![CDATA[
                    <p>Having spent a lot of the last few years worrying about the scalability of data-heavy applications like <a href='http://rapportive.com/'>Rapportive</a>, I have started to get the feeling that maybe we have all been &#8220;doing it wrong&#8221;. Maybe what we consider to be &#8220;state of the art&#8221; application architecture is actually holding us back.</p>

<p>I don&#8217;t have a definitive answer for how we should be architecting things differently, but in this post I&#8217;d like to outline a few ideas that I have been fascinated by recently. My hope is that we can develop ways of better managing scale (in terms of complexity, volume of data and volume of traffic) while keeping our applications nimble, easy and safe to modify, test and iterate.</p>

<p>My biggest problem with web application architecture is how <strong>network communication concerns</strong> are often intermingled with <strong>business logic concerns</strong>. This makes it hard to rearrange the logic into new architectures, such as the precomputed cache architecture described below. In this post I explore why it important to be able to try new architectures for things like caching, and what it would take to achieve that flexibility.</p>

<h2 id='an_example'>An example</h2>

<p>To illustrate, consider the clich√©d Rails blogging engine example:</p>
<div class='highlight'><pre><code class='ruby'><span class='k'>class</span> <span class='nc'>Post</span> <span class='o'>&lt;</span> <span class='no'>ActiveRecord</span><span class='o'>::</span><span class='no'>Base</span>
  <span class='n'>attr_accessible</span> <span class='ss'>:title</span><span class='p'>,</span> <span class='ss'>:content</span><span class='p'>,</span> <span class='ss'>:author</span>
  <span class='n'>has_many</span> <span class='ss'>:comments</span>
<span class='k'>end</span>

<span class='k'>class</span> <span class='nc'>Comment</span> <span class='o'>&lt;</span> <span class='no'>ActiveRecord</span><span class='o'>::</span><span class='no'>Base</span>
  <span class='n'>attr_accessible</span> <span class='ss'>:content</span><span class='p'>,</span> <span class='ss'>:author</span>
  <span class='n'>belongs_to</span> <span class='ss'>:post</span>
<span class='k'>end</span>

<span class='k'>class</span> <span class='nc'>PostsController</span> <span class='o'>&lt;</span> <span class='no'>ApplicationController</span>
  <span class='k'>def</span> <span class='nf'>show</span>
    <span class='vi'>@post</span> <span class='o'>=</span> <span class='no'>Post</span><span class='o'>.</span><span class='n'>find</span><span class='p'>(</span><span class='n'>params</span><span class='o'>[</span><span class='ss'>:id</span><span class='o'>]</span><span class='p'>)</span>
    <span class='n'>respond_to</span> <span class='k'>do</span> <span class='o'>|</span><span class='nb'>format</span><span class='o'>|</span>
      <span class='nb'>format</span><span class='o'>.</span><span class='n'>html</span>  <span class='c1'># show.html.erb</span>
      <span class='nb'>format</span><span class='o'>.</span><span class='n'>json</span>  <span class='p'>{</span> <span class='n'>render</span> <span class='ss'>:json</span> <span class='o'>=&gt;</span> <span class='vi'>@post</span> <span class='p'>}</span>
    <span class='k'>end</span>
  <span class='k'>end</span>
<span class='k'>end</span>

<span class='c1'># posts/show.html.erb:</span>
</code></pre>
</div>
<p><div class='highlight'><pre><code class='rhtml'><span class='nt'>&lt;h1&gt;</span><span class='cp'>&lt;%=</span> <span class='vi'>@post</span><span class='o'>.</span><span class='n'>title</span> <span class='cp'>%&gt;</span><span class='nt'>&lt;/h1&gt;</span>
<span class='nt'>&lt;p</span> <span class='na'>class=</span><span class='s'>&quot;author&quot;</span><span class='nt'>&gt;</span>By <span class='cp'>&lt;%=</span> <span class='vi'>@post</span><span class='o'>.</span><span class='n'>author</span> <span class='cp'>%&gt;</span><span class='nt'>&lt;/p&gt;</span>
<span class='nt'>&lt;div</span> <span class='na'>class=</span><span class='s'>&quot;content&quot;</span><span class='nt'>&gt;</span>
  <span class='cp'>&lt;%=</span> <span class='n'>simple_format</span><span class='p'>(</span><span class='vi'>@post</span><span class='o'>.</span><span class='n'>content</span><span class='p'>)</span> <span class='cp'>%&gt;</span>
<span class='nt'>&lt;/div&gt;</span>
<span class='nt'>&lt;h2&gt;</span>Comments<span class='nt'>&lt;/h2&gt;</span>
<span class='nt'>&lt;ul</span> <span class='na'>class=</span><span class='s'>&quot;comments&quot;</span><span class='nt'>&gt;</span>
  <span class='cp'>&lt;%</span> <span class='vi'>@post</span><span class='o'>.</span><span class='n'>comments</span><span class='o'>.</span><span class='n'>each</span> <span class='k'>do</span> <span class='o'>|</span><span class='n'>comment</span><span class='o'>|</span> <span class='cp'>%&gt;</span>
    <span class='nt'>&lt;li&gt;</span>
      <span class='nt'>&lt;blockquote&gt;</span><span class='cp'>&lt;%=</span> <span class='n'>simple_format</span><span class='p'>(</span><span class='n'>comment</span><span class='o'>.</span><span class='n'>content</span><span class='p'>)</span> <span class='cp'>%&gt;</span><span class='nt'>&lt;/blockquote&gt;</span>
      <span class='nt'>&lt;p</span> <span class='na'>class=</span><span class='s'>&quot;author&quot;</span><span class='nt'>&gt;</span><span class='cp'>&lt;%=</span> <span class='n'>comment</span><span class='o'>.</span><span class='n'>author</span> <span class='cp'>%&gt;</span><span class='nt'>&lt;/p&gt;</span>
    <span class='nt'>&lt;/li&gt;</span>
  <span class='cp'>&lt;%</span> <span class='k'>end</span> <span class='cp'>%&gt;</span>
<span class='nt'>&lt;/ul&gt;</span>
</code></pre>
</div></p>

<p>Pretty good code by various standards, but it has always irked me a bit that I can&#8217;t see where the network communication (i.e. making database queries) is happening. When I look at that <code>Post.find</code> in the controller, I can guess that probabably translates into a <code>SELECT * FROM posts WHERE id = ?</code> internally &#8211; unless the same query was already made recently, and ActiveRecord cached the result. And another database query of the form <code>SELECT * FROM comments WHERE post_id = ?</code> might be made as a result of the <code>@post.comments</code> call in the template. Or maybe the comments were already previously loaded by some model logic, and then cached? Or someone decided to eagerly load comments with the original post? Who knows.</p>

<p>The execution flow for a MVC framework request like <code>PostsController#show</code> probably looks something like this:</p>
<p><a href='http://martin.kleppmann.com/2012/10/architecture-high-01.png'><img alt='Typical MVC request flow' height='119' src='http://martin.kleppmann.com/2012/10/architecture-01.png' width='550' /></a></p>
<p>Of course it is deliberately designed that way. Your template and your controller shouldn&#8217;t have to worry about database queries &#8212; those are encapsulated by the model for many good reasons. I am violating abstraction by even thinking about the database whilst I&#8217;m in the template code! I should just think of my models as pure, beautiful pieces of application state. How that state gets loaded from a database is a matter that only the models need to worry about.</p>

<h2 id='adding_complexity'>Adding complexity</h2>

<p>In the example above, the amount of logic in the model is minimal, but it typically doesn&#8217;t stay that way for long. As the application becomes popular (say, the blogging engine morphs to become Twitter, Tumblr, Reddit or Pinterest), all sorts of stuff gets added: memcache to stop the database from falling over, spam filtering, analytics features, email sending, notifications, A/B testing, more memcache, premium features, ads, upsells for viral loops, more analytics, even more memcache. As the application inevitably grows in complexity, the big monolithic beast is split into several smaller services, and different services end up being maintained by different teams.</p>

<p>As all of this is happening, the programming model typically stays the same: each service in the architecture (which may be a user-facing web server, or an internal service e.g. for user authentication) communicates over the network with a bunch of other nodes (memcached instances, database servers, other application services), processes and combines the data in some way, and then serves it out to a client.</p>

<p>That processing and combining of data we can abstractly call &#8220;business logic&#8221;. It might be trivially simple, or it might involve half a million lines of parsing, rendering or machine learning code. It might behave differently depending on which A/B test bucket the user is in. It might deal with hundreds of hairy edge cases. Whatever.</p>

<p>At the root of the matter, business logic should be a <a href='http://en.wikipedia.org/wiki/Pure_function'>pure function</a>. It takes a bunch of inputs (request parameters from the client, data stored in various databases and caches, responses from various other services) and produces a bunch of outputs (data to return to the client, data to write back to various databases and caches). It is usually deterministic: given the same inputs, the business logic should produce exactly the same output again. It is also stateless: any data that is required to produce the output or to make a decision has to be provided as an input.</p>

<p>By contrast, the network communication logic is all about &#8216;wiring&#8217;. It may end up having a lot of complexity in its own right: sending requests to the right node of a sharded database, retrying failed requests with exponential back-off, making requests to different services in parallel, cross-datacenter failover, service authentication, etc. But the network communication logic ought to be general-purpose and completely independent of your application&#8217;s business logic.</p>

<p>Both business logic and network communication logic are needed to build a service. But how do you combine the two into a single process? Most commonly, we build abstractions for each type of logic, hiding the gory implementation details. Much like in the blog example above, you end up calling a method somewhere inside the business logic, not really knowing or caring whether it will immediately return a value that the object has already computed, or whether it will talk to another process on the same machine, or load the value from some remote cache, or make a query on a database cluster somewhere.</p>

<p>It&#8217;s good that the business logic doesn&#8217;t need to worry about how and when the communication happens. And it&#8217;s good that the communication logic is general-purpose and not polluted with application-specific concerns. But I think it&#8217;s problematic that network communication may happen somewhere deeply inside a business logic call stack. Let me try to explain why.</p>

<h2 id='precomputed_caches'>Precomputed caches</h2>

<p>As your volume of data and your number of users grow, database access often becomes a bottleneck (there are more queries competing for I/O, and each query takes longer when there&#8217;s more data). The standard answer to the problem is of course caching. You can cache at many different levels: an individual database row, or a model object generated by combining several sources, or even an entire HTML page ready to serve to a client. I will focus on the mid-to-high-level caches, where the raw data has gone through some sort of business logic before it ends up in the cache.</p>

<p>Most commonly, caches are set up in read-through style: on every query, you first check the cache, and return the value from the cache if it&#8217;s a hit; otherwise it&#8217;s a miss, so you do whatever is required to generate the value (query databases, apply business logic, perform voodoo), and return it to the client whilst also storing it in the cache for next time. As long as you can generate the value on the fly in a reasonable time, this works pretty well.</p>

<p>I will gloss over cache invalidation and expiry for now, and return to it below.</p>

<p>The most apparent problem with a read-through cache is that the first time a value is requested, it&#8217;s always slow. (And if your cache is too small to hold the entire dataset, rarely accessed values will get evicted and thus be slow every time.) That may or may not be a problem for you. One reason why it may be a problem is that on many sites, the first client to request a given page is typically the Googlebot, and Google <a href='http://www.mattcutts.com/blog/site-speed/'>penalises</a> slow sites in rankings. So if you have the kind of site where Google juice is lifeblood, then your SEO guys may tell you that a read-through cache is not good enough.</p>

<p>So, can you make sure that the data is in the cache even before it is requested for the first time? Well, if your dataset isn&#8217;t too huge, you can actually <strong>precompute every possible cache entry</strong>, put them in a big distributed key-value store and serve them with minimal latency. That has a great advantage: cache misses no longer exist. If you&#8217;ve precomputed every possible cache entry, and a key isn&#8217;t in the cache, you can be sure that there&#8217;s no data for that key.</p>

<p>If that sounds crazy to you, consider these points:</p>

<ul>
<li>A database index is a special case of a precomputed cache. For every value you might want to search for, the index tells you where to find occurrences of that value. If it&#8217;s not in the index, it&#8217;s not in the database. The initial index creation is a one-off batch job, and thereafter the database automatically keeps it in sync with the raw data. Yes, databases have been doing this for a long time.</li>

<li>With Hadoop you can process terabytes of data without breaking a sweat. That is truly awesome power.</li>

<li>There are several datastores that allow you to precompute their files in Hadoop, which makes them very well suited for serving the cache that you precomputed. We are currently using <a href='http://www.project-voldemort.com/voldemort/'>Voldemort</a> in read-only mode (<a href='http://static.usenix.org/events/fast12/tech/full_papers/Sumbaly.pdf'>research paper</a>), but <a href='http://hbase.apache.org/book/arch.bulk.load.html'>HBase</a> and <a href='https://github.com/nathanmarz/elephantdb'>ElephantDB</a> can do this too.</li>

<li>If you&#8217;re currently storing data in denormalized form (to avoid joins on read queries), you can stop doing that. You can keep your primary database in a very clean, normalized schema, and any caches you derive from it can denormalize the data to your heart&#8217;s content. This gives you the best of both worlds.</li>
</ul>

<h2 id='separating_communication_from_business_logic'>Separating communication from business logic</h2>

<p>Ok, say you&#8217;ve decided that you want to precompute a cache in Hadoop. As we&#8217;ve not yet addressed cache invalidation (see below), let&#8217;s just say you&#8217;re going to rebuild the entire cache once a day. That means the data you serve out of the cache will be stale, out of date by up to a day, but that&#8217;s still acceptable for some applications.</p>

<p>The first step is to get your raw data into HDFS. That&#8217;s not hard, assuming you have daily database backups: you can take your existing backup, transform it into a more MapReduce-friendly format such as <a href='http://avro.apache.org/'>Avro</a>, and write it straight to HDFS. Do that with all your production databases and you&#8217;ve got a fantastic resource to work with in Hadoop.</p>

<p>Now, to build your precomputed cache, you need to apply the same business logic to the same data as you would in an uncached service that does it on the fly. As described above, your business logic takes as input the request parameters from the user and any data that is loaded from databases or services in order to serve that request. If you have all that data in HDFS, and you can work out all possible request parameters, then in theory, you should be able to take your existing business logic implementation and run it in Hadoop.</p>

<p>Business logic can be very complex, so you should probably aim to reuse the existing implementation rather than rewriting it. But doing so requires untangling the real business logic from all the network communication logic.</p>

<p>When your business logic is running as a service processing individual requests, you&#8217;re used to making several small requests to databases, caches or other services as part of generating a response (see the blog example above). Those small requests constitute gathering all the inputs needed by the business logic in order to produce its output (e.g. a rendered HTML page).</p>

<p>But when you&#8217;re running in Hadoop, this is all turned on its head. You don&#8217;t want to be making individual random-access requests to data, because that would be an order of magnitude too slow. Instead you need to use MapReduce to gather all the inputs for one particular evaluation of the business logic into one place, and then run the business logic given those inputs without any network communication. Rather than the business logic <em>pulling</em> together all the bits of data it needs in order to produce a response, the MapReduce job has already gathered all the data it knows the business logic is going to need, and <em>pushes</em> it into the business logic function.</p>

<p>Let&#8217;s use the blog example to make this more concrete. The data dependency is fairly simple: when the blog post <code>params[:id]</code> is requested, we require the row in the <code>posts</code> table whose <code>id</code> column matches the requested post, and we require all the rows in the <code>comments</code> table whose <code>post_id</code> column matches the requested post. If the <code>posts</code> and <code>comments</code> tables are in HDFS, it&#8217;s a very simple MapReduce job to group together the post with <code>id = x</code> and all the comments with <code>post_id = x</code>.</p>

<p>We can then use a stub database implementation to feed those database rows into the existing <code>Post</code> and <code>Comment</code> model objects. That way we can make the models think that they loaded the data from a database, even though actually we had already gathered all the data we knew it was going to need. The model objects can keep doing their job as normally, and the output they produce can be written straight to the cache.</p>

<p>By this point, two problems should be painfully clear:</p>

<ul>
<li>How does the MapReduce job know what inputs the business logic is going to need in order to work?</li>

<li>OMG, implementing stub database drivers, isn&#8217;t that a bit too much pain for limited gain? (Note that in testing frameworks it&#8217;s not unusual to stub out your database, so that you can run your unit tests without a real database. Still, it&#8217;s non-trivial and annoying.)</li>
</ul>

<p>Both problems have the same cause, namely that the network communication logic is triggered from deep inside the business logic.</p>

<h2 id='data_dependencies'>Data dependencies</h2>

<p>When you look at the business logic in the light of precomputing a cache, it seems like the following pattern would make more sense:</p>

<ol>
<li>Declare your data dependencies: &#8220;if you want me to render the blog post with ID <code>x</code>, I&#8217;m going to need the row in the <code>posts</code> table with <code>id = x</code>, and also all the rows in the <code>comments</code> table with <code>post_id = x</code>&#8221;.</li>

<li>Let the communication logic deal with resolving those dependencies. If you&#8217;re running as a normal web app, that means making database (or memcache) queries to one or more databases, and maybe talking to other services. If you&#8217;re running in Hadoop, it means configuring the MapReduce job to group together all the pieces of data on which the business logic depends.</li>

<li>Once all the dependencies have been loaded, the business logic is now a pure function, deterministic and side-effect-free, that produces our desired output. It can perform whatever complicated computation it needs to, but it&#8217;s not allowed access to the network or data stores that weren&#8217;t declared as dependencies up front.</li>
</ol>

<p>This separation would make application architecture very different from the way it is commonly done today. I think this new style would have several big advantages:</p>

<ul>
<li>By removing the assumption that the business logic is handling one request at a time, it becomes much easier to run the business logic in completely different contexts, such as in a batch job to precompute a cache. (No more stubbing out database drivers.)</li>

<li>Testing becomes much easier. All the tricky business logic for which you want to write unit tests is now just a function with a bunch of inputs and a bunch of outputs. You can easily vary what you put in, and easily check that the right thing comes out. Again, no more stubbing out the database.</li>

<li>The network communication logic can become a lot more helpful. For example, it can make several queries in parallel without burdening the business logic with a lot of complicated concurrency stuff, and it can deduplicate similar requests.</li>

<li>Because the data dependencies are very clearly and explicitly modelled, the system becomes easier to understand, and it becomes easier to move modules around, split a big monolithic beast into smaller services, or combine smaller services into bigger, logical units.</li>
</ul>

<p>I hope you agree that this is a very exciting prospect. But is it practical?</p>

<p>In most cases, I think it would not be very hard to make business logic pure (i.e. stop making database queries from deep within) &#8212; it&#8217;s mostly a matter of refactoring. I have done it to substantial chunks of the Rapportive code base, and it was a bit tedious but perfectly doable. And the network communication logic wouldn&#8217;t have to change much at all.</p>

<p>The problem of making this architecture practical hinges on having a good mechanism for declaring data dependencies. The idea is not new &#8212; for instance, LinkedIn have an internal framework for resolving data dependencies that queries several services in parallel &#8212; but I&#8217;ve not yet seen a language or framework that really gets to the heart of the problem.</p>

<p>Adapting the blog example above, this is what I imagine such an architecture would look like:</p>
<p><a href='http://martin.kleppmann.com/2012/10/architecture-high-02.png'><img alt='Concept for using a dependency resolver' height='119' src='http://martin.kleppmann.com/2012/10/architecture-02.png' width='550' /></a></p>
<p>We still have models, and they are still used as encapsulations of state, but they are no longer wrappers around a database connection. Instead, the dependency resolver can take care of the messy business of talking to the database; the models are pure and can focus on the business logic. The models don&#8217;t care whether they are instantiated in a web app or in a Hadoop cluster, and they don&#8217;t care whether the data was loaded from a SQL database or from HDFS. That&#8217;s the way it should be.</p>

<p>In my spare time I have started working on a language called <strong>Flowquery</strong> (don&#8217;t bother searching, there&#8217;s nothing online yet) to solve the problem of declaring data dependencies. If I can figure it out, it should make precomputed caches and all the good things above very easy. But it&#8217;s not there yet, so I don&#8217;t want to oversell it.</p>

<p>But wait, there is one more thing&#8230;</p>

<h2 id='cache_invalidation'>Cache invalidation</h2>

<blockquote>
<p>There are only two hard things in Computer Science: cache invalidation and naming things. &#8212; <a href='http://martinfowler.com/bliki/TwoHardThings.html'>Phil Karlton</a></p>
</blockquote>

<p>How important is it that the data in your cache is up-to-date and consistent with your &#8220;source of truth&#8221; database? The answer depends on the application and the circumstances. For example, if the user edits their own data, you almost certainly want to show them an up-to-date version of their own data post-editing, otherwise they will assume that your app is broken. But you might be able to get away with showing stale data to other users for a while. For data that is not directly edited by users, stale data may always be ok.</p>

<p>If staleness is acceptable, caching is fairly simple: on a read-through cache you set an expiry time on a cache key, and when that time is reached, the entry falls out of the cache. On a precomputed cache you do nothing, and just wait until the next time you recompute the entire thing.</p>

<p>In cases where greater consistency is required, you have to explicitly invalidate cache entries when the original data changes. If just one cache key is affected by a change, you can write-through to that cache key when the &#8220;source of truth&#8221; database is updated. If many keys may be affected, you can use <a href='http://37signals.com/svn/posts/3113-how-key-based-cache-expiration-works'>generational caching</a> and <a href='https://groups.google.com/forum/#!msg/memcached/OiScvRbGaU8/C1vny7DiGakJ'>clever generalisations thereof</a>. Whatever technique you use, it usually ends up being a lot of manually written, fiddly and error-prone code. Not a great joy to work with, hence the terribly clich√©d quote above.</p>

<p>But&#8230; observe the following: in our efforts to separate pure business logic from network communication logic, we decided that we needed to explicitly model the data dependencies, and only data sources declared there are permitted as inputs to the business logic. In other words, the data dependency framework knows exactly which pieces of data are required in order to generate a particular piece of output &#8212; and conversely, when a piece of (input) data changes, it can know exactly which outputs (cache entries) may be affected by the change!</p>

<p>This means that if we have a real-time feed of changes to the underlying databases, we can feed it into a stream processing framework like <a href='http://storm-project.net/'>Storm</a>, run the data dependency analysis in reverse on every change, recompute the business logic for each output affected by the change in input, and write the results to another datastore. This store sits alongside the precomputed cache we generated in a batch process in Hadoop. When you want to query the cache, check both the output of the batch process and the output of the stream process. If the stream process has generated more recent data, use that, otherwise use the batch process output.</p>

<p>If you&#8217;ve been following recent news in Big Data, you may recognise this as an application of Nathan Marz&#8217; <a href='http://nathanmarz.com/blog/how-to-beat-the-cap-theorem.html'>lambda architecture</a> (described in detail in his <a href='http://www.manning.com/marz/'>upcoming book</a>). I cannot thank Nathan enough for his amazing work in this area.</p>

<p>In this architecture, you get the benefits of a precomputed cache (every request is fast, including the first one), it keeps itself up-to-date with the underlying data, and because you have already declared your data dependencies, you don&#8217;t need to manually write cache invalidation code! The same dependency declaration can be used in three different ways:</p>

<ol>
<li>In &#8216;online&#8217; mode in a service or web app, for driving the network communication logic in order to make all the required queries and requests in order to serve an incoming request, and to help with read-through caching.</li>

<li>In &#8216;offline&#8217; mode in Hadoop, to configure a MapReduce pipeline that brings together all the required data in order to run it through the business logic and generate a precomputed cache of all possible queries.</li>

<li>In &#8216;nearline&#8217; mode in Storm, to configure a stream processing topology that tracks changes to the underlying data, determines which cache keys need to be invalidated, and recomputes the cache values for those keys using the business logic.</li>
</ol>

<p>I am designing Flowquery so that it can be used in all three modes &#8212; you should be able to write your data dependencies just once, and let the framework take care of bringing all the necessary data together so that the business logic can act on it.</p>

<p>My hope is to make caching and cache invalidation as simple as database indexes. You declare an index once, the database runs a one-off batch job to build the index, and thereafter automatically keeps it up-to-date as the table contents change. It&#8217;s so simple to use that we don&#8217;t even think about it, and that&#8217;s what we should be aiming for in the realm of caching.</p>

<p>The project is still at a very early stage, but hopefully I&#8217;ll be posting more about it as it progresses. If you&#8217;d like to hear more, please <a href='http://eepurl.com/csJmf'>leave your email address</a> and I&#8217;ll send you a brief note when I post more. Or you can follow me on <a href='https://twitter.com/martinkl'>Twitter</a> or <a href='https://alpha.app.net/martinkl'>App.net</a>.</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>Java's hashCode is not safe for distributed systems</title>
                <link>http://martin.kleppmann.com/2012/06/18/java-hashcode-unsafe-for-distributed-systems.html</link>
                <comments>http://martin.kleppmann.com/2012/06/18/java-hashcode-unsafe-for-distributed-systems.html#disqus_thread</comments>
                <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2012/06/18/java-hashcode-unsafe-for-distributed-systems.html</guid>
                
                <description><![CDATA[ As you probably know, hash functions serve many different purposes: Network and storage systems use them (in the guise of checksums) to detect accidental corruption of data. Crypographic systems use them to detect malicious corruption of data and to implement signatures. Password authentication systems use them to make it harder... ]]></description>
                <content:encoded><![CDATA[
                    <p>As you probably know, hash functions serve many different purposes:</p>

<ol>
<li>Network and storage systems use them (in the guise of checksums) to detect accidental corruption of data.</li>

<li>Crypographic systems use them to detect malicious corruption of data and to implement signatures.</li>

<li>Password authentication systems use them to make it harder to extract plaintext passwords from a database.</li>

<li>Programming languages use them for hash maps, to determine in which hash bucket a key is placed.</li>

<li>Distributed systems use them to determine which worker in a cluster should handle a part of a large job.</li>
</ol>

<p>All those purposes have different requirements, and different hash functions exist for the various purposes. For example, <a href='http://en.wikipedia.org/wiki/Cyclic_redundancy_check'>CRC32</a> is fine for detecting bit corruption in Ethernet, as it&#8217;s really fast and easy to implement in hardware, but it&#8217;s useless for cryptographic purposes. <a href='http://tools.ietf.org/html/rfc3174'>SHA-1</a> is fine for protecting the integrity of a message against attackers, as it&#8217;s cryptographically secure and also reasonably fast to compute; but if you&#8217;re storing passwords, you&#8217;re probably better off with something like <a href='http://codahale.com/how-to-safely-store-a-password/'>bcrypt</a>, which is <em>deliberately</em> slow in order to make brute-force attacks harder.</p>

<p>Anyway, that&#8217;s all old news. Today I want to talk about points 4 and 5, and why they are also very different from each other.</p>

<p><strong>Hashes for hash tables</strong></p>

<p>We use hash tables (dictionaries) in programming languages all the time without thinking twice. When you insert an item into a hash table, the language computes a hash code (an integer) for the key, uses that number to choose a bucket in the hash table (typically <code>mod n</code> for a table of size <code>n</code>), and then puts the key and value in that bucket in the table. If there&#8217;s already a value there (a hash collision), a linked list typically takes care of storing the keys and values within the same hash bucket. In Ruby, for example:</p>
<pre><span class='ansi1 ansi31'>$</span> ruby --version
ruby 1.8.7 (2011-06-30 patchlevel 352) [i686-darwin11.0.0]

<span class='ansi1 ansi31'>$</span> pry
[1] pry(main)&gt; hash_table = {<span class='ansi1 ansi32'>'</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>'</span> =&gt; <span class='ansi1 ansi34'>42</span>}
=&gt; {<span class='ansi1 ansi32'>&quot;</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>&quot;</span>=&gt;<span class='ansi1 ansi34'>42</span>}
[2] pry(main)&gt; <span class='ansi1 ansi32'>'</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>'</span>.hash
=&gt; <span class='ansi1 ansi34'>-1246806696</span>
[3] pry(main)&gt; <span class='ansi1 ansi32'>'</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>'</span>.hash
=&gt; <span class='ansi1 ansi34'>-1246806696</span>
[4] pry(main)&gt; ^D

<span class='ansi1 ansi31'>$</span> pry
[1] pry(main)&gt; <span class='ansi1 ansi32'>'</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>'</span>.hash
=&gt; <span class='ansi1 ansi34'>-1246806696</span>
[2] pry(main)&gt; <span class='ansi1 ansi32'>&quot;</span><span class='ansi32'>don't panic</span><span class='ansi1 ansi32'>&quot;</span>.hash
=&gt; <span class='ansi1 ansi34'>-464783873</span>
[3] pry(main)&gt; ^D
</pre>
<p>When you add the key <code>&#39;answer&#39;</code> to the hash table, Ruby internally calls the <code>#hash</code> method on that string object. The method returns an arbitrary number, and as you see above, the number is always the same for the same string. A different string usually has a different hash code. Occasionally you might get two keys with the same hash code, but it&#8217;s extremely unlikely that you get a large number of collisions in normal operation.</p>

<p>The problem with the example above: when I quit Ruby (<code>^D</code>) and start it again, and compute the hash for the same string, I still get the same result. <em>But why is that a problem,</em> you say, <em>isn&#8217;t that what a hash function is supposed to do?</em> &#8211; Well, the problem is that I can now put on my evil genius hat, and generate a list of strings that all have the same hash code:</p>
<pre><span class='ansi1 ansi31'>$</span> pry
[1] pry(main)&gt; <span class='ansi1 ansi32'>&quot;</span><span class='ansi32'>a</span><span class='ansi1 ansi32'>&quot;</span>.hash
=&gt; <span class='ansi1 ansi34'>100</span>
[2] pry(main)&gt; <span class='ansi1 ansi32'>&quot;\0</span><span class='ansi32'>a</span><span class='ansi1 ansi32'>&quot;</span>.hash
=&gt; <span class='ansi1 ansi34'>100</span>
[3] pry(main)&gt; <span class='ansi1 ansi32'>&quot;\0\0</span><span class='ansi32'>a</span><span class='ansi1 ansi32'>&quot;</span>.hash
=&gt; <span class='ansi1 ansi34'>100</span>
[4] pry(main)&gt; <span class='ansi1 ansi32'>&quot;\0\0\0</span><span class='ansi32'>a</span><span class='ansi1 ansi32'>&quot;</span>.hash
=&gt; <span class='ansi1 ansi34'>100</span>
[5] pry(main)&gt; <span class='ansi1 ansi32'>&quot;\0\0\0\0</span><span class='ansi32'>a</span><span class='ansi1 ansi32'>&quot;</span>.hash
=&gt; <span class='ansi1 ansi34'>100</span>
[6] pry(main)&gt; <span class='ansi1 ansi32'>&quot;\0\0\0\0\0</span><span class='ansi32'>a</span><span class='ansi1 ansi32'>&quot;</span>.hash
=&gt; <span class='ansi1 ansi34'>100</span>
</pre>
<p>Any server in the world running the same version of Ruby will get the same hash values. This means that I can send a specially crafted web request to your server, in which the request parameters contain lots of those strings with the same hash code. Your web framework will probably parse the parameters into a hash table, and they will all end up in the same hash bucket, no matter how big you make the hash table. Whenever you want to access the parameters, you now have to iterate over a long list of hash collisions, and your swift O(1) hash table lookup is suddenly a crawling slow O(n).</p>

<p>I just need to make a small number of these evil requests to your server and I&#8217;ve brought it to its knees. This type of denial of service attack was already <a href='http://www.cs.rice.edu/~scrosby/hash/CrosbyWallach_UsenixSec2003.pdf'>described</a> back in 2003, but it only became widely known last year, when Java, Ruby, Python, PHP and Node.js all suddenly <a href='http://www.ocert.org/advisories/ocert-2011-003.html'>scrambled</a> to fix the issue.</p>

<p>The solution is for the hash code to be consistent within one process, but to be different for different processes. For example, here is a more recent version in Ruby, in which the flaw is fixed:</p>
<pre><span class='ansi1 ansi31'>$</span> ruby --version
ruby 1.9.3p125 (2012-02-16 revision 34643) [x86_64-darwin11.3.0]

<span class='ansi1 ansi31'>$</span> pry
[1] pry(main)&gt; <span class='ansi1 ansi32'>'</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>'</span>.hash
=&gt; <span class='ansi1 ansi34'>968518855724416885</span>
[2] pry(main)&gt; <span class='ansi1 ansi32'>'</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>'</span>.hash
=&gt; <span class='ansi1 ansi34'>968518855724416885</span>
[3] pry(main)&gt; ^D

<span class='ansi1 ansi31'>$</span> pry
[1] pry(main)&gt; <span class='ansi1 ansi32'>'</span><span class='ansi32'>answer</span><span class='ansi1 ansi32'>'</span>.hash
=&gt; <span class='ansi1 ansi34'>-150894376904371785</span>
[2] pry(main)&gt; ^D
</pre>
<p>When I quit Ruby and start it again, and ask for the hash code of the same string, I get a completely different answer. This is obviously not what you want for cryptographic hashes or checksums, since it would render them useless &#8212; but for hash tables, it&#8217;s exactly right.</p>

<p><strong>Hashes for distributed systems</strong></p>

<p>Now let&#8217;s talk about distributed systems &#8212; systems in which you have more than process, probably on more than one machine, and they are talking to each other. If you have something that&#8217;s too big to fit on one machine (too much data to fit on one machine&#8217;s disks, too many requests to be handled by one machine&#8217;s CPUs, etc), you need to spread it across multiple machines.</p>

<p>How do you know which machine to use for a given request? Unless you have some application-specific partitioning that makes more sense, a hash function is a simple and effective solution: hash the name of the thing you&#8217;re requesting, mod number of servers, and that&#8217;s your server number. (Though if you ever want to change the number of machines, <a href='http://michaelnielsen.org/blog/consistent-hashing/'>consistent hashing</a> is probably a better bet.)</p>

<p>For this setup you obviously don&#8217;t want a hash function in which different processes may compute different hash codes for the same value, because you&#8217;d end up routing requests to the wrong server. You can&#8217;t use the same hash function as the programming language uses for hash tables.</p>

<p>Unfortunately, this is <a href='http://squarecog.wordpress.com/2011/02/20/hadoop-requires-stable-hashcode-implementations/'>exactly</a> what Hadoop does. <a href='http://storm-project.net/'>Storm</a>, a stream processing framework, <a href='https://github.com/nathanmarz/storm/blob/33a2ea5/src/clj/backtype/storm/tuple.clj#L7-8'>does too</a>. Both use the Java Virtual Machine&#8217;s <a href='http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()'>Object.hashCode()</a> method.</p>

<p>I understand the use of <code>hashCode()</code> &#8212; it&#8217;s very tempting. On strings, numbers and collection classes, <code>hashCode()</code> always returns a consistent value, apparently even across different JVM vendors. It&#8217;s like that despite the <a href='http://docs.oracle.com/javase/7/docs/api/java/lang/Object.html#hashCode()'>documentation</a> for <code>hashCode()</code> explicitly <em>not</em> guaranteeing consistency across different processes:</p>

<blockquote>
<p>Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. <em>This integer need not remain consistent from one execution of an application to another execution of the same application.</em></p>
</blockquote>

<p>And once in a while, a bold library comes along that actually returns different <code>hashCode()</code> values in different processes &#8211; <a href='http://code.google.com/p/protobuf/'>Protocol Buffers</a>, for example &#8211; and <a href='https://groups.google.com/forum/?fromgroups#!topic/protobuf/MCk1moyWgIk'>people get quite confused</a>.</p>

<p>The problem is that although the documentation says <code>hashCode()</code> doesn&#8217;t provide a consistency guarantee, the Java standard library behaves as if it <em>did</em> provide the guarantee. People start relying on it, and since backwards-compatibility is rated so highly in the Java community, it will probably never ever be changed, even though the documentation would allow it to be changed. So the JVM gets the worst of both worlds: a hash table implementation that is open to DoS attacks, but also a hash function that can&#8217;t always safely be used for communication between processes. :(</p>

<p><strong>Therefore&#8230;</strong></p>

<p>So what I&#8217;d like to ask for is this: if you&#8217;re building a distributed framework based on the JVM, <strong>please don&#8217;t</strong> use Java&#8217;s <code>hashCode()</code> for anything that needs to work across different processes. Because it&#8217;ll look like it works fine when you use it with strings and numbers, and then someday a brave soul will use (e.g.) a protocol buffers object, and then spend days banging their head against a wall trying to figure out why messages are getting sent to the wrong servers.</p>

<p>What should you use instead? First, you probably need to serialize the object to a byte stream (which you need to do anyway if you&#8217;re going to send it over the network). If you&#8217;re using a serialization that always maps the same values to the same sequence of bytes, you can just hash that byte stream. A cryptographic hash such as MD5 or SHA-1 would be ok for many cases, but might be a bit heavyweight if you&#8217;re dealing with a really high-throughput service. I&#8217;ve heard good things about <a href='http://code.google.com/p/smhasher/'>MurmurHash</a>, which is non-cryptographic but lightweight and claims to be well-behaved.</p>

<p>If your serialization doesn&#8217;t always produce the same sequence of bytes for a given value, then you can still define a hash function on the objects themselves. Just please don&#8217;t use <code>hashCode()</code>. It&#8217;s ok for in-process hash tables, but distributed systems are a different matter.</p>

<p>(Oh, and in case you were wondering: it looks like the web servers affected by Java&#8217;s hashCode collisions fixed the problem not by changing to a different hash function, but simply by limiting the number of parameters: <a href='http://svn.apache.org/viewvc/tomcat/tc7.0.x/trunk/java/org/apache/tomcat/util/http/Parameters.java?r1=1195977&amp;r2=1195976&amp;pathrev=1195977'>Tomcat</a>, <a href='https://github.com/eclipse/jetty.project/commit/085c79d7d6cfbccc02821ffdb64968593df3e0bf'>Jetty</a>.)</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>My FounderLY interview</title>
                <link>http://martin.kleppmann.com/2011/08/16/founderly-interview.html</link>
                <comments>http://martin.kleppmann.com/2011/08/16/founderly-interview.html#disqus_thread</comments>
                <pubDate>Tue, 16 Aug 2011 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2011/08/16/founderly-interview.html</guid>
                
                <description><![CDATA[ Matthew from FounderLY wondered what it would have been like to watch raw video footage of Steve Jobs, Bill Gates, and other tech founders during their formative years. So he&#8217;s been going around interviewing young startup founders, for posterity and for other founders&#8217; inspiration. A pretty interesting effort. A few... ]]></description>
                <content:encoded><![CDATA[
                    <p>Matthew from <a href='http://www.founderly.com/'>FounderLY</a> wondered what it would have been like to watch raw video footage of Steve Jobs, Bill Gates, and other tech founders during their formative years. So he&#8217;s been going around interviewing young startup founders, for posterity and for other founders&#8217; inspiration. A pretty interesting effort.</p>

<p>A few weeks ago he asked whether he could <a href='http://www.founderly.com/2011/07/martin-kleppmann-rapportive-1-of-2/'>interview me</a> for the site. Although it would be rather presumptious to put myself in the category of potential future Steve Jobses, I agreed.</p>

<p>So here you go &#8211; a tidily scripted set of questions from Matthew, and some chaotically unscripted stream-of-consciousness replies from me. The video comes in two parts, about 22 minutes in total, and a transcript is below.</p>
<iframe frameborder='0' height='309' src='http://player.vimeo.com/video/25790273?title=0&amp;byline=0&amp;portrait=0' width='549'>
  <a href='http://vimeo.com/25790273'>View on Vimeo</a>
</iframe>
<p><a href='http://vimeo.com/25790273'>Martin Kleppmann interview, part 1</a> from <a href='http://vimeo.com/founderly'>FounderLY</a> on <a href='http://vimeo.com'>Vimeo</a></p>
<iframe frameborder='0' height='309' src='http://player.vimeo.com/video/25790604?title=0&amp;byline=0&amp;portrait=0' width='549'>
  <a href='http://vimeo.com/25790604'>View on Vimeo</a>
</iframe>
<p><a href='http://vimeo.com/25790604'>Martin Kleppmann interview, part 2</a> from <a href='http://vimeo.com/founderly'>FounderLY</a> on <a href='http://vimeo.com'>Vimeo</a></p>

<p><strong>Transcript</strong></p>

<p><strong>Matthew Wise:</strong> Hi this is Matthew Wise with FounderLY.com. We empower entrepreneurs to have a voice and share their story with the world, enabling others to learn about building products and starting companies.</p>

<p>I&#8217;m really excited today because I&#8217;m here with Martin Kleppmann, founder of Rapportive. Rapportive shows you everything about your contacts inside your email box, enabling you to see who people are and where they are based, so that you can connect and collaborate over shared interests. So, Martin, we&#8217;d love you to give our audience a brief bio.</p>

<p><strong>Martin:</strong> Sure. I&#8217;m originally from Germany, which explains my weird accent, and then I went to the UK for several years to study computer science. That was in Cambridge. After that, I started a startup; it was called Go Test It, we made a tool for automated cross-browser testing of websites. That was pretty cool, and it was acquired a few years ago. After that, I was looking around for something new to do, and together with two friends we started Rapportive.</p>

<p>What we do now is to pull photos, job details from LinkedIn, recent tweets and all of this stuff into Gmail, and show it right there.</p>

<p><strong>Matthew:</strong> What makes Rapportive unique, who is it for and why are you so passionate about it?</p>

<p><strong>Martin:</strong> It&#8217;s really for people who do a lot of email, particularly emailing with people who you don&#8217;t really know well. If you only ever email with ten different people, then you wouldn&#8217;t need it ‚Äî but most of us, particularly startup founders, are constantly dealing with investors, outside advisors, users emailing us, potential customers, potential partners, people on emailing lists‚Ä¶ all of these people, we vaguely know who they are, but not really. And actually, it is really important that you build this personal contact with them, and get to know them personally.</p>

<p>Previously, when people got an email from someone, they would go and search Google, try to find their Twitter account, try to find them on LinkedIn, and this just takes a lot of time. And we&#8217;ve just automated all of that. The idea is that now, you can actually respond to people personally and build up that personal connection. It&#8217;s little things: even just being able to see the photo of someone in your email‚Ä¶ firstly, that&#8217;s a deep visceral connection: you connect much more with them than if you&#8217;re just looking at a wall of text; and also, if you meet them in real life, well, you&#8217;re much more likely to be able to recognise them. I think that makes your email a better place; it&#8217;s really excellent.</p>

<p><strong>Matthew:</strong> What are some of the technology and market trends that currently exist, and how do you see things developing in the future in your space?</p>

<p><strong>Martin:</strong> I&#8217;m not sure about the big trends. There are a lot of things, but they are all very subtle things. For example, people caring a lot about user experience, and we take that really seriously. We put ridiculous amounts of effort into making sure that stuff works really nicely.</p>

<p>Other things that are happening: we are having to deal with more and more people, and people expect that you don&#8217;t just get an automated stock reply, but that people actually engage with you personally. That&#8217;s the future, I think. We&#8217;ve already got that in one-to-one communication between individuals, but the big trend is that companies as a whole are starting to be more personal with the outside. They are no longer this corporate brand, this cold, anonymous thing, but you actually expect to be able to see the people behind that brand, and be able to engage with them directly and build a relationship. And those relationships are what matter, because‚Ä¶ if you&#8217;re just competing on price, your customers can just go somewhere else, but if you can build up a relationship with your customers, that&#8217;s really really powerful.</p>

<p>We think that&#8217;s what we are enabling, by giving you this social substrate for your communications.</p>

<p><strong>Matthew:</strong> Can you tell us what inspired you to start Rapportive? Was there an &#8220;aha&#8221; moment, or did market research lead you to the opportunity? What‚Äôs the story behind it?</p>

<p><strong>Martin:</strong> It really came from something we wanted ourselves. I think everyone says this! In my previous startup (and my cofounders also had a previous startup), we were all trying to do a lot of engaging with people personally, getting out there, learning a lot from people, really understanding where they were coming from. And that was so much effort! I‚Äôd keep lists of people in a custom database or in spreadsheets or in CRM systems like Highrise, and I&#8217;d have to keep them up to date by hand. I‚Äôd make a lot of notes about people, even just for myself, just so that I could remember when I came back to them six months later: what interactions I‚Äôd had with them, what we‚Äôd talked about.</p>

<p>But I then found that all of this information would go stale: for example, I had entered someone&#8217;s job details and then they‚Äôd change job‚Ä¶ and I‚Äôm not going to go and re-enter all of this stuff! It‚Äôs already out there on the web ‚Äî really, software should just do this stuff automatically; there‚Äôs no reason why I should have to type this in again.</p>

<p>And then, also, why should I have to always change over to another browser tab in order to search for something, and have five tabs open with different searches for stuff? It‚Äôs just ridiculous, this stuff should be in the tool which I use all the time anyway, which is email.</p>

<p>And so, those are the two premises we started with. We wanted something which keeps itself up-to-date automatically from all the data which is already out there; you shouldn‚Äôt have to re-enter anything. And secondly, it should be in the workflow of the tool you already use, which, for most of us is primarily email. And on that premise we said: what can we build? Oh, well, let‚Äôs just stick something on the side of Gmail, see how it works. And people loved it.</p>

<p><strong>Matthew:</strong> Excellent! Who is your cofounder, how did you meet, what qualities were you looking for in a cofounder, and how did you know they‚Äôd be a good fit?</p>

<p><strong>Martin:</strong> I have two cofounders, Rahul and Sam; there are three of us. They are both really excellent people. I had known them for a while before starting: we were together in an office space, a kind of co-working space in Cambridge, UK. They were working on their previous startup, and I was working on my previous startup; we worked together a bit, we had lunch together every day, and just ended up talking about a lot of things.</p>

<p>We found that partly we thought the same in a lot of ways, and partly we also had different but nicely complementary ways of thinking. We had a shared culture but often different perspectives, which helped us to together find the best way of doing stuff. And that‚Äôs really the basis on which we work. I think we have a very strong sense of a culture and making sure we work together very well, so we are constantly getting better at what we do.</p>

<p><strong>Matthew:</strong> From idea to product launch, how long did it take, and when did you actually launch?</p>

<p><strong>Martin:</strong> It was pretty quick actually: from first UI mockups to launch it was less than two months. We weren‚Äôt actually intending to launch: we had just put up this little website. We were applying for Y Combinator at the time and we also had some other people who were interested, so we wanted to show some potential investors what we were doing. Put up a little website; it wasn‚Äôt protected, but just at unknown URL.</p>

<p>And then somehow the press got hold of this, and within a day we found ourselves with 10,000 users on our hands, because it just went wild through all of the blogs. That was a totally crazy experience: we had thought, &#8220;well, we‚Äôve built this little thing, let‚Äôs give it to 10 people and see how it works&#8221;, and suddenly we have this massive load of people coming in. And we were working, working very hard, firstly trying to keep the servers up, but fortunately they held up quite nicely. Then also responding to all of the tweets, responding to all of the emails that were coming in. There was lots and lots of stuff happening very quickly; at that point we knew that we were on to something pretty exciting.</p>

<p><strong>Matthew:</strong> And then you formally launched when?</p>

<p><strong>Martin:</strong> We considered that our launch after the fact; we then said, &#8220;Well, OK, I guess we‚Äôve launched now. Oh well, we‚Äôve launched.&#8221; And then since then we‚Äôve, at times, launched new features but that original bit of press we regard as our real launch.</p>

<p><strong>Matthew:</strong> Are there any unique metrics or social proof about Rapportive that you‚Äôd like to share with our audience?</p>

<p><strong>Martin:</strong> I think the thing I find most exciting: we always have a Twitter search going on ‚Äî we have a big screen in the office, showing what people are saying about Rapportive on Twitter ‚Äî and there‚Äôs just this constant stream of people loving it. I‚Äôm really humbled all of the time I see this. Every hour there‚Äôs stuff coming in from people saying things like, &#8220;This product has changed our life.&#8221;</p>

<p>And that‚Äôs just amazing: when people will actually go out of their way to say something like that, and we‚Äôre not even particularly prompting them. So yeah, we have hundreds of thousands of users at the moment, but the important thing is really how much people care about it.</p>

<p><strong>Matthew:</strong> We know founders face unique challenges when they start a company. What was the hardest part about launching or starting Rapportive, and how did you overcome this obstacle?</p>

<p><strong>Martin:</strong> So we had a bit of a frustrating phase over the last summer. We were working very, very hard and there was lots going on, but our product was making very little visible progress, because we were spending all of our time firefighting, scaling our database because we had so much stuff coming in that we had to do a lot of work to re-architect it. We were doing a lot of groundwork for features which are just coming out now, but in technical groundwork there are months of work which is just invisible. We were moving country because we were all coming from the UK, moving to San Francisco, and we were fighting with US immigration. We were also spending a lot of time on support ‚Äî which is good, it‚Äôs really valuable, because we learn a lot about the problems that people have, but again it‚Äôs very time consuming.</p>

<p>So, with all of those things, it‚Äôs all useful stuff; there‚Äôs nothing really wasteful there. But on the other hand, our product wasn‚Äôt making progress, and people were starting to ask, &#8220;Well, you‚Äôve been around for six months now, nine months now, and you‚Äôve not really released any exciting new features. What‚Äôs going on?&#8221; And we were just saying, &#8220;Yeah, we‚Äôre trying to get to it, we‚Äôre doing what we can!&#8221;</p>

<p>And then I was so happy when, towards the end of 2010, we got over this big hump of stuff, and now we‚Äôre putting out features again and there is much more visible progress. So that was a fairly hard phase to go through, but I‚Äôm really glad we got over it. In the end you just have to work through it. You just have to not give up, just keep on going, keep on going, even if it‚Äôs getting tough.</p>

<p><strong>Matthew:</strong> Since you‚Äôve been in operation, what have you learned about your business and your users that you didn‚Äôt realize before you launched?</p>

<p><strong>Martin:</strong> When we first launched I was a bit cautious. I was wondering: &#8220;are people going to be really freaked out by seeing how much information is actually publicly available about them on the web?&#8221; You know, when you think about it rationally, it‚Äôs obvious: you can just search for someone on Google, and for most people you‚Äôll actually get a pretty good idea of who this person is just by looking at the search results. And we‚Äôve just taken away a step by automating a lot of that search, making it more convenient by putting it in email.</p>

<p>And so I was expecting that there‚Äôd be a lot of people who would go, &#8220;Oh my God, no, privacy is dead!&#8221; But we tried to manage that very carefully: whenever anyone was concerned, we listen to them and respond to any concerns very quickly, and explain what we‚Äôre doing, why we‚Äôre doing it and why we think it‚Äôs absolutely fine. We are all very privacy conscious and we make that very clear as well. We don‚Äôt mess around with people‚Äôs private data; we only show information which people actually want to be public.</p>

<p>And that is something I found surprising: just how quickly we can defuse any situation. If anyone was upset we‚Äôd just talk to them quietly, patiently, and explain what‚Äôs going on. If there was any problem, fix it quickly ‚Äî and all the problems suddenly go away. And that‚Äôs really encouraging, because it means that we seem to actually be doing the right thing: pushing the envelope a bit. But yes, it works.</p>

<p><strong>Matthew:</strong> What is it that you make look easy? What skill or talent comes easy or intuitively to you, and what has been difficult and how do you manage that?</p>

<p><strong>Martin:</strong> I‚Äôd say: what we, as a team, are particularly good at is product design. Making something which is very neat, stays out of your way, but is still powerful; which does exactly the stuff you need, not more, not less; and just behaves the way people expect it to behave, without running into a weird corner where you don‚Äôt know what to do.</p>

<p>And that is actually really hard to achieve. The amount of time we spend on optimizing the workflows for different users, depending on which starting state they‚Äôre coming from, which screens they have to go through and exactly what button we can show in which place, exactly what copy we use, what words we use to describe things, then taking them through the flow‚Ä¶ and then, to the user, all it looks like is: &#8220;oh, I clicked a button, a pop-up appeared, I clicked another button and it worked.&#8221;</p>

<p>That‚Äôs something we really enjoy: making that look easy, but a lot of work goes into it. In the end people just appreciate it as a product which is really nicely designed, which just works and which gives them a kind of warm, fuzzy feeling.</p>

<p><strong>Matthew:</strong> What‚Äôs the most important lesson you‚Äôve learned since launching Rapportive?</p>

<p><strong>Martin:</strong> The most important lesson? I‚Äôve not really graded them in a particular priority.</p>

<p>I‚Äôd say, off the top of my head: caring about user experience and caring about users was something we thought from the start was really important ‚Äî and that has really been validated. People appreciate us for having a product which just works nicely, and which has the little details thought out.</p>

<p>People appreciate that we get back to them quickly, that we‚Äôre always very friendly when responding to them, that we‚Äôre trying to be personal where we can.</p>

<p><strong>Matthew:</strong> Martin, what bit of advice do you wish you would have known before starting Rapportive?</p>

<p><strong>Martin:</strong> I think what‚Äôs really interesting is that in a startup everything is magnified. If you have any issue early on, that will just continue, continue, get bigger and bigger, so if you have any issue early on then make sure you fix it early on. I think we‚Äôve generally done a pretty good job of that. But it‚Äôs worth doing that really consciously.</p>

<p>Certain things are really hard, but you need to get good at them. For example, communicating and sharing intuitions, that‚Äôs a topic that I‚Äôve been thinking about a lot. We find that, since we‚Äôre three cofounders, we often have similar ideas about things, but and then often find that they differ in subtle ways. Really what we want to do is to combine our three intuitions into one, so that together, we have a really good broad and also deep insight into what people want. That requires that you find ways of explaining to the others not just <em>what</em> you think, but <em>why</em> you think it.</p>

<p>And that‚Äôs really hard to learn, and we‚Äôve gradually been getting better at that. As you go about things, just be conscious of the fact that it‚Äôs going to take a lot of effort and time, even just to learn to speak the same language. You think you all speak English, but then you find, of course, that you make up your own words to describe the domain you‚Äôre working in. A lot of things are just completely non-obvious.</p>

<p>You get a lot of conflicting advice from outside mentors. We have a lot of really good investors, advisors, mentors, and often they say completely contradictory things ‚Äî and that‚Äôs fine. You just need to learn to absorb those things into your own intuition, and within the team work out how you can share those intuitions. Then you can have a coherent vision, all together, for what you‚Äôre going to build, why it‚Äôs important, how you‚Äôre going to go forward.</p>

<p><strong>Matthew:</strong> What bit of advice would you like to share with our audience about launching a startup? If you have to distill it, what are the key elements?</p>

<p><strong>Martin:</strong> One thing, which worked in our favor but is not necessarily particularly replicable: if your product works well for journalists, then journalists will write about it quite a lot. We didn‚Äôt realize this initially, but it happened to be the fact that, Rapportive works really well for people who deal with a lot of incoming weird stuff from lots of people they don‚Äôt know, and need to assess very quickly whether the sources are reliable. And, well, that‚Äôs pretty much what journalists do.</p>

<p>It was also the case that when we started Rapportive, a lot of the data we had about people was not particularly great, but bloggers tend to be the kind of people who are very present on social media, so we had really great data for them! And that worked in our favor. Since then we‚Äôve got a lot better at data for everyone else, and now we‚Äôve got a pretty high coverage rate for everyone. But for that initial launch, just working well for reporters and bloggers was pretty good.</p>

<p>But of course, you can‚Äôt choose your startup based on the fact that it‚Äôs going to be useful for bloggers, so that‚Äôs not very useful advice.</p>

<p>There are lots of different schools of thought for launching and they all kind of make sense. There‚Äôs the &#8220;launch small and make sure that you‚Äôre continuously learning&#8221; school, and that makes a lot of sense. And then there‚Äôs also the school which observes that, if you can get a lot of very quick press that generates a lot of excitement and a lot of buzz, that‚Äôs also valuable. In the end, with these things there‚Äôs never a right answer; you just have to take in all of the bits of advice you hear and create your personal conglomerate of what makes sense.</p>

<p><strong>Matthew:</strong> Before we close, I would love for you to give our audience your vision of Rapportive and how you hope it will change the world.</p>

<p><strong>Martin:</strong> We‚Äôve got a lot of really exciting things coming. I don‚Äôt want to talk about them in too much detail, but to give a rough outline:</p>

<p>I think, firstly, the inbox is a really, really interesting place, because that‚Äôs where all of your communications come together. Email is the primary one we use at the moment; I don‚Äôt know, maybe it‚Äôll be Facebook mail within two years‚Äô time, but that doesn‚Äôt really matter, that‚Äôs beside the point.</p>

<p>The point is that people are really, really opinionated about which tool they want to use, and getting people to change tool is really, really hard. So we‚Äôre building Rapportive in the philosophy that we don‚Äôt people to change behavior; we just want people to continue doing what they‚Äôre doing already, and just make it better.</p>

<p>Just add those little magic touches, add little things which either save you time, or which take something which was previously laborious (and required switching to other browser tabs and required re-entering of data), and make all of that go away. Just make it be there, and make common tasks feel natural.</p>

<p>That‚Äôs the philosophy with which we‚Äôre going about things, and that seems to be working pretty well.</p>

<p><strong>Matthew:</strong> Excellent. Well, Martin, it‚Äôs been a pleasure having you as a guest on FounderLY. We‚Äôre rooting for your success at Rapportive. For those in our audience who‚Äôd like to learn more you can visit their website at www.rapportive.com and register to become a user and join their community. This is Matthew Wise with FounderLY. Thanks so much, Martin.</p>

<p><strong>Martin:</strong> Thank you, Matthew.</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>Evolution of Rapportive's new design</title>
                <link>http://martin.kleppmann.com/2011/05/24/evolution-of-rapportive-new-design.html</link>
                <comments>http://martin.kleppmann.com/2011/05/24/evolution-of-rapportive-new-design.html#disqus_thread</comments>
                <pubDate>Tue, 24 May 2011 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2011/05/24/evolution-of-rapportive-new-design.html</guid>
                
                <description><![CDATA[ This is a re-post from the Rapportive blog. Today we are launching a new design for Rapportive. We put a huge amount of effort into this design, because we all believe deeply great user experience, and we know that our users really appreciate it too. Here it is (best viewed... ]]></description>
                <content:encoded><![CDATA[
                    <p><em>This is a re-post from the <a href='http://blog.rapportive.com/53827077'>Rapportive blog</a>.</em></p>

<p>Today we are launching a new design for Rapportive. We put a huge amount of effort into this design, because we all believe deeply great user experience, and we know that our users really appreciate it too.</p>

<p>Here it is (best viewed fullscreen):</p>
<iframe allowfullscreen='allowfullscreen' frameborder='0' height='309' src='http://www.youtube.com/embed/DPaSxa2vopU' width='549'>
  <a href='http://www.youtube.com/watch?v=DPaSxa2vopU'>View on YouTube</a>
</iframe>
<p>In this post I&#8217;d like to explain some of our process and thinking in the creation of the new design.</p>

<p>Our old design, which we had <a href='http://blog.rapportive.com/the-accidental-launch'>since launch</a>, has served us very well. It was subtle, simple, effective, and blended in well with Gmail. Unfortunately, it was beginning to show some limitations:</p>

<ol>
<li>If you&#8217;re using Gmail on a small screen, on a laptop or even a netbook, the Rapportive sidebar would often be too tall to fit on screen. Of course you can scroll down, but the main Gmail scrollbar is already used to scroll down in the conversation. We hooked into the page scrolling, but if you were on a long conversation, you had to scroll all the way to the bottom of the conversation if you wanted to see the rest of the Rapportive sidebar. That was really annoying.</li>

<li>Over the months we&#8217;ve been adding more and more useful stuff to the sidebar: <a href='http://blog.rapportive.com/address-book-inbox-together-at-last'>phone numbers</a>, <a href='http://blog.rapportive.com/40551428'>Facebook status updates</a>, <a href='http://blog.rapportive.com/grow-your-network-with-rapportive'>LinkedIn invitations</a>, and a choice of <a href='http://raplets.com/'>Raplets</a> for a <a href='http://thenextweb.com/apps/2010/04/29/rapportive/'>variety of</a> <a href='http://blog.rapportive.com/get-out-of-your-inbox-and-meet-people-in-pers'>different</a> <a href='http://blog.rapportive.com/rapportive-for-developers-bitbucket-github-st'>purposes</a>. This has pushed the previous design to its limits: some profiles would become unmanageably tall.</li>

<li>Different people find different parts of the sidebar useful. Some find <a href='http://twitter.com/GraemeF/status/25286282993213440'>recent tweets</a> most useful, others swear by our <a href='http://twitter.com/smsbnyc/status/40436337681104896'>CRM raplets</a>, others again leave <a href='http://twitter.com/nickcernis/status/15001395635691520'>lots of notes</a> about their contacts. But it sucks if the thing you&#8217;re most interested is often scrolled off the bottom of the screen because the things higher up in the sidebar are taking all the space.</li>
</ol>

<p>These three points have a common theme: we do not handle long sidebars well.</p>

<p>How long can a sidebar get? Well, here&#8217;s my sidebar, with the CrunchBase and the MailChimp Raplets:</p>
<p style='text-align: center'>
  <img alt='Example of very tall Rapportive profile' height='1361' src='http://martin.kleppmann.com/2011/05/tall_profile.png' width='230' />
</p>
<p>As we add more features to Rapportive, these problems would only get worse, so we decided that it was time to rethink our design.</p>

<h2 id='our_design_principles'>Our design principles</h2>

<p>We had several guiding principles for the redesign. Rapportive should:</p>

<ul>
<li>Remain very subtle and unobtrusive: Rapportive should be there for you when you want it, but should not try to grab your attention or use more space than necessary. Your <em>email</em> is what&#8217;s important, not the sidebar!</li>

<li>Allow you to serendipitously discover things about your contacts: the information should simply be there when you glance at the sidebar, and shouldn&#8217;t require a lot of clicking or scrolling.</li>

<li>Look good on both large and small screens, both with lots of data and little data. That means it has to make efficient use of screen space.</li>

<li>Avoid configuration dialogs. The interface should just do the right thing.</li>

<li>Be clear, obvious to use, beautiful and <em>enjoyable</em> to interact with :)</li>
</ul>

<h2 id='buttons'>Buttons</h2>

<p>First of all, I started with some graphical tweaking. Here are some nice buttons:</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/connect_buttons.png'><img alt='Different sylings for &apos;add friend&apos;/&apos;connect&apos; buttons' src='http://martin.kleppmann.com/2011/05/connect_buttons.png' /></a>
</p>
<h2 id='how_do_we_handle_long_sidebars'>How do we handle long sidebars?</h2>

<p>Our first thought: we could simply give the Rapportive sidebar its own scrollbar. That would avoid having to scroll down to the bottom of a long conversation, because you could scroll the sidebar separately. But that approach is pretty bad. A large part of the sidebar may still end up being hidden off-screen, which means you have to go out of your way to scroll down, making it unlikely that you&#8217;ll discover things serendipitously.</p>

<p>Another idea that we ruled out quickly was a &#8216;tabbed&#8217; interface. Tabs work well in a browser, where you have exactly one web page per tab, and each tab is independent. Rapportive isn&#8217;t like that: we might have several pages of information for one person (i.e. the tabs aren&#8217;t independent), and while we have several full tabs for one person, the information for another person might be a lot more sparse. That means that either you have to either have to waste a lot of space (e.g. always have a tab for tweets, even if the person doesn&#8217;t have a Twitter account), or you have things appearing in different places for different people (which is confusing). Finally, tabs require a lot of laborious clicking: you can&#8217;t see what&#8217;s in a tab without clicking it, and you can&#8217;t see the contents of two tabs at the same time. Tabs would have been an unpleasant, clunky interface.</p>

<p>An &#8216;accordion&#8217; interface, like you find in Outlook for example, seemed like a step in a more promising direction:</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/accordion.png'><img alt='Accordion interface example' src='http://martin.kleppmann.com/2011/05/accordion.png' /></a>
</p>
<p>You can have several sections, and each section can expand to show additional information when you click it. When you expand one section, another one collapses to make room. (In the screenshot above, I could click &#8216;Contacts&#8217; to see my list of contacts; the list of mailboxes under the &#8216;Mail&#8217; heading would be hidden to make room for the list of contacts.)</p>

<p>Accordions are fairly efficient when space is very limited, but they suck if you have a large screen. If you have enough space that all your sections could be comfortably expanded side-by-side, why limit it to only one expanded section at a time? I don&#8217;t want to have to click a section to see what&#8217;s inside. It&#8217;s the same problem as with tabs.</p>

<p>So I started experimenting with a kind of adaptive accordion which could have several sections expanded at the same time, if there was enough screen space available. Here are some early design ideas:</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/section_headings.png'><img alt='Three designs for separators/headings between sidebar sections' src='http://martin.kleppmann.com/2011/05/section_headings.png' width='550' /></a>
</p>
<p>The designs were fairly ugly, but I could see an algorithm emerging here. I figured that we needed an accordion with the following improvements:</p>

<ul>
<li>It should be possible for several sections to be expanded at the same time, up to a maximum of what will fit on screen without scrolling.</li>

<li>When you expand a section, other sections may need to collapse in order to make space on screen. The application should be intelligent about which sections to collapse &#8211; for example, if you haven&#8217;t clicked a section in a long time, you probably find it less useful than a section which you clicked just now. So we should keep the recently-used sections expanded, if possible.</li>

<li>The collapsed version of a section should be useful too; for example, the collapsed Twitter section could show just the username, whereas the expanded version could show the username and three most recent tweets. If the contact doesn&#8217;t have a Twitter account, we shouldn&#8217;t show the section at all, since it would just be a waste of space.</li>

<li>Sometimes a section gets very tall, for example a Facebook status with lots of comments. In that case, we need to limit the section&#8217;s height and give it a scrollbar, to avoid it dominating the entire sidebar. But if we can avoid scrollbars, we should do without.</li>
</ul>

<p>Even scrollbars, despite being such a standard part of user interface design, have their problems:</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/scrolling.png'><img alt='Misalignment of text due to scrollbar spacing' src='http://martin.kleppmann.com/2011/05/scrolling.png' /></a>
</p>
<p>Fortunately such spacing issues are easy to iron out. A harder question is: how do we communicate to the user that they can expand a section?</p>

<h2 id='expandable_sections'>Expandable sections</h2>

<p>In the old design, if you clicked someone&#8217;s Twitter username, we would open up a new browser tab to show their tweet stream. In an accordion design, however, you&#8217;d expect that clicking the collapsed section will cause it to expand (i.e. show recent tweets, not open a new browser tab). Do we break the old interaction and force users to learn a new behaviour, or do we add an extra button for expanding a section?</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/expand1.png'><img alt='Up/down arrow button to trigger expansion of a section' src='http://martin.kleppmann.com/2011/05/expand1.png' /></a>
</p>
<p>That was my first attempt. The arrows serve two purposes: to indicate that the section can be expanded, and to act as a button to trigger the actual expanding. But I didn&#8217;t like it. Some sections would have arrows and others wouldn&#8217;t (because we don&#8217;t always have additional information), so the &#8220;connect&#8221;/&#8221;add friend&#8221; buttons could become strangely misaligned. It also made the interface look more cluttered and complicated.</p>

<p>Surely we could do better? For example, could we show the button for expanding a section only when you hover over it? That&#8217;s an interesting idea. What&#8217;s more, we could then calculate how tall the section would be if it was expanded, and indicate it with the height of the arrow:</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/expand2.png'><img alt='Large arrow when hovering mouse over expanded section; click the arrow to expand' src='http://martin.kleppmann.com/2011/05/expand2.png' width='550' /></a>
</p>
<p>At this point we&#8217;re really moving away from established user interface patterns. Will users notice the arrow, and understand what it means? Will they figure out that you can click it? It contains a lot of information: the fact that the section can be expanded, how big it will be and where it will be placed when expanded. It&#8217;s also a much bigger click target than the previous arrow button, which is good. But it still has the problem of not looking particularly like a button. (It goes grey when you hover over it, to indicate that you can interact with it, but still it&#8217;s not exactly obvious.)</p>

<p>I was starting to get sick of this redesign, but fortunately, inspiration struck again. If we&#8217;re already using an arrow on hover to indicate how tall the expanded section will be, well&#8230; why don&#8217;t we use <em>the expanded section itself</em> to indicate how tall it will be? Yes, we can just show the expanded section itself on hover!</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/expand3.png'><img alt='Showing the expanded version when hovering over a collapsed section' src='http://martin.kleppmann.com/2011/05/expand3.png' width='550' /></a>
</p>
<p>It&#8217;s obvious in retrospect, but it took a surprisingly long time to come up with this design. I call it the <a href='http://en.wikipedia.org/wiki/Jinn_in_popular_culture'>&#8220;genie&#8221;</a> because it looks like a ghost that has come out of an oil lamp. Although the version above still isn&#8217;t pretty, it really got to the bottom of many of the challenges I discussed at the beginning:</p>

<ul>
<li>When you&#8217;re not hovering your mouse over the sidebar, Rapportive remains minimalistic and uncluttered. No more buttons than necessary.</li>

<li>If you&#8217;re on a large screen, the sections of the sidebar expand to fill the screen space, so you can see everything at a glance. No need to click anything (unless you want to add them as a friend, of course).</li>

<li>If you&#8217;re on a smaller screen, we collapse your lesser-used sections to make them more compact; in most cases, this allows us to fit everything on screen without need for scrolling.</li>

<li>When you&#8217;re interacting with the sidebar, we allow Rapportive to pop up additional information outside of the sidebar. But we don&#8217;t encroach on your email space when you&#8217;re not interacting with the sidebar.</li>

<li>The visual cues makes it pretty obvious that the expanded section is a bigger, more verbose version of the collapsed section. (I think it&#8217;s a bit like a magnifying glass.)</li>

<li>If there are several collapsed sections next to each other in the sidebar, you can skim the content of all of them by slowly moving the mouse across each of the collapsed sections. As the mouse moves from one section to another, the genie for the previous section disappears and the one for the new section appears. Wonderful for getting a quick overview of someone&#8217;s online activity before you reply to their email.</li>
</ul>

<p>Not all is great though. If there is space, we&#8217;d still like to show you the expanded section in the sidebar right away, without you having to hover the mouse. But how do we make clear to users that sections can be expanded?</p>

<p>In the screenshot above, I tried using a button with an arrow pointing right. If you clicked it, the expanded section would slide into the sidebar, and the other sections would move out of the way to make room. I liked the animation, but the button was ugly. Fortunately, Rahul had the idea that we could use a right-pointing mouse cursor to indicate the same thing. So now you can click anywhere on the genie and it will slide into the sidebar.</p>

<p>After some graphical tweaking, this is what the final design looks like:</p>
<p style='text-align:center'>
<a href='http://martin.kleppmann.com/2011/05/expand4.png'><img alt='End result: Rapportive&apos;s new sidebar design with collapsible section' src='http://martin.kleppmann.com/2011/05/expand4.png' width='550' /></a>
</p>
<p>I hope you&#8217;ll agree that it is <em>gorgeous</em>. We have added very little new user interface (and we&#8217;ve taken a lot away, compared to earlier designs), but the result is very effective. It fits neatly on both big and small screens, it is easy to use, and it is actually lots of fun to play with. Give it a try for yourself, and let us know what you think!</p>

<p>Usability without design is dreary. Design without usability is pretentious. Design and usability together are delightful.</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>What's so special about Y Combinator?</title>
                <link>http://martin.kleppmann.com/2011/03/15/whats-so-special-about-y-combinator.html</link>
                <comments>http://martin.kleppmann.com/2011/03/15/whats-so-special-about-y-combinator.html#disqus_thread</comments>
                <pubDate>Tue, 15 Mar 2011 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2011/03/15/whats-so-special-about-y-combinator.html</guid>
                
                <description><![CDATA[ Since we joined Y Combinator&#8217;s Summer 2010 funding cycle, I keep getting asked how much value we got from it, and whether I would do it again. tl;dr The short answer: we got a huge amount of value during the three-month main programme, and we are continuing to benefit all... ]]></description>
                <content:encoded><![CDATA[
                    <p>Since we joined <a href='http://ycombinator.com/'>Y Combinator&#8217;s</a> Summer 2010 funding cycle, I keep getting asked how much value we got from it, and whether I would do it again.</p>

<p><strong>tl;dr</strong> The short answer: we got a huge amount of value during the three-month main programme, and we are continuing to benefit all the time from being part of YC. And yes, I would do it again without a moment&#8217;s doubt.</p>

<p>The long answer deserves a bit more explanation.</p>

<p>On the surface, it seems like the Y Combinator formula is <em>&#8220;money and mentoring for equity&#8221;</em>. That seems like a simple enough formula, and clones around the world are rushing to replicate it. Unfortunately I think they mostly miss the point, because there is so much more to YC which the others lack.</p>

<p>When <a href='http://rapportive.com'>we</a> applied to YC, we had already <a href='http://blog.rapportive.com/the-accidental-launch'>launched</a> and didn&#8217;t really need the $20k they were offering (investors had started contacting us from the day that Rapportive first hit the press). Looking at the other startups who joined YC at the same time of us, most of them got profitable or secured substantial angel/VC funding at good valuations soon afterwards. So although the money is nice, it&#8217;s probably not the main attraction.</p>

<p>As to mentoring, press and investor contacts&#8230; as an entrepreneur, you&#8217;re probably already quite good at getting attention and feedback from relevant people, using your personal network. How much more value could you get?</p>

<p><strong>Network and knowledge</strong></p>

<p>The things that are really special about Y Combinator, in my opinion, are less frequently talked about:</p>

<ul>
<li>
<p>There is a genuine, strong sense of camaraderie and mutual support amongst YC alumni. Many organisations claim to have strong alumni networks, but I have often found these claims to be empty words: often, the only participants in these networks are those who want to take, not those who want to give, because those who have something to give feel their time is wasted. It is hard to maintain a high standard in a network, and YC&#8217;s is the only example I have seen where the high standard is consistently upheld. Even the most busy founders of the most successful startups are genuinely supportive, and will spend surprisingly large amounts of time to answer questions, give practical advice, make introductions and recommendations, etc. They are real friends, not just utilitarian business contacts. This culture is truly remarkable.</p>
</li>

<li>
<p>It sounds trite, but the YC partners are all really great people. They are exceptionally bright and talented, outspoken, honest, straight-to-the-point and totally bullshit-free &#8211; hardly anyone else I know even comes near in terms of these qualities. They have lots of time for their companies (surprisingly, given the number of companies they&#8217;ve funded), and I have only ever seen them do things that are good for founders. It seems altruistic, but Paul Graham maintains that it&#8217;s simply the best business strategy for YC.</p>
</li>

<li>
<p>Between them, the YC partners have seen it all. They&#8217;ve seen big exits and small exits, profitable companies and train-wrecks, fast growth and slow growth, dream teams and founder disputes, and all manner of great ideas and screw-ups. Startups are unpredictable; you never know what surprises lie around the next corner. When we talk to YC, no matter whether we have good news or bad news, chances are that they&#8217;ve seen the situation before, and their pattern-matching will enable them to make good predictions.</p>
</li>

<li>
<p>The YC team know everybody who&#8217;s worth knowing in the startup scene, and everyone respects them. This makes them ideally placed for introducing you to the kind of people you want to meet. Demo Day is one aspect of this, a maximum-efficiency batch process for introducing startups and investors to each other, but YC also make individual introductions all the time. They also know who is worth talking to, who is actively investing, and which people are just fishing for information.</p>
</li>

<li>
<p>If there is a <a href='http://www.paulgraham.com/future.html'>change in the startup ecosystem</a>, YC are amongst the first to see it &#8212; because they have insight into a uniquely high proportion of startup deals, and they work actively to spot patterns and learn from them. As a YC startup, you get to hear about these changes first, something that you can use to your advantage.</p>
</li>

<li>
<p>If you are new to Silicon Valley, like we were, YC is a fantastic way to get yourself established and find your feet. They are welcoming to outsiders, and you can bootstrap your valley network from those who already know their way around. You can celebrate with them when things go well, and to get encouragement from them in hard times. You couldn&#8217;t ask for a better group of people to hang out with.</p>
</li>

<li>
<p>Because YC has a proven track record of funding great companies, being accepted to YC carries a strong signalling effect, making it more likely for others to <a href='http://thenextweb.com/industry/2011/02/07/y-combinator-partner-harjeet-taggar-start-fund-is-bad-news-for-bad-investors-interview/'>believe</a> that you are doing something interesting by default.</p>
</li>
</ul>

<p><strong>Being part of the best</strong></p>

<p>A lot of the points above are remarkable, but not intrinsically unique to Y Combinator; what&#8217;s particularly special about YC is that it is <strong>simply <a href='http://blog.businessofsoftware.org/2009/09/joel-spolskys-talk-at-business-of-software-2008-on-being-number-one.html'>number one</a></strong>. Being number one is very different from being number two or any number below.</p>

<p>One friend from our YC batch remarked at Demo Day: <em>&#8220;This room contains the future of the IT industry.&#8221;</em> He was right. Since many of the world&#8217;s best startups go through YC, they collectively form a force which has the power and drive to shape the entire industry for many years to come. That&#8217;s not because there is any centralised agenda; it&#8217;s more comparable to being a graduate from one of the top universities in the world.</p>

<p>Ever wonder why so many leading figures in business, science and politics are graduates of Harvard, Yale, Cambridge, Oxford, MIT or Stanford? I don&#8217;t think their teaching is really that much better than any other university, or than reading the textbooks by yourself. But you do get two valuable things from a top university:</p>

<ol>
<li>a signalling effect: other people can see that a reputable organisation thinks that at one point in your life (when you took your exams), you were reasonably motivated and not entirely stupid;</li>

<li>you build a network of talented people.</li>
</ol>

<p>I think we are seeing something similar with YC. The fact that YC has brought forth a number of successful startups is merely a correlation; by itself it doesn&#8217;t say anything about cause and effect. But when people see a correlation, it has a signalling effect nevertheless. (The reputation of a good university is also mostly due to the observed correlation between its graduates and their later success.)</p>

<p>Startups are risky and full of unknowns, and you as startup founder are in the business of convincing everyone that you are going to be the big, successful one. You need all the positive signals you can get.</p>

<p><strong>But is it worth the cost?</strong></p>

<p>Y Combinator takes 2&#8211;10% of your company&#8217;s equity. How do you figure out whether the value you get from YC is worth the cost? If you are wondering whether to apply for YC, this is probably the question you&#8217;re trying to answer.</p>

<p>Firstly, note this: <strong>dilution</strong> makes an <strong>incremental</strong> difference to your outcome: if you sell 5% of the company to an investor, you reduce your pay-out by 5% if you sell the company. However, whether you <strong>have or don&#8217;t have</strong> an investor can make a huge difference. Say you give 5% of the company to&#8230;</p>

<ul>
<li>someone who later makes that one critical introduction that leads to the deal which saves your company.</li>

<li>someone who helps you negotiate with your acquirer and doubles the value of your exit.</li>

<li>someone who encourages you to make a particular pivot, which turns out to unlock a billion-dollar market.</li>

<li>someone who prevents you from making a stupid mistake that would have set you back by 12 months.</li>
</ul>

<p>Whether any of these scenarios will actually happen is unknown in advance, but my point is: probability of success tends to move in discontinuous jumps. An extra per cent of equity may make absolutely no difference at all to your success, or it may turn out to make the difference between epic fail and massive win. A bit of equity may buy you an &#8220;unfair advantage&#8221;, or it may be a complete waste.</p>

<p>You need to figure out which investors might make the big difference, and which probably won&#8217;t. Your job as founder is to figure out how to play your cards such as to maximise the chances of massive win. Dilution changes incrementally, but probability of success is much more variable. Therefore, if you can figure out a way of substantially increasing your chances of success (putting yourself on the good side of some of those discontinuities), the equity cost is secondary. It&#8217;s not irrelevant, but as long as it&#8217;s in the right ballpark, it&#8217;s ok.</p>

<p>Of course you should be prudent to whom you give equity, but I would argue that if someone can give you &#8220;unfair advantages&#8221;, it&#8217;s well worth bringing them on board and not worrying too much about the cost.[<a href='#footnote-cap-table'>1</a>]</p>

<p>So, does Y Combinator give you that big advantage which has a disproportionately large positive impact on your chances of success?</p>

<p>I&#8217;d say yes. If you don&#8217;t need any of the benefits mentioned above, maybe not&#8230; but honestly, I&#8217;d be very surprised if your network and your group of advisors is already so perfect that you wouldn&#8217;t benefit from YC. Whether you&#8217;ve already launched or not makes very little difference.</p>

<p>YC is a package consisting of a variety of good things. In principle you may be able to assemble yourself a similar package from component parts &#8212; e.g. using <a href='http://angel.co/'>AngelList</a> for your investor intros, asking around to find suitable advisors, and spending lots of time networking and taking speculative meetings. But somehow that feels to me like buying individual CPUs and RAM and rack-mount cases to assemble your servers, when you could just spend 10 minutes to buy computing resources from Heroku, EC2 or Rackspace. It might make sense for some people, but for most of us, the time saving and assured quality you get from a good pre-built package is well worth a bit of extra cost. (That doesn&#8217;t mean you can&#8217;t use component parts <em>as well</em> &#8211; for example, we used AngelList to fill up our <a href='http://techcrunch.com/2010/08/02/rapportive-funding/'>seed round</a>.)</p>

<p>I hope you find this useful when deciding whether to apply to YC. :)</p>
<hr /><p id='footnote-cap-table'>[1]
In my opinion, the main reason to be careful with distribution of equity is not because dilution
reduces the size of your payout, but rather because you should avoid odd-looking things on your
cap table. Later investors will see weird things on the cap table during due diligence, may assume
that you are irresponsible in the way you run the business, and pull out of the deal. That's
something you can avoid by keeping your capital structure nice and clean. But honestly, no investor
in the world could possibly object to seeing YC on your cap table, because they know perfectly well
how much value YC brings. So that concern is irrelevant here.</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>Accounting for Computer Scientists</title>
                <link>http://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html</link>
                <comments>http://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html#disqus_thread</comments>
                <pubDate>Mon, 07 Mar 2011 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2011/03/07/accounting-for-computer-scientists.html</guid>
                
                <description><![CDATA[ Every educated person really ought to have a basic understanding of accounting. Just like maths, science, programming, music, literature, history, etc., it&#8217;s one of those things which helps you make sense of the world. Although dealing with money is not much fun, it&#8217;s an unavoidable part of life, so you... ]]></description>
                <content:encoded><![CDATA[
                    <p>Every educated person really ought to have a basic understanding of accounting. Just like maths, science, programming, music, literature, history, etc., it&#8217;s one of those things which helps you make sense of the world. Although dealing with money is not much fun, it&#8217;s an unavoidable part of life, so you might as well take a few minutes to understand it.</p>

<p>Sadly, in my opinion, most accountants do a terrible job of explaining their work in an accessible way; it&#8217;s a field full of jargon, acronyms and weird historical legacies. Even &#8220;Bookkeeping for Dummies&#8221; makes my head spin. Surely this stuff can&#8217;t be that difficult?</p>

<p>(We computing people are probably guilty of the same offence of bad explanations and jargon. The problem is, once you have become intimately familiar with a field, it&#8217;s very hard to imagine how you thought about things before you understood it.)</p>

<p>Eventually I figured it out: basic accounting is just graph theory. The traditional ways of representing financial information hide that structure astonishingly well, but once I had figured out that it was just a graph, it suddenly all made sense.</p>

<p>I&#8217;m a computer scientist, and I think of stuff in graphs all the time. If only someone had explained it like that in the first place! It would have saved me so much confusion. So I want to try to fix that. If you like graphs, then by the time you reach the end of this article, you should know everything you need in order to understand the financial statements for a small company/startup (and even calculate them yourself, in a spreadsheet or programming language of your choice).</p>

<p>It&#8217;s really not that hard. Let&#8217;s go!</p>

<p><strong>Accounts = Nodes, Transactions = Edges</strong></p>

<p>Say you go to the bagel shop and buy a Super Club bagel for $5 on the company credit card. You also visit some random Silicon Valley startup and buy one of their surplus Aeron chairs, second hand, for $500 (by writing a cheque from the company account). Those are two transactions. Each transaction is an edge in our graph, and the edge is labelled with the amount.</p>

<p>An edge always goes from one node to another. What are those nodes? Well, you can define them as you like (although there are some conventions). For now, let&#8217;s say:</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting1.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting1.dot.png' width='550' />
</a></p>
<p>Let&#8217;s add some more details. You pay the $5 credit card bill from the company account. And where did the money in the company account come from in the first place? Ah, I see, you put in $5,000 of your savings to start the company. Ok, now the graph looks like this:</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting2.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting2.dot.png' width='550' />
</a></p>
<p>Hopefully pretty self-explanatory so far. Money flows in the direction of the arrows.</p>

<p>Hungry once again, you go to the taqueria and buy a Super Burrito for $8 on the credit card. Now we could create another node for the taqueria, but this is starting to get messy &#8211; we don&#8217;t really care how much money we spent on bagels vs. how much on burritos. Let&#8217;s just lump them together as &#8220;food&#8221;. Also, &#8220;Random startup&#8221; is a bit unhelpful &#8211; I&#8217;ve already forgotten what those $500 were for. Let&#8217;s call it &#8220;furniture&#8221; instead.</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting3.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting3.dot.png' width='550' />
</a></p>
<p>See, that&#8217;s perfectly fine. We can have nodes which represent actual bank accounts or cards, others which represent people or companies, and others again which represent abstract categories like &#8220;food&#8221; or &#8220;furniture&#8221;. Just throw it all into the same graph.</p>

<p>Note also that you can have several edges between the same pair of nodes. You can keep track of the individual edges, or you can simply add them up. (Using the credit card, you spent a total of $13 on food.)</p>

<p><strong>Accounts have balances</strong></p>

<p>Every node in this graph is an <em>account</em> in accountant-speak (whether or not it is held by a bank), and every account has a <em>balance</em>. The balance is a single number for each account, and it is determined completely by the transactions in and out of the account:</p>

<ol>
<li>At the beginning of time, the value at each node is zero.</li>

<li>At each node, for each incoming edge, add the edge&#8217;s label to the node&#8217;s value; for each outgoing edge, subtract the edge&#8217;s label from the value.</li>
</ol>

<p>After you&#8217;ve processed all the edges, the value at each node is that account&#8217;s balance. Our graph now looks like this:</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting4.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting4.dot.png' width='550' />
</a></p>
<p>Note that the account balances have two nice properties:</p>

<ol>
<li>Because every transaction appears twice &#8211; once positive and once negative &#8211; the sum of all account balances is always zero.</li>

<li>If you partition the set of nodes into any two disjoint sets, and add up all of the balances in each set, then the sum for the one set is always the negative sum of the other set (because, after all, they have to add up to zero).</li>
</ol>

<p>These properties are useful for sanity-checking your numbers; if they are violated, <em>&#8220;ur doin it wrong&#8221;</em>. (This is what accountants mean when they talk about &#8220;balancing the books&#8221;.)</p>

<p><strong>Doing business</strong></p>

<p>Strengthened by a bagel and a burrito, you go out and talk to some potential customers. And hey, they love your product! It has a price tag of $5,000, and you sell it to two big enterprise customers. One pays you right away (good stuff!); the other gives you $2,500 up front, but insists that before they pay the rest, you need to implement that additional feature you foolishly promised.</p>

<p>So you received $5,000 + $2,500 in cash from your customers, wired straight the company bank account. Let&#8217;s add that to the graph:</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting5.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting5.dot.png' width='550' />
</a></p>
<p>But that&#8217;s not quite right. The price was $5,000 for each customer, and now it looks like you charged two different prices. How do we represent our arrangement with customer 2?</p>

<p>The solution is to deconstruct the deal into two separate transactions: the sale (in which the buyer agrees to buy, but no actual money changes hands) and the payment (when the cash actually hits your bank account). We can draw it like this:</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting6.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting6.dot.png' width='550' />
</a></p>
<p>See what I&#8217;ve done here? I&#8217;ve just made up a new node, generically called it &#8220;sales&#8221;, and added the actual $5,000 sales as a transaction from this &#8220;sales&#8221; account to the customer accounts. Adding this extra node hasn&#8217;t changed your bank balance.</p>

<p>This makes sense when you think about the intuitive meaning of the balances. The balance of each customer&#8217;s account is the amount they owe you: customer 1 has fully paid up (their incoming and outgoing transactions add up to the same), so their balance is zero; customer 2 has contractually agreed to give you $5,000, but has so far only given you half of that, so their balance is $2,500.</p>

<p>And the balance on the sales account is the value of stuff you&#8217;ve sold. Or rather, the negative value. That looks a bit weird&#8230; but I&#8217;ll come back to that later. (BTW, if you wanted to separately track sales for different customers or different products, no problem &#8212; just add whatever nodes make sense for you. Just make sure that every transaction appears only once as an edge, otherwise you&#8217;re making stuff up!)</p>

<p><strong>Finishing off the example</strong></p>

<p>To round it off, let me add some more events to the story (= some more edges to the graph).</p>

<p>Not only have you made some sales, but now you also receive a $20,000 investment from Y Combinator &#8212; congratulations! You and your co-founder can now afford to pay yourselves a salary. You take $8,000 out of the company account.</p>

<p>Then you get set up with a company accountant, and they talk lots of jargon at you. For some strange reason they are obsessed with correctly accounting for your office chair; they want it to depreciate over four years, i.e. its value is gradually reduced to zero over the course of that time. Fair enough, you say (even though you couldn&#8217;t care less what your chair will be worth in four years&#8217; time &#8212; surely by that time you&#8217;ll be the next Google or Facebook, and you&#8217;ll have other things to worry about than chairs).</p>

<p>The resulting graph now looks like this:</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting7.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting7.dot.png' width='550' />
</a></p>
<p>Note how I have represented the transactions:</p>

<ul>
<li>
<p>I have lumped together your founder investment with that of Y Combinator, under the heading of &#8220;capital&#8221;. Put simply, this is money you got into the company by selling your company&#8217;s shares, rather than by selling a product or service to a customer. As usual, you can split founders and YC into separate accounts if you feel like it.</p>
</li>

<li>
<p>I&#8217;ve represented payroll (salaries) as just money straight out of the bank account. In reality it&#8217;s a bit more complicated due to taxes, healthcare, benefits, etc. but the principles stay the same. It&#8217;s just more nodes and edges in the graph.</p>
</li>

<li>
<p>I made depreciation for one year (one quarter of $500 = $125) go <em>away</em> from the &#8220;furniture&#8221; account. Intuitively, this means that the balance of the &#8220;furniture&#8221; account is the value that your furniture still has now. Each year, you add another $125 edge from &#8220;furniture&#8221; to &#8220;depreciation&#8221;, until after four years, the balance of &#8220;furniture&#8221; drops to zero (assuming you haven&#8217;t bought any more chairs in the meantime, in your quest for world domination).</p>
</li>
</ul>

<p><strong>The profit and loss statement</strong></p>

<p>At this point, if you&#8217;re getting weary, I don&#8217;t blame you. But the good news: we&#8217;ve finished building our graph! Now I will show you how this graph representation maps to two standard financial statements most commonly used in managing a company: the profit and loss statement (&#8220;P&amp;L&#8221;), and the balance sheet. This is useful, because as a startup founder you&#8217;ll sooner or later have to discuss these documents with your investors/advisors, and so you might as well learn what the hell they mean.</p>

<p>In order to produce these statements, I need to get out the crayons. Here is the same graph as before, with the nodes coloured in:</p>
<p><a href='http://martin.kleppmann.com/2011/03/accounting8.dot.png'>
  <img alt='Graph representation of accounts' src='http://martin.kleppmann.com/2011/03/accounting8.dot.png' width='550' />
</a></p>
<p>Explaining the colours (putting the accounting terminology in brackets, since you&#8217;re likely to encounter these words):</p>

<ul>
<li>Green for <strong>stuff that you have</strong> (<em>&#8220;assets&#8221;</em>), e.g. money in the bank, or things which you bought and you could sell again, such as furniture. Also green for people/companies who <strong>owe you money</strong> (<em>&#8220;debtors&#8221;</em>, such as Customer 2), and people/companies to whom <strong>you owe money</strong> (<em>&#8220;liabilities&#8221;/&#8221;creditors&#8221;</em>, such as your upcoming credit card bill for that burrito).</li>

<li>Blue for <strong>sales of your product/service</strong> (<em>&#8220;revenue&#8221;</em>) and <strong>money you spent</strong> that you&#8217;re not going to get back (<em>&#8220;expenses&#8221;/&#8221;overheads&#8221;</em>). The office chair is green, because you could sell it again if you wanted to, but the bagel is blue, because once you&#8217;ve bought (and eaten) the bagel, that&#8217;s it &#8211; no going back.</li>

<li>Pink for <strong>money from investors</strong> (or yourself) that you got by selling shares (<em>&#8220;capital&#8221;</em>). (If you get a bank loan, that&#8217;s green, not pink, because you owe the bank to pay it back.)</li>
</ul>

<p>Every one of your nodes should fall into exactly one of these categories. If not, something has gone wrong, or you have discovered some bit of the accounting world that I don&#8217;t yet know about.</p>

<p>With these colours set, the profit and loss statement is simply <strong>a list of all the blue nodes</strong>, and the profit or loss of the company is the sum of all of the blue nodes&#8217; balances. The way we&#8217;ve calculated things, a negative value is a profit, and a positive value is a loss. That&#8217;s confusing, so you typically flip the sign when reporting the number (so that a profit is positive).</p>

<p>Written in the standard way, our P&amp;L looks like this:</p>
<table style='margin: 1.5em 0'>
  <tr>
    <th rowspan='2' style='font-variant: small-caps;'>Revenue</th>
    <td style='border-bottom: 1px solid #888;'>Sales</td>
    <td style='border-bottom: 1px solid #888; text-align: right;'>$10,000</td>
  </tr>
  <tr>
    <th style='border-bottom: 1px solid #888;'>Total revenue</th>
    <th style='border-bottom: 1px solid #888; text-align: right;'>$10,000</th>
  </tr>
  <tr style='height: 0.7em' />
  <tr style='margin-top: 1em'>
    <th rowspan='4' style='font-variant: small-caps;'>Expenses</th>
    <td>Payroll</td>
    <td style='text-align: right;'>$8,000</td>
  </tr>
  <tr>
    <td>Depreciation</td>
    <td style='text-align: right;'>$125</td>
  </tr>
  <tr>
    <td style='border-bottom: 1px solid #888;'>Food</td>
    <td style='border-bottom: 1px solid #888; text-align: right;'>$13</td>
  </tr>
  <tr>
    <th style='border-bottom: 1px solid #888;'>Total expenses</th>
    <th style='border-bottom: 1px solid #888; text-align: right;'>$8,138</th>
  </tr>
  <tr style='height: 0.7em' />
  <tr style='margin-top: 1em'>
    <th style='padding-top: 1em; font-variant: small-caps;'>Total</th>
    <th style='border-bottom: 1px solid #888; font-weight: bold;'>Profit/Loss</th>
    <th style='border-bottom: 1px solid #888; font-weight: bold; text-align: right;'>$1,862</th>
    <td>(= total revenue - total expenses)</td>
  </tr>
</table>
<p>The meaning is fairly intuitive. You sold $10,000 worth of stuff, and spent only $8,138 in the process, so you made $1,862 profit.</p>

<p>The profit and loss statement is calculated over a period of time (usually a month, a quarter or a year), and it&#8217;s often interesting to compare two different periods. To calculate it for a period, filter your transactions to only include those which occurred within that period, and add up the account balances for just those transactions.</p>

<p>One thing to watch out for: profit doesn&#8217;t say anything about your bank account. The bank account is a green node, but we&#8217;re only looking at blue nodes here. In this example, you ended up with $23,995 in the bank, even though investors put in $25,000: you made a profit, yet still have less money in the bank than you did before, because Customer 2 hasn&#8217;t yet fully paid. That&#8217;s why it&#8217;s possible for a company to be profitable but still run out of money!</p>

<p><strong>The Balance Sheet</strong></p>

<p>The balance sheet is a bit less intuitive than the P&amp;L, but it&#8217;s quite a powerful document. It summarises what the company currently has and doesn&#8217;t have, and why.</p>

<p>Remember what I said earlier about partitioning the nodes into two disjoint sets, and their summed balances adding to zero? That&#8217;s exactly what happens on the balance sheet. We take all of the nodes in the graph; on the one side we consider all of the green nodes, and on the other side all the blue and pink nodes. The sum of all of the blue and pink nodes&#8217; balances is minus the sum of all of the green nodes&#8217; balances.</p>

<p>Now, by convention, accountants flip the sign on all of the blue and pink nodes&#8217; balances, which means that the two sums end up being equal. And that&#8217;s why it&#8217;s called a balance sheet.</p>

<p>In our example, it looks like this:</p>
<table style='margin: 1.5em 0'>
  <tr>
    <th rowspan='4' style='font-variant: small-caps;'>Assets</th>
    <td>Bank account</td>
    <td style='text-align: right;'>$23,995</td>
  </tr>
  <tr>
    <td>Debtors</td>
    <td style='text-align: right;'>$2,500</td>
  </tr>
  <tr>
    <td style='border-bottom: 1px solid #888;'>Furniture</td>
    <td style='border-bottom: 1px solid #888; text-align: right;'>$375</td>
  </tr>
  <tr>
    <th style='border-bottom: 1px solid #888;'>Total assets</th>
    <th style='border-bottom: 1px solid #888; text-align: right;'>$26,870</th>
  </tr>
  <tr style='height: 0.7em' />
  <tr style='margin-top: 1em'>
    <th rowspan='2' style='font-variant: small-caps;'>Liabilities</th>
    <td style='border-bottom: 1px solid #888;'>Credit card</td>
    <td style='border-bottom: 1px solid #888; text-align: right;'>$8</td>
  </tr>
  <tr>
    <th style='border-bottom: 1px solid #888;'>Total liabilities</th>
    <th style='border-bottom: 1px solid #888; text-align: right;'>$8</th>
  </tr>
  <tr style='height: 0.7em' />
  <tr>
    <th colspan='2' style='border-bottom: 1px solid #888; font-weight: bold;'>Total assets less total liabilities</th>
    <th style='border-bottom: 1px solid #888; font-weight: bold; text-align: right;'>$26,862</th>
  </tr>
  <tr style='height: 0.7em' />
  <tr style='margin-top: 1em'>
    <th rowspan='3' style='padding-top: 1em; font-variant: small-caps;'>Equity</th>
    <td>Profit/Loss</td>
    <td style='text-align: right;'>$1,862</td>
  </tr>
  <tr>
    <td style='border-bottom: 1px solid #888;'>Capital</td>
    <td style='border-bottom: 1px solid #888; text-align: right;'>$25,000</td>
  </tr>
  <tr>
    <th style='border-bottom: 1px solid #888; font-weight: bold;'>Total equity</th>
    <th style='border-bottom: 1px solid #888; font-weight: bold; text-align: right;'>$26,862</th>
  </tr>
</table>
<p>The top block (assets and liabilities) corresponds to the green nodes in the graph, whilst the bottom block contains the pink node (capital) and the sum of all of the blue nodes. We already showed all of the detail for the blue nodes on the Profit and Loss statement above; on the balance sheet we can sum them all up to a single number.</p>

<p>Some more sign-flipping has occurred here: I&#8217;ve written liabilities, equity and P&amp;L with their signs flipped (which usually, but not always, has the effect of making the numbers positive). That doesn&#8217;t change anything fundamental about the graph structure, it just puts things into the conventional schema.</p>

<p>So how can you interpret the balance sheet? There are various things you can read from it. You can see how much money is in the bank, and how much of that money has already been promised to other people (liabilities). You can see how much of the money in the bank came from investors, vs. how much came from sales. And it shows how much money is due to come in soon, from sales that have closed but haven&#8217;t yet been fully paid.</p>

<p>The total of the balance sheet is a lower bound on the value of your company. It&#8217;s a very pessimistic figure &#8212; it assumes that your team, your technology, your brand etc. are all worth precisely nothing; if your company raises money from investors, your valuation will be much higher than the balance sheet figure, since that valuation includes the value of team, technology, brand etc in the form of a wild guess. In established companies you can find &#8220;intangible assets&#8221; on the balance sheet, but since they are very hard to value, I suspect it&#8217;s not worth bothering with unless you know what you are doing.</p>

<p>That&#8217;s the end of our whirlwind tour through the world of accounting. If you&#8217;re a real accountant reading this, please forgive my simplifications; if you spot any mistakes, please let me know. For everyone else, I hope this has been useful. To find out when I write something new, please <a href='http://twitter.com/martinkl'>follow me on Twitter</a> or put your email address in this box:</p>
<form action='http://rapportive.us2.list-manage.com/subscribe/post?u=9a1adaf549282981a96e171d1&amp;id=4543b695f6' class='validate' id='mc-embedded-subscribe-form' method='post' name='mc-embedded-subscribe-form' target='_blank'>
    <fieldset>
        <div class='mc-field-group'>
            <label for='mce-EMAIL'>Email:</label>
            <input class='required email' id='mce-EMAIL' name='EMAIL' type='text' value='' />
            <input class='btn' id='mc-embedded-subscribe' name='subscribe' type='submit' value='Subscribe' />
        </div>
        <div id='mce-responses'>
            <div class='response' id='mce-error-response' style='display:none' />
            <div class='response' id='mce-success-response' style='display:none' />
        </div>
    </fieldset>
</form><p class='disclaimer'>
    I won't give your address to anyone else, won't send you any spam, and you can unsubscribe at any time.
</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>Having a launched product is hard</title>
                <link>http://martin.kleppmann.com/2010/12/21/having-a-launched-product-is-hard.html</link>
                <comments>http://martin.kleppmann.com/2010/12/21/having-a-launched-product-is-hard.html#disqus_thread</comments>
                <pubDate>Tue, 21 Dec 2010 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="true">http://martin.kleppmann.com/2010/12/21/having-a-launched-product-is-hard.html</guid>
                
                <description><![CDATA[ Over the last 6 months, we have been learning what it means to support a launched product. Some background: Rapportive launched in March 2010, and we joined Y Combinator for the Summer 2010 batch from June to August. Even though it was fantastic to have users and solid growth, it... ]]></description>
                <content:encoded><![CDATA[
                    <p>Over the last 6 months, <a href='http://rapportive.com'>we</a> have been learning what it means to support a launched product.</p>

<p>Some background: Rapportive <a href='http://blog.rapportive.com/the-accidental-launch'>launched</a> in March 2010, and we joined <a href='http://ycombinator.com/'>Y Combinator</a> for the Summer 2010 batch from June to August. Even though it was fantastic to have users and solid growth, it was actually a very frustrating time for us as a team.</p>

<p>We found the downside of having launched, namely that we ended up spending the entire 3 months of Y Combinator (and probably another month either side) doing the following:</p>

<ul>
<li>Answering many, many support emails and tweets</li>

<li>Raising <a href='http://techcrunch.com/2010/08/02/rapportive-funding/'>our seed round</a></li>

<li>Stopping our infrastructure from collapsing under our user growth</li>

<li>Responding to press and bloggers</li>

<li>Reading resum√©s and interviewing job candidates</li>

<li>Fixing gnarly bugs in production</li>

<li>Applying for visas, so that we could work in the US</li>

<li>Attending YC dinners and office hours</li>
</ul>

<p>By contrast, the ideal world of Y Combinator involves spending 3 months:</p>

<ul>
<li>Moving your product forward</li>

<li>Attending YC dinners and office hours</li>
</ul>

<p>Although all the things we were doing were valuable &#8212; even spending so much time on support is valuable, because we learnt a lot about our users, and we turned lots of people from angry strangers into enthusiastic supporters &#8212; it was incredibly frustrating. Our product development was almost stalled for months on end. And all the while, our YC batchmates were demoing new features every week, and getting a massive high from the productive flow of developing their products at a rapid pace.</p>

<p>So I am perhaps a bit envious of those who could move ahead rapidly and build their product without having to worry about supporting users or keeping their database alive. On the other hand, I am of course hugely grateful for our users who use and <a href='http://rapportive.com/buzz'>love our product</a> every day. I wouldn&#8217;t have it any other way.</p>
<p style='text-align: center'>
  <a href='http://adam.heroku.com/past/2008/4/23/the_startup_curve/'>
    <img alt='Photo of whiteboard at YC, showing curve of The Process' height='379' src='http://martin.kleppmann.com/2010/12/yc_whiteboard.jpg' width='500' />
  </a>
</p>
<p>Fortunately, we are not the first to experience this. At the YC office there is a whiteboard, now carrying somewhat iconic status, which reminds every single YC founder of <em>&#8220;The Process&#8221;</em>: once a startup has launched, the novelty will wear off, and the team will find itself in the <em>&#8220;Trough of Sorrow&#8221;</em>. We know what the Trough of Sorrow looks like. I have just described it. It&#8217;s not very much fun.</p>

<p>But here is good news: Rapportive now seems to have journeyed on to the next phase, we have made <a href='http://blog.rapportive.com/grow-your-network-with-rapportive'><em>&#8220;Releases of Improvement&#8221;</em></a>, and things are looking hopeful. Are we in those <em>&#8220;Wiggles of False Hope&#8221;</em>? Who knows. But hey, the money is in the bank, the visas are in our passports, the infrastructure has got a lot more robust, and most importantly, our product development is moving again. We have some really cool stuff coming soon. The hope is real. And we seem to have managed to avoid the <em>&#8220;Crash of Ineptitude&#8221;</em>.</p>

<p>So what have we learnt?</p>

<ul>
<li>
<p>Visibly iterating and improving the product is arguably the most important thing a startup should be doing, but sadly, other stuff has an uncanny ability to distract you away from product work. <a href='http://www.paulgraham.com/top.html'>Paul Graham has written</a> about money matters and disputes being particularly bad in this regard. That is true, and I would add server firefighting, recruitment and immigration to the list.</p>
</li>

<li>
<p>In order to get back into a flow of product development, we are now deliberately shunning distractions like recruitment and fundraising. We obviously can&#8217;t ignore these things forever, but for now it&#8217;s best for the business if we stay focussed on the thing we do best: making a <a href='http://www.paulgraham.com/good.html'>product that people want</a>. (We&#8217;re keeping one distraction, namely support, because it is so important. But we are rotating support duties so that most of the team can ignore it at any given moment.)</p>
</li>

<li>
<p>Be grateful if you carry a US passport.</p>
</li>

<li>
<p>Sometimes you just have to wade through a patch of mud, and there&#8217;s no way round it. But as long as you keep your eyes forward and keep moving, you&#8217;ll get through it, and things will brighten up.</p>
</li>
</ul>
<p style='text-align: center'>
  <a href='http://www.flickr.com/photos/performable/4792109640/sizes/l/in/set-72157623602121734/'>
    <img alt='Poster: We have a strategic plan. It&apos;s called doing things.' height='335' src='http://martin.kleppmann.com/2010/12/strategic_plan.jpg' width='500' />
  </a>
</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>Intuition has no transfer encoding</title>
                <link>http://martin.kleppmann.com/2010/10/30/intuition-has-no-transfer-encoding.html</link>
                <comments>http://martin.kleppmann.com/2010/10/30/intuition-has-no-transfer-encoding.html#disqus_thread</comments>
                <pubDate>Sat, 30 Oct 2010 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="false">http://www.yes-no-cancel.co.uk/?p=400</guid>
                
                <description><![CDATA[ Intuition is really annoying sometimes. Actually, I love intuition, because almost all my thinking is based on it. I don‚Äôt think I am very good at analysing and thinking things through logically. Often I just have a feeling about how something should be, and then sometimes I post-rationalise it. Not... ]]></description>
                <content:encoded><![CDATA[
                    <p><strong>Intuition is really annoying sometimes.</strong></p>

<p>Actually, I love intuition, because almost all my thinking is based on it. I don‚Äôt think I am very good at analysing and thinking things through logically. Often I just have a feeling about how something should be, and then sometimes I post-rationalise it.</p>

<p>Not everybody‚Äôs mind works this way; if yours works like this too, you will think this is completely obvious. If not, you probably know people of this type, who can just assert ‚ÄúI think we should do it this way‚Äù and turn out to be right in maybe 75% of cases. Intuition is never perfect, but I love it, because it often gives a ‚Äúgood enough‚Äù answer very quickly, or at least provides some pointers towards places where it would be worth spending a bit more time analysing.</p>

<p>The thing that I find so annoying about intuition is that it is <strong>very hard to communicate</strong>. Let me explain.</p>

<p>Intuition is built from a large number of experiences: you grow up, you go through life, you meet people, you go to places, you read stuff, you make up stuff. There is no chance you can remember all the things you ever experience in factual detail, because that would be an overwhelmingly huge amount of information. But those things are nevertheless not forgotten: each experience leaves a trace, a tiny shadow of memory, so your thinking afterwards is ever so slightly different from the way it was before.</p>

<p>Over the course of years, those tiny traces are aggregated, and what you get out at the end is an intuitive understanding of how the world works (or rather, how those parts of the world which you have experienced work). Think of it like very light crayon touches, in the hands of an artist, gradually forming to be a beautiful picture ‚Äî except that the picture is never complete, and always evolving.</p>
<object height='311' width='508'>
    <param name='movie' value='http://www.youtube.com/v/5OLP4nbAVA4?fs=1&amp;hl=en_US' />
    <param name='allowFullScreen' value='true' />
    <param name='allowscriptaccess' value='always' />
    <embed allowfullscreen='true' allowscriptaccess='always' height='311' src='http://www.youtube.com/v/5OLP4nbAVA4?fs=1&amp;hl=en_US' type='application/x-shockwave-flash' width='508' />
</object>
<p>With that intuition, when you encounter a new situation, it doesn‚Äôt matter that you haven‚Äôt encountered the exact same situation before: your brain does an approximate matching of the new situation with your mental model of the world, and immediately predicts the right answer. It doesn‚Äôt even need to search through memories, because the picture of the world in your head is already the fully aggregated sum of your experiences.</p>

<p>(As a second step, you will typically compare your gut reaction to specific memories, to check whether the results agree. But that‚Äôs another topic.)</p>

<p><strong>A tale of bitmaps and vector graphics</strong></p>

<p>The way I imagine the brain stores intuition is a bit like a huge bitmap image, with lots and lots of pixels [<a href='#intuition-footnote'>1</a>]. When a new piece of information comes in, the brain‚Äôs massively parallel processing structure takes the new information, combines it with the existing image, correlates, interpolates, extrapolates, and produces an answer in an instant.</p>

<p>But what if you want to teach your intuition to someone else? You can‚Äôt tell that person all the things you ever experienced in your life, because that would be far too much, and you‚Äôve forgotten and assimilated most of those memories anyway. But that mental bitmap is also a terrible transfer format: our mouths and hands are extremely slow communication channels, making it impossible to get the bitmap out of your brain. Imagine reading out the individual pixel values of a bitmap image over the phone. It would take hours before the other person had even the vaguest, blurriest idea of the outlines of the image. And it would take years to fill in the detail.</p>

<p>So&#8230; if you want to transfer that bitmap out of your brain and into someone else‚Äôs, even approximately, you have to turn that bitmap into a vector graphic.</p>

<p>In vector graphics, if you choose your points and curves carefully, you can communicate the general structure of a picture very succinctly. You can enable the other person to very quickly get a rough idea of your thinking. Of course it won‚Äôt have all the colourful detail until you add lots more information, but that‚Äôs ok. And once you have analysed your picture into a vector form, you have actually gained a better understanding of what it is really about, you can zoom in to see a higher resolution, and you may be able to spot patterns that you weren‚Äôt previously aware of.</p>

<p>Of course, the problem: turning bitmaps into vector graphics is hard. Computer Vision researchers are always thinking about better algorithms for doing it.</p>

<p>And to return from our image analogy to the topic of intuition: expressing intuitive knowledge in a structured form is really hard.</p>

<p><strong>Vectorising intuition</strong></p>

<p>As a child, when you learn your first language by imitating sounds and by being continually corrected by your parents, you are building an intuition for the way that language works. You start off with <em>ga ga ga</em>, and it takes years before you can speak a coherent sentence; later, as time goes on and you grow up, you get quite good at it. Because your brain stores a pre-rendered representation of the language, you can speak and understand it easily and quickly.</p>

<p>When an adult learns a foreign language, by contrast, the usual way of learning it is by studying grammar, vocabulary and carefully chosen texts. The rules of grammar and the structure of the syllabus are a kind of vector representation of the language, optimised for giving the learner a rough overview of the language structure and helping them construct useful sentences as quickly as possible.</p>

<p>It is perfectly possible for an adult to go to a foreign country with no prior knowledge of the language, and to learn to speak it without formal grammar or syllabus, in the same way as a child does. However, most adults prefer to learn a language in a systematic manner, presumably because learning in ‚Äúvectorised‚Äù form allows you to be much faster in getting to the stage where you can have an interesting conversation.</p>

<p>No matter which way you learn the basics, it always takes years to reach native proficiency in a language; that is unavoidable, because in the end you can‚Äôt get around learning a huge amount of subtle details and building your own intuition. (Even if represented in vector form, complicated curves and shadings require a large number of points.) The difference is in the time it takes to grok the core concepts.</p>

<p><strong>But here comes the important bit.</strong> When it comes to learning languages, most languages have benefitted from decades (if not centuries) of research and systematisation efforts by many intelligent people. For most languages, grammar and learning techniques are very well understood. But what if you want to communicate some intuition that <strong>only you</strong> have? Well, you have to do the vectorising yourself.</p>

<p>When you have built an intuition in a specific area that is not well-known ‚Äî say, with regard to some arcane or new technology, or with regard to your company‚Äôs business strategy ‚Äî then there is no existing grammar you can refer to. You are like a linguist, <a href='http://en.wikipedia.org/wiki/Daniel_Everett'>going into the Amazonian Jungle</a> to document mysterious languages not yet known to the outside world. You have to observe the systematic parts and the exceptions, and formulate the grammar yourself.</p>

<p>Turning your intuitive bitmap into a vector form that you can communicate&#8230; is hard. Very hard. But you need to figure it out.</p>

<p><strong>Why is this important?</strong></p>

<p>Well, there‚Äôs only so far that a single person‚Äôs intuition can reach. If you want to build great things and change the world, you need much more than a single person‚Äôs brain can hold. You need both depth and breadth: fine-grained intuition in specific technical fields requiring expertise, and also a greater variety of perspectives than a single person can have experienced.</p>

<p>You need to combine the intuitions of several people, i.e. you have to form a team. And in order to combine your intuitions, you need to communicate and explain them. Why? Because otherwise you have no way of resolving differences, and no way of learning from each other and improving.</p>

<p>By default, intuition comes without a reason attached: you ‚Äòsimply know‚Äô that the answer is X, but you don‚Äôt know why. The problem arises when your colleague ‚Äòsimply knows‚Äô that the answer is Y, where X‚â†Y, and doesn‚Äôt know a reason either. (Maybe X and Y are not completely contradictory, but rather partially overlapping ideas or differences in emphasis. Different nevertheless.) At that point either one has to overrule the other (which would defeat the goal of forming a team in the first place), or you have to rationalise the intuition, untangle the pre-aggregated reasoning, and communicate it in terms which the other person can understand.</p>

<p>What if you could understand the structure of both X and Y, and the reasoning behind it, and thus manage to synthesise the two? That is a lot of effort, but I am increasingly thinking that figuring out how to communicate your intuition is one of the most valuable things you can do in a team. For if you can combine your mental image of the world with other people‚Äôs, you can build something much greater than each of you. Your thoughts can be superhuman, in some sense. And that, if you can figure it out, is a huge advantage you can have.</p>

<p>A startup is a really interesting environment to try this kind of thing, because you can be as choosy as you want about the people you work with. You can pick like-minded people, and together work towards that shared intuition. You can build a good, well-founded, shared intuition of who your customers are and what they want. And if you can attain that shared intuition, you&#8217;re well underway to success.</p>

<p><strong>Footnote:</strong></p>
<a name='intuition-footnote'>
</a>
<p>[1] I&#8217;m not sure what each individual pixel represents. In mathematical terms, a picture is a function mapping from 2D space to colour, and a bitmap approximates this function by sampling at regularly spaced values of the input. Along that line of thinking, the mind is probably a function mapping from sensory inputs and memories to explanations and actions (or something along those lines ‚Äî I&#8217;m not a neuroscientist). This function can be represented as lots of individual data points (&#8220;London &amp; lunchtime &amp; hunger &amp; last had Falafel 10 days ago ‚Üí go to the King of Falafel&#8221;), which is bitmap-like, or in some systematic manner (&#8220;I like to eat falafel for lunch. For example, in London, the King of Falafel is good.&#8221;), which is vector-like, omitting redundant information (lunchtime and hunger are strongly correlated, so mentioning both is fairly redundant) and emphasising structure or dependencies (the King of Falafel only exists in London). However, as you can see, his only vaguely makes sense. The bitmap/vector analogy is itself an example of a piece of intuition that I&#8217;m trying to communicate to you right now.</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>Good things are hard to articulate</title>
                <link>http://martin.kleppmann.com/2010/08/31/good-things-are-hard-to-articulate.html</link>
                <comments>http://martin.kleppmann.com/2010/08/31/good-things-are-hard-to-articulate.html#disqus_thread</comments>
                <pubDate>Tue, 31 Aug 2010 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="false">http://www.yes-no-cancel.co.uk/?p=394</guid>
                
                <description><![CDATA[ If you have a stone in your shoe, it&#8217;s easy to articulate what is wrong (&#8220;something is hurting my foot!&#8221;). But if you don&#8217;t have a stone in your shoe, you don&#8217;t go around rejoicing with every step. If you have just removed a stone, you may be pleased for... ]]></description>
                <content:encoded><![CDATA[
                    <p>If you have a stone in your shoe, it&#8217;s easy to articulate what is wrong (&#8220;something is hurting my foot!&#8221;). But if you don&#8217;t have a stone in your shoe, you don&#8217;t go around rejoicing with every step. If you have just removed a stone, you may be pleased for a few seconds to have removed the irritation, but things very quickly return to normal.</p>

<p>The bad things keep sticking around and irritating us, whereas the good things are quickly taken for granted. The bad things are often easy to describe, whereas the good things are sometimes just the absence of a bad thing &#8212; the absence of some irritation.</p>

<p>This is a fundamental asymmetry, and it has lots of implications, big and small. For example, a big implication is the development of human society and technology. Because we are more prone to noticing bad things, and bad things keep bugging us, we try to fix bad things and make them go away. So humans invented tools (to stop hurting their fingers), agriculture (to stop hunger and laborious hunting/gathering), medicine (to stop their family members from dying), writing (to stop forgetfulness) and the internet (to stop the slowness of paper communication). Over history, humans have continuously taken stuff that is bad, and tried to make it better. Now that we have all these good things (tools, agriculture, medicine, writing, internet), we mostly take them for granted and don&#8217;t think about them any more.</p>

<p>(Some things that humans invented turned out to have bad side-effects besides their intended good effect. Take weapons as an example: intended to stop the hungry neighbours from stealing our food, but the idea got taken a bit too far. But that&#8217;s a different story.)</p>

<p>There are also other, less grandiose consequences of bad things being more noticeable. For example, when I was writing music and song lyrics, I found it comparatively easy to write about themes like conflict, struggle and sadness; writing about good things, however, was much harder. It would often just sound trite, banal and uninteresting.</p>

<p>How do you articulate those things that are good? Part of the point of this very essay is to see if I can write about things being good without just being incredibly boring. And what do I do? Complain about the fact that it&#8217;s hard to express things that are good. I complain. I am irritated that bad things are easier to write about than good things. And so I write about that irritation, thereby locking myself in a self-referential loop.</p>

<p>How annoying. Let&#8217;s talk about the good things again.</p>

<p>An observation. If bad things are much more noticeable than good things, that means that it&#8217;s very easy to lose sight of all the good things. In fact, it probably means that we are surrounded by lots of wonderful things that we&#8217;ve simply forgotten about. It might even be that the vast majority of things around us are good, and we are just failing to notice them!</p>

<p>We need to consciously remind ourselves of the good things from time to time, to avoid getting too bogged down in the bad things. That cannot mean getting complacent; it just means enjoying and appreciating life.</p>

<p>For example, I am writing this essay on a mobile phone (good) connected to the internet (good) while sitting in the sunshine (good) in a park (good) in San Francisco (good). I am wearing comfortable clothes (good) and don&#8217;t have any stones in my shoes (good). I live in a peaceful age (good) in a peaceful society (good). I am educated (good), healthy (good), don&#8217;t need to worry about being able to afford the rent (good) and I have a wonderful family (good). I look forward to sending this essay to Rita (good) to see what she thinks. (Hopefully it&#8217;s not too bad.)</p>
                ]]></content:encoded>
            </item>
        
            <item>
                <title>Valuation caps on convertible notes, explained with graphs</title>
                <link>http://martin.kleppmann.com/2010/05/05/valuation-caps-on-convertible-notes-explained-with-graphs.html</link>
                <comments>http://martin.kleppmann.com/2010/05/05/valuation-caps-on-convertible-notes-explained-with-graphs.html#disqus_thread</comments>
                <pubDate>Wed, 05 May 2010 00:00:00 +0000</pubDate>
                <dc:creator>Martin Kleppmann</dc:creator>
                
                    <guid isPermaLink="false">http://www.yes-no-cancel.co.uk/?p=378</guid>
                
                <description><![CDATA[ When you&#8217;re an entrepreneur out to raise funding, you&#8217;re faced with a whole lot of legal and financial jargon, and getting your head around it takes a lot of valuable time &#8211; that&#8217;s time in which you&#8217;re not doing the things which really matter (namely making your product better, making... ]]></description>
                <content:encoded><![CDATA[
                    <p>When you&#8217;re an entrepreneur out to raise funding, you&#8217;re faced with a whole lot of legal and financial jargon, and getting your head around it takes a lot of valuable time &#8211; that&#8217;s time in which you&#8217;re not doing the things which really matter (namely making your product better, making your existing customers happy and acquiring new customers).</p>

<p>But actually, if explained properly, most of the legal and financial stuff isn&#8217;t that complicated. The legal documents do a terrible job of explaining, because they define everything in legalese prose. Graphs make it much clearer, as Leo Dirac has shown in his wonderful <a href='http://www.slideshare.net/leodirac/5minute-primer-on-vc-term-sheets'>graphical explanation of liquidation preferences</a>. You should go and look at that presentation.</p>

<p>I&#8217;d like to explain a different financial concept, namely the <strong>valuation cap on convertible notes</strong>. It took me several hours to get my head around it, so I&#8217;d like to save you those hours.</p>

<p><strong>The pros and cons of convertible notes</strong></p>

<p>I assume you know what a convertible note (aka convertible loan) is: instead of buying shares in your startup, the investor just gives you the money on a loan with some nominal interest rate. And you promise that when you raise your next round of funding, the loan converts into shares as if they had put that money in during that second round. Since the investor took additional risk by backing you early, they get a discounted share price (they get more shares than someone who puts in the same amount of money in the second round), and that discount is fixed and agreed upon beforehand. It&#8217;s typically between about 15% and 30%.</p>

<p>The good thing about convertible notes is that they require less paperwork (and are thus faster to get done), and &#8211; in theory &#8211; don&#8217;t require you to set a valuation, because the share price will be determined in the next round. However, many investors don&#8217;t like them. If the company is really successful (as everybody hopes it will be) and the valuation in the next round is high, then the investors don&#8217;t get any of that increase in value &#8211; they just get their fixed discount, and that&#8217;s it.</p>

<p>With some <a href='http://www.crunchbase.com/person/ron-conway'>big-name investors</a>, the company&#8217;s value goes up simply by being associated with the big name. Naturally, the investor will also want to benefit from that increase in value, because otherwise there&#8217;s not much incentive for them to help.</p>

<p>Enter the valuation cap, which appears to now be a standard term of convertible notes, in Silicon Valley at least. The cap is the convertible note investor basically saying: <em>&#8220;If things go ok, I&#8217;m happy with my fixed 20% discount. But if you do really well, I want us to treat it as if I had bought shares in the first place.&#8221;</em> (That way they benefit more from the success.)</p>

<p>So you went for a convertible note hoping that you wouldn&#8217;t have to set a valuation for your startup. Well, with the valuation cap you don&#8217;t strictly have a valuation, but you <em>do</em> have a <em>range of valuations</em>: the company is certainly not worth less than X, and not worth more than Y.</p>

<p>In effect, someone has now got to decide on a valuation, which is a notoriously unscientific thing. How do you come up with reasonable numbers? You need to somehow build an intuition for what this stuff means.</p>

<p><strong>How to determine your valuation cap</strong></p>

<p>The best way to think about it is to start with some guesswork numbers, consider a range of different scenarios, and work out the consequences. Then you can decide which consequences are unacceptable, and work backwards.</p>

<p>Let&#8217;s work through an example. Say you&#8217;re a small startup team raising your first seed round, and you expect to raise a Series A from VCs sometime in future. Your input variables are:</p>

<ul>
<li>the amount you&#8217;re raising on the convertible note (say $500k),</li>

<li>the conversion discount of the note (say 20%),</li>

<li>the pre-money valuation cap of the note (say $4m),</li>

<li>the percentage of your company which the VCs will take in your Series A (say 30%),</li>

<li>the amount of money you expect to raise in your Series A (say somewhere between $1m and $5m).</li>
</ul>

<p>There are a few other parameters (like the interest rate on the loan, and the time between the seed round and the series A), but they ought to have only a minor impact.</p>

<p>The biggest unknown here is the amount you&#8217;ll want to raise in your Series A, so let&#8217;s look at a range of scenarios for that value, and take the other variables to be fixed.</p>

<p>There are two consequences of the numbers which are useful to think about:</p>

<p><strong>1. What share of the company do the convertible note investors own after the Series A?</strong></p>

<p>We assumed above that after the Series A, the Series A investors own 30% of the company. But how much do the seed investors own after converting their note into shares?</p>
<img alt='How much equity does the note convert into?' class='aligncenter size-full wp-image-379' height='402' src='http://martin.kleppmann.com/2010/05/Valuation-Cap-demo-1.png' width='550' />
<p>Without the valuation cap, the seed investors end up with an ever diminishing share of the company as the valuation increases. The effect of the cap is that the convertible note investors are guaranteed a certain share of the company, even if you get a <a href='http://techcrunch.com/2010/03/25/four-vc-firms-battle-for-foursquare-valuation-goes-stratospheric/'>Foursquare valuation</a>.</p>

<p>That minimum share is: (1 &#8211; [series A investor ownership] ) * [amount raised on conv note] / [valuation cap]. (The first factor takes into account the Series A dilution.) In this example, the note will convert into a minimum of (1&#8211;0.3) * $0.5m / $4m = 8.75% of the company&#8217;s shares.</p>

<p><strong>2. What effective discount are the convertible note investors getting relative to the Series A investors?</strong></p>

<p>If you didn&#8217;t have a cap, you would simply give a fixed (say 20%) discount when the note converts into shares. But when you have a cap, and your Series A valuation hits the cap, you&#8217;re fixing the price for the early investors, while the incoming Series A investors might be paying a lot more per share. So you are effectively giving a greater than 20% discount in that case.</p>
<img alt='Effective discount on conversion' class='aligncenter size-full wp-image-380' height='403' src='http://martin.kleppmann.com/2010/05/Valuation-Cap-demo-2.png' width='550' />
<p>I find this graph interesting, because it&#8217;s basically a measure of &#8220;how annoyed the VCs are going to be about the convertible note&#8221;. &#8211; Imagine you&#8217;re at the theatre, and you know that for the same ticket you paid 2 or even 3 times as much as the guy sitting next to you. You would not be happy, because it just doesn&#8217;t feel fair. If your valuation goes substantially above the cap, there can be a big difference in share price.</p>

<p>Of course, if your startup is awesome and investors are desperate to be part of your round, this probably won&#8217;t be an issue. And of course, maybe such a large discount is entirely fair if your Angel investors add a lot of value beyond the money they put in. But it&#8217;s a factor to keep in mind. At least with a graph like this you can start thinking about your numbers usefully.</p>

<p><strong>Postscript</strong></p>

<p>None of this gives you an immediate answer to the question &#8220;what should we write on our convertible note term sheet?&#8221;, but at least you should now be able to think about valuation caps from a few different angles.</p>

<p>Disclaimer: neither am I a lawyer nor do I have much experience with this stuff, so my explanation may be horribly flawed or simply wrong. (If you find a mistake, please let me know.)</p>

<p>You can <a href='http://martin.kleppmann.com/2010/05/Valuation-Cap-demo-for-blog.xlsx.zip'>download the Excel spreadsheet</a> which I used to generate these graphs. An interesting alternative way of looking at this would be to assume a fixed Series A amount, and instead work out what happens when you vary the valuation cap. I&#8217;ll leave that as an exercise for you, dear reader.</p>

<p>Incidentally, our awesome startup, <a href='http://rapportive.com'>Rapportive</a>, is raising a seed round at the moment. It&#8217;s filling up quickly, so please <a href='mailto:martin@rapportive.com'>get in touch soon</a> if you may be interested. The terms may have certain similarities with my example here, or they may not &#8211; I couldn&#8217;t say. ;-)</p>

<p><strong>Update (11 June 2010):</strong> Packed the Excel spreadsheet in a ZIP file to fix download problems.</p>

<p><strong>Update (23 August 2011):</strong> <a href='http://www.danielodio.com/'>Daniel Odio</a> has made this into a <a href='http://go.DanielOdio.com/convertible-note'>Google Docs spreadsheet</a> &#8211; you can just fill in your numbers and see the results immediately. Awesome!</p>
                ]]></content:encoded>
            </item>
        
    </channel>
</rss>
